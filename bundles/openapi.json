{
  "openapi": "3.1.0",
  "info": {
    "title": "Wp-openapi API",
    "description": "",
    "version": "6.7.1",
    "contact": {
      "name": "wp-openapi",
      "url": "http://localhost",
      "email": "emmanuel.amadio@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://any-server.com/wp-json"
    }
  ],
  "security": [],
  "paths": {
    "/wp/v2": {
      "get": {
        "tags": [
          "wp/v2"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "default": "wp/v2"
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "default": "view"
            }
          }
        ]
      }
    },
    "/oembed/1.0": {
      "get": {
        "tags": [
          "oembed/1.0"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "default": "oembed/1.0"
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "default": "view"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/oembed/1.0/embed": {
      "get": {
        "tags": [
          "oembed/1.0"
        ],
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "The URL of the resource for which to fetch oEmbed data.",
            "required": true,
            "schema": {
              "format": "uri"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "default": "json"
            }
          },
          {
            "name": "maxwidth",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "default": 600
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/oembed/1.0/proxy": {
      "get": {
        "tags": [
          "oembed/1.0"
        ],
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "The URL of the resource for which to fetch oEmbed data.",
            "required": true,
            "schema": {
              "format": "uri"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "The oEmbed format to use.",
            "required": false,
            "schema": {
              "default": "json",
              "enum": [
                "json",
                "xml"
              ]
            }
          },
          {
            "name": "maxwidth",
            "in": "query",
            "description": "The maximum width of the embed frame in pixels.",
            "required": false,
            "schema": {
              "default": 600
            }
          },
          {
            "name": "maxheight",
            "in": "query",
            "description": "The maximum height of the embed frame in pixels.",
            "required": false,
            "schema": {}
          },
          {
            "name": "discover",
            "in": "query",
            "description": "Whether to perform an oEmbed discovery request for unsanctioned providers.",
            "required": false,
            "schema": {
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/wp/v2/block-directory/search": {
      "get": {
        "tags": [
          "block directory"
        ],
        "operationId": "blockDirectorySearchList",
        "summary": "List block directory items",
        "description": "Query this endpoint to retrieve a collection of block directory items.\n\nThe response you receive can be controlled and filtered using the URL query parameters below.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContextView"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPage"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPerPage"
          },
          {
            "name": "term",
            "in": "query",
            "description": "Limit result set to blocks matching the search term.",
            "required": true,
            "schema": {
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockDirectoryItemResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/block-patterns/patterns": {
      "get": {
        "tags": [
          "Block patterns"
        ],
        "operationId": "blockPatternsList",
        "summary": "List block patterns",
        "description": "Query this endpoint to retrieve a collection of block patterns items.\n\nThere are no query parameters for this endpoint.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockPatternsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/block-patterns/categories": {
      "get": {
        "tags": [
          "Block patterns"
        ],
        "operationId": "blockPatternsCategoriesList",
        "summary": "List block patterns categories",
        "description": "Query this endpoint to retrieve a collection of block patterns categories.\n\nThere are no query parameters for this endpoint.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockPatternCategoryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/block-renderer/{name}": {
      "get": {
        "tags": [
          "Block renderer"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Unique registered name for the block.",
            "required": true,
            "schema": {}
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "default": "view",
              "enum": [
                "edit"
              ]
            }
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "Attributes for the block.",
            "required": false,
            "schema": {}
          },
          {
            "name": "post_id",
            "in": "query",
            "description": "ID of the post context.",
            "required": false,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RenderedBlockResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Block renderer"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Unique registered name for the block.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "context": {
                    "description": "Scope under which the request is made; determines fields present in response.",
                    "default": "view",
                    "type": "string",
                    "enum": [
                      "edit"
                    ]
                  },
                  "attributes": {
                    "description": "Attributes for the block.",
                    "default": [],
                    "type": "object"
                  },
                  "post_id": {
                    "description": "ID of the post context.",
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RenderedBlockResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/block-types": {
      "get": {
        "tags": [
          "block types"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "name": "namespace",
            "in": "query",
            "description": "Block namespace.",
            "required": false,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockTypeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/block-types/{namespace}": {
      "get": {
        "tags": [
          "block types"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "name": "namespace",
            "in": "path",
            "description": "Block namespace.",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockTypeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/block-types/{namespace}/{name}": {
      "get": {
        "tags": [
          "block types"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Block name.",
            "required": true,
            "schema": {}
          },
          {
            "name": "namespace",
            "in": "path",
            "description": "Block namespace.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockTypeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/blocks": {
      "get": {
        "tags": [
          "blocks"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPBlockResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPage"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPerPage"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {}
          },
          {
            "name": "after",
            "in": "query",
            "description": "Limit response to posts published after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "format": "date-time"
            }
          },
          {
            "name": "modified_after",
            "in": "query",
            "description": "Limit response to posts modified after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "format": "date-time"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Limit response to posts published before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "format": "date-time"
            }
          },
          {
            "name": "modified_before",
            "in": "query",
            "description": "Limit response to posts modified before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "format": "date-time"
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "search_semantics",
            "in": "query",
            "description": "How to interpret the search input.",
            "required": false,
            "schema": {
              "enum": [
                "exact"
              ]
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterOrder"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by post attribute.",
            "required": false,
            "schema": {
              "default": "date",
              "enum": [
                "author",
                "date",
                "id",
                "include",
                "modified",
                "parent",
                "relevance",
                "slug",
                "include_slugs",
                "title"
              ]
            }
          },
          {
            "name": "search_columns",
            "in": "query",
            "description": "Array of column names to be searched.",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "post_title",
                  "post_content",
                  "post_excerpt"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to posts with one or more specific slugs.",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Limit result set to posts assigned one or more statuses.",
            "required": false,
            "schema": {
              "default": "publish",
              "items": {
                "enum": [
                  "publish",
                  "future",
                  "draft",
                  "pending",
                  "private",
                  "trash",
                  "auto-draft",
                  "inherit",
                  "request-pending",
                  "request-confirmed",
                  "request-failed",
                  "request-completed",
                  "any"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "tax_relation",
            "in": "query",
            "description": "Limit result set based on relationship between multiple taxonomies.",
            "required": false,
            "schema": {
              "enum": [
                "AND",
                "OR"
              ]
            }
          },
          {
            "name": "wp_pattern_category",
            "in": "query",
            "description": "Limit result set to items with specific terms assigned in the wp_pattern_category taxonomy.",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "title": "Term ID List",
                  "description": "Match terms with the listed IDs.",
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                },
                {
                  "title": "Term ID Taxonomy Query",
                  "description": "Perform an advanced term query.",
                  "type": "object",
                  "properties": {
                    "terms": {
                      "description": "Term IDs.",
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "default": []
                    },
                    "operator": {
                      "description": "Whether items must be assigned all or any of the specified terms.",
                      "type": "string",
                      "enum": [
                        "AND",
                        "OR"
                      ],
                      "default": "OR"
                    }
                  },
                  "unevaluatedProperties": false
                }
              ]
            }
          },
          {
            "name": "wp_pattern_category_exclude",
            "in": "query",
            "description": "Limit result set to items except those with specific terms assigned in the wp_pattern_category taxonomy.",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "title": "Term ID List",
                  "description": "Match terms with the listed IDs.",
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                },
                {
                  "title": "Term ID Taxonomy Query",
                  "description": "Perform an advanced term query.",
                  "type": "object",
                  "properties": {
                    "terms": {
                      "description": "Term IDs.",
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "default": []
                    }
                  },
                  "unevaluatedProperties": false
                }
              ]
            }
          }
        ]
      },
      "post": {
        "tags": [
          "blocks"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPBlockResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "description": "The date the post was published, in the site's timezone.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "date_gmt": {
                    "description": "The date the post was published, as GMT.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the post unique to its type.",
                    "type": "string"
                  },
                  "status": {
                    "description": "A named status for the post.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "password": {
                    "description": "A password to protect access to the content and excerpt.",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Title for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ]
                      }
                    }
                  },
                  "content": {
                    "description": "The content for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Content for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ]
                      },
                      "block_version": {
                        "description": "Version of the content block format used by the post.",
                        "type": "integer",
                        "x-context": [
                          "edit"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the content is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "excerpt": {
                    "description": "The excerpt for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Excerpt for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML excerpt for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the excerpt is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object",
                    "properties": {
                      "wp_pattern_sync_status": {
                        "type": "string",
                        "title": "",
                        "description": "",
                        "default": "",
                        "enum": [
                          "partial",
                          "unsynced"
                        ]
                      },
                      "footnotes": {
                        "type": "string",
                        "title": "",
                        "description": "",
                        "default": ""
                      }
                    }
                  },
                  "template": {
                    "description": "The theme file to use to display the post.",
                    "type": "string"
                  },
                  "wp_pattern_category": {
                    "description": "The terms assigned to the post in the wp_pattern_category taxonomy.",
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/blocks/{id}": {
      "get": {
        "tags": [
          "blocks"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPBlockResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "name": "excerpt_length",
            "in": "query",
            "description": "Override the default excerpt length.",
            "required": false,
            "schema": {}
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for the post if it is password protected.",
            "required": false,
            "schema": {}
          }
        ]
      },
      "post": {
        "tags": [
          "blocks"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPBlockResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "description": "The date the post was published, in the site's timezone.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "date_gmt": {
                    "description": "The date the post was published, as GMT.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the post unique to its type.",
                    "type": "string"
                  },
                  "status": {
                    "description": "A named status for the post.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "password": {
                    "description": "A password to protect access to the content and excerpt.",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Title for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ]
                      }
                    }
                  },
                  "content": {
                    "description": "The content for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Content for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ]
                      },
                      "block_version": {
                        "description": "Version of the content block format used by the post.",
                        "type": "integer",
                        "x-context": [
                          "edit"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the content is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "excerpt": {
                    "description": "The excerpt for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Excerpt for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML excerpt for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the excerpt is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object",
                    "properties": {
                      "wp_pattern_sync_status": {
                        "type": "string",
                        "title": "",
                        "description": "",
                        "default": "",
                        "enum": [
                          "partial",
                          "unsynced"
                        ]
                      },
                      "footnotes": {
                        "type": "string",
                        "title": "",
                        "description": "",
                        "default": ""
                      }
                    }
                  },
                  "template": {
                    "description": "The theme file to use to display the post.",
                    "type": "string"
                  },
                  "wp_pattern_category": {
                    "description": "The terms assigned to the post in the wp_pattern_category taxonomy.",
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "blocks"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPBlockResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "description": "The date the post was published, in the site's timezone.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "date_gmt": {
                    "description": "The date the post was published, as GMT.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the post unique to its type.",
                    "type": "string"
                  },
                  "status": {
                    "description": "A named status for the post.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "password": {
                    "description": "A password to protect access to the content and excerpt.",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Title for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ]
                      }
                    }
                  },
                  "content": {
                    "description": "The content for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Content for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ]
                      },
                      "block_version": {
                        "description": "Version of the content block format used by the post.",
                        "type": "integer",
                        "x-context": [
                          "edit"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the content is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "excerpt": {
                    "description": "The excerpt for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Excerpt for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML excerpt for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the excerpt is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object",
                    "properties": {
                      "wp_pattern_sync_status": {
                        "type": "string",
                        "title": "",
                        "description": "",
                        "default": "",
                        "enum": [
                          "partial",
                          "unsynced"
                        ]
                      },
                      "footnotes": {
                        "type": "string",
                        "title": "",
                        "description": "",
                        "default": ""
                      }
                    }
                  },
                  "template": {
                    "description": "The theme file to use to display the post.",
                    "type": "string"
                  },
                  "wp_pattern_category": {
                    "description": "The terms assigned to the post in the wp_pattern_category taxonomy.",
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "blocks"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPBlockResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "description": "The date the post was published, in the site's timezone.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "date_gmt": {
                    "description": "The date the post was published, as GMT.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the post unique to its type.",
                    "type": "string"
                  },
                  "status": {
                    "description": "A named status for the post.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "password": {
                    "description": "A password to protect access to the content and excerpt.",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Title for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ]
                      }
                    }
                  },
                  "content": {
                    "description": "The content for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Content for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ]
                      },
                      "block_version": {
                        "description": "Version of the content block format used by the post.",
                        "type": "integer",
                        "x-context": [
                          "edit"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the content is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "excerpt": {
                    "description": "The excerpt for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Excerpt for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML excerpt for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the excerpt is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object",
                    "properties": {
                      "wp_pattern_sync_status": {
                        "type": "string",
                        "title": "",
                        "description": "",
                        "default": "",
                        "enum": [
                          "partial",
                          "unsynced"
                        ]
                      },
                      "footnotes": {
                        "type": "string",
                        "title": "",
                        "description": "",
                        "default": ""
                      }
                    }
                  },
                  "template": {
                    "description": "The theme file to use to display the post.",
                    "type": "string"
                  },
                  "wp_pattern_category": {
                    "description": "The terms assigned to the post in the wp_pattern_category taxonomy.",
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "blocks"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPBlockResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Whether to bypass Trash and force deletion.",
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/blocks/{parent}/revisions": {
      "get": {
        "tags": [
          "blocks"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPBlockRevisionResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPage"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPerPage"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {}
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterOrder"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by object attribute.",
            "required": false,
            "schema": {
              "default": "date",
              "enum": [
                "date",
                "id",
                "include",
                "relevance",
                "slug",
                "include_slugs",
                "title"
              ]
            }
          }
        ]
      }
    },
    "/wp/v2/blocks/{parent}/revisions/{id}": {
      "get": {
        "tags": [
          "blocks"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPBlockRevisionResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {}
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ]
      },
      "delete": {
        "tags": [
          "blocks"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPBlockRevisionResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {}
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Required to be true, as revisions do not support trashing.",
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/blocks/{id}/autosaves": {
      "get": {
        "tags": [
          "blocks"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPBlockRevisionResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the autosave.",
            "required": false,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ]
      },
      "post": {
        "tags": [
          "blocks"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPBlockRevisionResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "parent": {
                    "description": "The ID for the parent of the autosave.",
                    "type": "integer"
                  },
                  "date": {
                    "description": "The date the post was published, in the site's timezone.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "date_gmt": {
                    "description": "The date the post was published, as GMT.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the post unique to its type.",
                    "type": "string"
                  },
                  "status": {
                    "description": "A named status for the post.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "password": {
                    "description": "A password to protect access to the content and excerpt.",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Title for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ]
                      }
                    }
                  },
                  "content": {
                    "description": "The content for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Content for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ]
                      },
                      "block_version": {
                        "description": "Version of the content block format used by the post.",
                        "type": "integer",
                        "x-context": [
                          "edit"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the content is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "excerpt": {
                    "description": "The excerpt for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Excerpt for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML excerpt for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the excerpt is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object",
                    "properties": {
                      "wp_pattern_sync_status": {
                        "type": "string",
                        "title": "",
                        "description": "",
                        "default": "",
                        "enum": [
                          "partial",
                          "unsynced"
                        ]
                      },
                      "footnotes": {
                        "type": "string",
                        "title": "",
                        "description": "",
                        "default": ""
                      }
                    }
                  },
                  "template": {
                    "description": "The theme file to use to display the post.",
                    "type": "string"
                  },
                  "wp_pattern_category": {
                    "description": "The terms assigned to the post in the wp_pattern_category taxonomy.",
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/blocks/{parent}/autosaves/{id}": {
      "get": {
        "tags": [
          "blocks"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPBlockRevisionResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the autosave.",
            "required": true,
            "schema": {}
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID for the autosave.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ]
      }
    },
    "/wp/v2/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "operationId": "categoriesList",
        "summary": "List categories",
        "description": "Query this endpoint to retrieve a collection of categories.\n\nThe response you receive can be controlled and filtered using the URL query parameters below.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPage"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPerPage"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {}
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "$ref": "#/components/parameters/QueryParameterOrder",
            "schema": {
              "default": "asc"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by term attribute.",
            "required": false,
            "schema": {
              "default": "name",
              "enum": [
                "id",
                "include",
                "name",
                "slug",
                "include_slugs",
                "term_group",
                "description",
                "count"
              ]
            }
          },
          {
            "name": "hide_empty",
            "in": "query",
            "description": "Whether to hide terms not assigned to any posts.",
            "required": false,
            "schema": {}
          },
          {
            "name": "parent",
            "in": "query",
            "description": "Limit result set to terms assigned to a specific parent.",
            "required": false,
            "schema": {}
          },
          {
            "name": "post",
            "in": "query",
            "description": "Limit result set to terms assigned to a specific post.",
            "required": false,
            "schema": {}
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to terms with one or more specific slugs.",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Categories"
        ],
        "operationId": "categoryCreate",
        "summary": "Create category",
        "description": "Query this endpoint to create a category.\n",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "HTML description of the term.",
                    "type": "string"
                  },
                  "name": {
                    "description": "HTML title for the term.",
                    "type": "string"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the term unique to its type.",
                    "type": "string"
                  },
                  "parent": {
                    "description": "The parent term ID.",
                    "type": "integer"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/categories/{id}": {
      "get": {
        "tags": [
          "Categories"
        ],
        "operationId": "categoryGet",
        "summary": "Retrieve a category",
        "description": "Query this endpoint to retrieve to retrieve a specific category record.\n\nThe response you receive can be controlled and filtered using the URL query parameters below.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathParameterId"
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Categories"
        ],
        "operationId": "categoryPost",
        "summary": "Update a category",
        "description": "Query this endpoint to update a specific category record.\n\nThe response you receive can be controlled and filtered using the URL query parameters below.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathParameterId"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "HTML description of the term.",
                    "type": "string"
                  },
                  "name": {
                    "description": "HTML title for the term.",
                    "type": "string"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the term unique to its type.",
                    "type": "string"
                  },
                  "parent": {
                    "description": "The parent term ID.",
                    "type": "integer"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Categories"
        ],
        "operationId": "categoryPut",
        "summary": "Update a category",
        "description": "Query this endpoint to update a specific category record.\n\nThe response you receive can be controlled and filtered using the URL query parameters below.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathParameterId"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "HTML description of the term.",
                    "type": "string"
                  },
                  "name": {
                    "description": "HTML title for the term.",
                    "type": "string"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the term unique to its type.",
                    "type": "string"
                  },
                  "parent": {
                    "description": "The parent term ID.",
                    "type": "integer"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Categories"
        ],
        "operationId": "categoryPatch",
        "summary": "Patch a category",
        "description": "Query this endpoint to patch a specific category record.\n\nThe response you receive can be controlled and filtered using the URL query parameters below.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathParameterId"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "HTML description of the term.",
                    "type": "string"
                  },
                  "name": {
                    "description": "HTML title for the term.",
                    "type": "string"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the term unique to its type.",
                    "type": "string"
                  },
                  "parent": {
                    "description": "The parent term ID.",
                    "type": "integer"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Categories"
        ],
        "operationId": "categoryDelete",
        "summary": "Delete a category",
        "description": "Query this endpoint to delete a specific category record.\n\nThe response you receive can be controlled and filtered using the URL query parameters below.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathParameterId"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Required to be true, as terms do not support trashing.",
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/comments": {
      "get": {
        "tags": [
          "comments"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPage"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPerPage"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {}
          },
          {
            "name": "after",
            "in": "query",
            "description": "Limit response to comments published after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "format": "date-time"
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "Limit result set to comments assigned to specific user IDs. Requires authorization.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "author_exclude",
            "in": "query",
            "description": "Ensure result set excludes comments assigned to specific user IDs. Requires authorization.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "author_email",
            "in": "query",
            "description": "Limit result set to that from a specific author email. Requires authorization.",
            "required": false,
            "schema": {
              "format": "email"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Limit response to comments published before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "format": "date-time"
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterOrder"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by comment attribute.",
            "required": false,
            "schema": {
              "default": "date_gmt",
              "enum": [
                "date",
                "date_gmt",
                "id",
                "include",
                "post",
                "parent",
                "type"
              ]
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "Limit result set to comments of specific parent IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "parent_exclude",
            "in": "query",
            "description": "Ensure result set excludes specific parent IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "post",
            "in": "query",
            "description": "Limit result set to comments assigned to specific post IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Limit result set to comments assigned a specific status. Requires authorization.",
            "required": false,
            "schema": {
              "default": "approve"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Limit result set to comments assigned a specific type. Requires authorization.",
            "required": false,
            "schema": {
              "default": "comment"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for the post if it is password protected.",
            "required": false,
            "schema": {}
          }
        ]
      },
      "post": {
        "tags": [
          "comments"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "author": {
                    "description": "The ID of the user object, if author was a user.",
                    "type": "integer"
                  },
                  "author_email": {
                    "description": "Email address for the comment author.",
                    "type": "string",
                    "format": "email"
                  },
                  "author_ip": {
                    "description": "IP address for the comment author.",
                    "type": "string",
                    "format": "ip"
                  },
                  "author_name": {
                    "description": "Display name for the comment author.",
                    "type": "string"
                  },
                  "author_url": {
                    "description": "URL for the comment author.",
                    "type": "string",
                    "format": "uri"
                  },
                  "author_user_agent": {
                    "description": "User agent for the comment author.",
                    "type": "string"
                  },
                  "content": {
                    "description": "The content for the comment.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Content for the comment, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML content for the comment, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "date": {
                    "description": "The date the comment was published, in the site's timezone.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "date_gmt": {
                    "description": "The date the comment was published, as GMT.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "parent": {
                    "description": "The ID for the parent of the comment.",
                    "default": 0,
                    "type": "integer"
                  },
                  "post": {
                    "description": "The ID of the associated post object.",
                    "default": 0,
                    "type": "integer"
                  },
                  "status": {
                    "description": "State of the comment.",
                    "type": "string"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/comments/{id}": {
      "get": {
        "tags": [
          "comments"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the comment.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for the parent post of the comment (if the post is password protected).",
            "required": false,
            "schema": {}
          }
        ]
      },
      "post": {
        "tags": [
          "comments"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the comment.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "author": {
                    "description": "The ID of the user object, if author was a user.",
                    "type": "integer"
                  },
                  "author_email": {
                    "description": "Email address for the comment author.",
                    "type": "string",
                    "format": "email"
                  },
                  "author_ip": {
                    "description": "IP address for the comment author.",
                    "type": "string",
                    "format": "ip"
                  },
                  "author_name": {
                    "description": "Display name for the comment author.",
                    "type": "string"
                  },
                  "author_url": {
                    "description": "URL for the comment author.",
                    "type": "string",
                    "format": "uri"
                  },
                  "author_user_agent": {
                    "description": "User agent for the comment author.",
                    "type": "string"
                  },
                  "content": {
                    "description": "The content for the comment.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Content for the comment, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML content for the comment, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "date": {
                    "description": "The date the comment was published, in the site's timezone.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "date_gmt": {
                    "description": "The date the comment was published, as GMT.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "parent": {
                    "description": "The ID for the parent of the comment.",
                    "type": "integer"
                  },
                  "post": {
                    "description": "The ID of the associated post object.",
                    "type": "integer"
                  },
                  "status": {
                    "description": "State of the comment.",
                    "type": "string"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "comments"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the comment.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "author": {
                    "description": "The ID of the user object, if author was a user.",
                    "type": "integer"
                  },
                  "author_email": {
                    "description": "Email address for the comment author.",
                    "type": "string",
                    "format": "email"
                  },
                  "author_ip": {
                    "description": "IP address for the comment author.",
                    "type": "string",
                    "format": "ip"
                  },
                  "author_name": {
                    "description": "Display name for the comment author.",
                    "type": "string"
                  },
                  "author_url": {
                    "description": "URL for the comment author.",
                    "type": "string",
                    "format": "uri"
                  },
                  "author_user_agent": {
                    "description": "User agent for the comment author.",
                    "type": "string"
                  },
                  "content": {
                    "description": "The content for the comment.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Content for the comment, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML content for the comment, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "date": {
                    "description": "The date the comment was published, in the site's timezone.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "date_gmt": {
                    "description": "The date the comment was published, as GMT.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "parent": {
                    "description": "The ID for the parent of the comment.",
                    "type": "integer"
                  },
                  "post": {
                    "description": "The ID of the associated post object.",
                    "type": "integer"
                  },
                  "status": {
                    "description": "State of the comment.",
                    "type": "string"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "comments"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the comment.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "author": {
                    "description": "The ID of the user object, if author was a user.",
                    "type": "integer"
                  },
                  "author_email": {
                    "description": "Email address for the comment author.",
                    "type": "string",
                    "format": "email"
                  },
                  "author_ip": {
                    "description": "IP address for the comment author.",
                    "type": "string",
                    "format": "ip"
                  },
                  "author_name": {
                    "description": "Display name for the comment author.",
                    "type": "string"
                  },
                  "author_url": {
                    "description": "URL for the comment author.",
                    "type": "string",
                    "format": "uri"
                  },
                  "author_user_agent": {
                    "description": "User agent for the comment author.",
                    "type": "string"
                  },
                  "content": {
                    "description": "The content for the comment.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Content for the comment, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML content for the comment, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "date": {
                    "description": "The date the comment was published, in the site's timezone.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "date_gmt": {
                    "description": "The date the comment was published, as GMT.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "parent": {
                    "description": "The ID for the parent of the comment.",
                    "type": "integer"
                  },
                  "post": {
                    "description": "The ID of the associated post object.",
                    "type": "integer"
                  },
                  "status": {
                    "description": "State of the comment.",
                    "type": "string"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "comments"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the comment.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Whether to bypass Trash and force deletion.",
                    "default": false,
                    "type": "boolean"
                  },
                  "password": {
                    "description": "The password for the parent post of the comment (if the post is password protected).",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/font-collections": {
      "get": {
        "tags": [
          "font collections"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FontCollectionResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPage"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPerPage"
          }
        ]
      }
    },
    "/wp/v2/font-collections/{slug}": {
      "get": {
        "tags": [
          "font collections"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FontCollectionResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "name": "slug",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ]
      }
    },
    "/wp/v2/font-families": {
      "get": {
        "tags": [
          "font families"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpFontFamilyResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPage"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPerPage"
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "search_semantics",
            "in": "query",
            "description": "How to interpret the search input.",
            "required": false,
            "schema": {
              "enum": [
                "exact"
              ]
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterOrder"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by post attribute.",
            "required": false,
            "schema": {
              "default": "id",
              "enum": [
                "id",
                "include"
              ]
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to posts with one or more specific slugs.",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              }
            }
          }
        ]
      },
      "post": {
        "tags": [
          "font families"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpFontFamilyResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "theme_json_version": {
                    "description": "Version of the theme.json schema used for the typography settings.",
                    "default": 3,
                    "type": "integer",
                    "maximum": 3,
                    "minimum": 2
                  },
                  "font_family_settings": {
                    "description": "font-family declaration in theme.json format, encoded as a string.",
                    "type": "string"
                  }
                },
                "required": [
                  "font_family_settings"
                ]
              }
            }
          }
        }
      }
    },
    "/wp/v2/font-families/{id}": {
      "get": {
        "tags": [
          "font families"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpFontFamilyResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ]
      },
      "post": {
        "tags": [
          "font families"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpFontFamilyResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "theme_json_version": {
                    "description": "Version of the theme.json schema used for the typography settings.",
                    "default": 3,
                    "type": "integer",
                    "maximum": 3,
                    "minimum": 2
                  },
                  "font_family_settings": {
                    "description": "font-family declaration in theme.json format, encoded as a string.",
                    "type": "string"
                  }
                },
                "required": [
                  "font_family_settings"
                ]
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "font families"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpFontFamilyResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "theme_json_version": {
                    "description": "Version of the theme.json schema used for the typography settings.",
                    "default": 3,
                    "type": "integer",
                    "maximum": 3,
                    "minimum": 2
                  },
                  "font_family_settings": {
                    "description": "font-family declaration in theme.json format, encoded as a string.",
                    "type": "string"
                  }
                },
                "required": [
                  "font_family_settings"
                ]
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "font families"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpFontFamilyResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "theme_json_version": {
                    "description": "Version of the theme.json schema used for the typography settings.",
                    "default": 3,
                    "type": "integer",
                    "maximum": 3,
                    "minimum": 2
                  },
                  "font_family_settings": {
                    "description": "font-family declaration in theme.json format, encoded as a string.",
                    "type": "string"
                  }
                },
                "required": [
                  "font_family_settings"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "font families"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpFontFamilyResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Whether to bypass Trash and force deletion.",
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/font-families/{font_family_id}/font-faces": {
      "get": {
        "tags": [
          "font families"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpFontFaceResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "font_family_id",
            "in": "path",
            "description": "The ID for the parent font family of the font face.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPage"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPerPage"
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "search_semantics",
            "in": "query",
            "description": "How to interpret the search input.",
            "required": false,
            "schema": {
              "enum": [
                "exact"
              ]
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterOrder"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by post attribute.",
            "required": false,
            "schema": {
              "default": "id",
              "enum": [
                "id",
                "include"
              ]
            }
          }
        ]
      },
      "post": {
        "tags": [
          "font families"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpFontFaceResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "font_family_id",
            "in": "path",
            "description": "The ID for the parent font family of the font face.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "theme_json_version": {
                    "description": "Version of the theme.json schema used for the typography settings.",
                    "default": 3,
                    "type": "integer",
                    "maximum": 3,
                    "minimum": 2
                  },
                  "font_face_settings": {
                    "description": "font-face declaration in theme.json format, encoded as a string.",
                    "type": "string"
                  }
                },
                "required": [
                  "font_face_settings"
                ]
              }
            }
          }
        }
      }
    },
    "/wp/v2/font-families/{font_family_id}/font-faces/{id}": {
      "get": {
        "tags": [
          "font families"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpFontFaceResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "font_family_id",
            "in": "path",
            "description": "The ID for the parent font family of the font face.",
            "required": true,
            "schema": {}
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the font face.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ]
      },
      "delete": {
        "tags": [
          "font families"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpFontFaceResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "font_family_id",
            "in": "path",
            "description": "The ID for the parent font family of the font face.",
            "required": true,
            "schema": {}
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the font face.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Whether to bypass Trash and force deletion.",
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/global-styles/{parent}/revisions": {
      "get": {
        "tags": [
          "global styles"
        ],
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPage"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPerPage"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPGlobalStylesRevisionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/global-styles/{parent}/revisions/{id}": {
      "get": {
        "tags": [
          "global styles"
        ],
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the global styles revision.",
            "required": true,
            "schema": {}
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the global styles revision.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPGlobalStylesRevisionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/global-styles/themes/{stylesheet}/variations": {
      "get": {
        "tags": [
          "global styles"
        ],
        "parameters": [
          {
            "name": "stylesheet",
            "in": "path",
            "description": "The theme identifier",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/wp/v2/global-styles/themes/{stylesheet}": {
      "get": {
        "tags": [
          "global styles"
        ],
        "parameters": [
          {
            "name": "stylesheet",
            "in": "path",
            "description": "The theme identifier",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/wp/v2/global-styles/{id}": {
      "get": {
        "tags": [
          "global styles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPGlobalStylesResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "global styles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "styles": {
                    "description": "Global styles.",
                    "type": [
                      "object"
                    ]
                  },
                  "settings": {
                    "description": "Global settings.",
                    "type": [
                      "object"
                    ]
                  },
                  "title": {
                    "description": "Title of the global styles variation.",
                    "type": [
                      "object",
                      "string"
                    ],
                    "properties": {
                      "raw": {
                        "description": "Title for the global styles variation, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPGlobalStylesResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "global styles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "styles": {
                    "description": "Global styles.",
                    "type": [
                      "object"
                    ]
                  },
                  "settings": {
                    "description": "Global settings.",
                    "type": [
                      "object"
                    ]
                  },
                  "title": {
                    "description": "Title of the global styles variation.",
                    "type": [
                      "object",
                      "string"
                    ],
                    "properties": {
                      "raw": {
                        "description": "Title for the global styles variation, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPGlobalStylesResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "global styles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "styles": {
                    "description": "Global styles.",
                    "type": [
                      "object"
                    ]
                  },
                  "settings": {
                    "description": "Global settings.",
                    "type": [
                      "object"
                    ]
                  },
                  "title": {
                    "description": "Title of the global styles variation.",
                    "type": [
                      "object",
                      "string"
                    ],
                    "properties": {
                      "raw": {
                        "description": "Title for the global styles variation, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPGlobalStylesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/media": {
      "get": {
        "tags": [
          "media"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPage"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPerPage"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {}
          },
          {
            "name": "after",
            "in": "query",
            "description": "Limit response to posts published after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "format": "date-time"
            }
          },
          {
            "name": "modified_after",
            "in": "query",
            "description": "Limit response to posts modified after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "format": "date-time"
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "Limit result set to posts assigned to specific authors.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "author_exclude",
            "in": "query",
            "description": "Ensure result set excludes posts assigned to specific authors.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Limit response to posts published before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "format": "date-time"
            }
          },
          {
            "name": "modified_before",
            "in": "query",
            "description": "Limit response to posts modified before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "format": "date-time"
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "search_semantics",
            "in": "query",
            "description": "How to interpret the search input.",
            "required": false,
            "schema": {
              "enum": [
                "exact"
              ]
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterOrder"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by post attribute.",
            "required": false,
            "schema": {
              "default": "date",
              "enum": [
                "author",
                "date",
                "id",
                "include",
                "modified",
                "parent",
                "relevance",
                "slug",
                "include_slugs",
                "title"
              ]
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "Limit result set to items with particular parent IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "parent_exclude",
            "in": "query",
            "description": "Limit result set to all items except those of a particular parent ID.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "search_columns",
            "in": "query",
            "description": "Array of column names to be searched.",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "post_title",
                  "post_content",
                  "post_excerpt"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to posts with one or more specific slugs.",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Limit result set to posts assigned one or more statuses.",
            "required": false,
            "schema": {
              "default": "inherit",
              "items": {
                "enum": [
                  "inherit",
                  "private",
                  "trash"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "media_type",
            "in": "query",
            "description": "Limit result set to attachments of a particular media type.",
            "required": false,
            "schema": {
              "enum": [
                "image",
                "video",
                "text",
                "application",
                "audio"
              ]
            }
          },
          {
            "name": "mime_type",
            "in": "query",
            "description": "Limit result set to attachments of a particular MIME type.",
            "required": false,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "media"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "description": "The date the post was published, in the site's timezone.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "date_gmt": {
                    "description": "The date the post was published, as GMT.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the post unique to its type.",
                    "type": "string"
                  },
                  "status": {
                    "description": "A named status for the post.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "title": {
                    "description": "The title for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Title for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "author": {
                    "description": "The ID for the author of the post.",
                    "type": "integer"
                  },
                  "featured_media": {
                    "description": "The ID of the featured media for the post.",
                    "type": "integer"
                  },
                  "comment_status": {
                    "description": "Whether or not comments are open on the post.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "ping_status": {
                    "description": "Whether or not the post can be pinged.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object"
                  },
                  "template": {
                    "description": "The theme file to use to display the post.",
                    "type": "string"
                  },
                  "alt_text": {
                    "description": "Alternative text to display when attachment is not displayed.",
                    "type": "string"
                  },
                  "caption": {
                    "description": "The attachment caption.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Caption for the attachment, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML caption for the attachment, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "description": {
                    "description": "The attachment description.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Description for the attachment, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML description for the attachment, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "post": {
                    "description": "The ID for the associated post of the attachment.",
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/media/{id}": {
      "get": {
        "tags": [
          "media"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ]
      },
      "post": {
        "tags": [
          "media"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "description": "The date the post was published, in the site's timezone.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "date_gmt": {
                    "description": "The date the post was published, as GMT.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the post unique to its type.",
                    "type": "string"
                  },
                  "status": {
                    "description": "A named status for the post.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "title": {
                    "description": "The title for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Title for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "author": {
                    "description": "The ID for the author of the post.",
                    "type": "integer"
                  },
                  "featured_media": {
                    "description": "The ID of the featured media for the post.",
                    "type": "integer"
                  },
                  "comment_status": {
                    "description": "Whether or not comments are open on the post.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "ping_status": {
                    "description": "Whether or not the post can be pinged.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object"
                  },
                  "template": {
                    "description": "The theme file to use to display the post.",
                    "type": "string"
                  },
                  "alt_text": {
                    "description": "Alternative text to display when attachment is not displayed.",
                    "type": "string"
                  },
                  "caption": {
                    "description": "The attachment caption.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Caption for the attachment, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML caption for the attachment, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "description": {
                    "description": "The attachment description.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Description for the attachment, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML description for the attachment, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "post": {
                    "description": "The ID for the associated post of the attachment.",
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "media"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "description": "The date the post was published, in the site's timezone.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "date_gmt": {
                    "description": "The date the post was published, as GMT.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the post unique to its type.",
                    "type": "string"
                  },
                  "status": {
                    "description": "A named status for the post.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "title": {
                    "description": "The title for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Title for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "author": {
                    "description": "The ID for the author of the post.",
                    "type": "integer"
                  },
                  "featured_media": {
                    "description": "The ID of the featured media for the post.",
                    "type": "integer"
                  },
                  "comment_status": {
                    "description": "Whether or not comments are open on the post.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "ping_status": {
                    "description": "Whether or not the post can be pinged.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object"
                  },
                  "template": {
                    "description": "The theme file to use to display the post.",
                    "type": "string"
                  },
                  "alt_text": {
                    "description": "Alternative text to display when attachment is not displayed.",
                    "type": "string"
                  },
                  "caption": {
                    "description": "The attachment caption.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Caption for the attachment, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML caption for the attachment, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "description": {
                    "description": "The attachment description.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Description for the attachment, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML description for the attachment, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "post": {
                    "description": "The ID for the associated post of the attachment.",
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "media"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "description": "The date the post was published, in the site's timezone.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "date_gmt": {
                    "description": "The date the post was published, as GMT.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the post unique to its type.",
                    "type": "string"
                  },
                  "status": {
                    "description": "A named status for the post.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "title": {
                    "description": "The title for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Title for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "author": {
                    "description": "The ID for the author of the post.",
                    "type": "integer"
                  },
                  "featured_media": {
                    "description": "The ID of the featured media for the post.",
                    "type": "integer"
                  },
                  "comment_status": {
                    "description": "Whether or not comments are open on the post.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "ping_status": {
                    "description": "Whether or not the post can be pinged.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object"
                  },
                  "template": {
                    "description": "The theme file to use to display the post.",
                    "type": "string"
                  },
                  "alt_text": {
                    "description": "Alternative text to display when attachment is not displayed.",
                    "type": "string"
                  },
                  "caption": {
                    "description": "The attachment caption.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Caption for the attachment, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML caption for the attachment, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "description": {
                    "description": "The attachment description.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Description for the attachment, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML description for the attachment, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "post": {
                    "description": "The ID for the associated post of the attachment.",
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "media"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Whether to bypass Trash and force deletion.",
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/media/{id}/post-process": {
      "post": {
        "tags": [
          "media"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the attachment.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "action": {
                    "type": "string",
                    "enum": [
                      "create-image-subsizes"
                    ]
                  }
                },
                "required": [
                  "action"
                ]
              }
            }
          }
        }
      }
    },
    "/wp/v2/media/{id}/edit": {
      "post": {
        "tags": [
          "media"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "src": {
                    "description": "URL to the edited image file.",
                    "type": "string",
                    "format": "uri"
                  },
                  "modifiers": {
                    "description": "Array of image edits.",
                    "type": "array",
                    "items": {
                      "description": "Image edit.",
                      "type": "object",
                      "required": [
                        "type",
                        "args"
                      ],
                      "oneOf": [
                        {
                          "title": "Rotation",
                          "properties": {
                            "type": {
                              "description": "Rotation type.",
                              "type": "string",
                              "enum": [
                                "rotate"
                              ]
                            },
                            "args": {
                              "description": "Rotation arguments.",
                              "type": "object",
                              "required": [
                                "angle"
                              ],
                              "properties": {
                                "angle": {
                                  "description": "Angle to rotate clockwise in degrees.",
                                  "type": "number"
                                }
                              }
                            }
                          }
                        },
                        {
                          "title": "Crop",
                          "properties": {
                            "type": {
                              "description": "Crop type.",
                              "type": "string",
                              "enum": [
                                "crop"
                              ]
                            },
                            "args": {
                              "description": "Crop arguments.",
                              "type": "object",
                              "required": [
                                "left",
                                "top",
                                "width",
                                "height"
                              ],
                              "properties": {
                                "left": {
                                  "description": "Horizontal position from the left to begin the crop as a percentage of the image width.",
                                  "type": "number"
                                },
                                "top": {
                                  "description": "Vertical position from the top to begin the crop as a percentage of the image height.",
                                  "type": "number"
                                },
                                "width": {
                                  "description": "Width of the crop as a percentage of the image width.",
                                  "type": "number"
                                },
                                "height": {
                                  "description": "Height of the crop as a percentage of the image height.",
                                  "type": "number"
                                }
                              }
                            }
                          }
                        }
                      ]
                    },
                    "minItems": 1
                  },
                  "rotation": {
                    "description": "The amount to rotate the image clockwise in degrees. DEPRECATED: Use `modifiers` instead.",
                    "type": "integer",
                    "maximum": 360,
                    "minimum": 0
                  },
                  "x": {
                    "description": "As a percentage of the image, the x position to start the crop from. DEPRECATED: Use `modifiers` instead.",
                    "type": "number",
                    "maximum": 100,
                    "minimum": 0
                  },
                  "y": {
                    "description": "As a percentage of the image, the y position to start the crop from. DEPRECATED: Use `modifiers` instead.",
                    "type": "number",
                    "maximum": 100,
                    "minimum": 0
                  },
                  "width": {
                    "description": "As a percentage of the image, the width to crop the image to. DEPRECATED: Use `modifiers` instead.",
                    "type": "number",
                    "maximum": 100,
                    "minimum": 0
                  },
                  "height": {
                    "description": "As a percentage of the image, the height to crop the image to. DEPRECATED: Use `modifiers` instead.",
                    "type": "number",
                    "maximum": 100,
                    "minimum": 0
                  }
                },
                "required": [
                  "src"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/wp/v2/menu-items": {
      "get": {
        "tags": [
          "menu-items"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NavMenuItemResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPage"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPerPage",
            "schema": {
              "default": 100
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {}
          },
          {
            "name": "after",
            "in": "query",
            "description": "Limit response to posts published after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "format": "date-time"
            }
          },
          {
            "name": "modified_after",
            "in": "query",
            "description": "Limit response to posts modified after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "format": "date-time"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Limit response to posts published before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "format": "date-time"
            }
          },
          {
            "name": "modified_before",
            "in": "query",
            "description": "Limit response to posts modified before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "format": "date-time"
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "search_semantics",
            "in": "query",
            "description": "How to interpret the search input.",
            "required": false,
            "schema": {
              "enum": [
                "exact"
              ]
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterOrder",
            "schema": {
              "default": "asc"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by object attribute.",
            "required": false,
            "schema": {
              "default": "menu_order",
              "enum": [
                "author",
                "date",
                "id",
                "include",
                "modified",
                "parent",
                "relevance",
                "slug",
                "include_slugs",
                "title",
                "menu_order"
              ]
            }
          },
          {
            "name": "search_columns",
            "in": "query",
            "description": "Array of column names to be searched.",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "post_title",
                  "post_content",
                  "post_excerpt"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to posts with one or more specific slugs.",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Limit result set to posts assigned one or more statuses.",
            "required": false,
            "schema": {
              "default": "publish",
              "items": {
                "enum": [
                  "publish",
                  "future",
                  "draft",
                  "pending",
                  "private",
                  "trash",
                  "auto-draft",
                  "inherit",
                  "request-pending",
                  "request-confirmed",
                  "request-failed",
                  "request-completed",
                  "any"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "tax_relation",
            "in": "query",
            "description": "Limit result set based on relationship between multiple taxonomies.",
            "required": false,
            "schema": {
              "enum": [
                "AND",
                "OR"
              ]
            }
          },
          {
            "name": "menus",
            "in": "query",
            "description": "Limit result set to items with specific terms assigned in the menus taxonomy.",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "title": "Term ID List",
                  "description": "Match terms with the listed IDs.",
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                },
                {
                  "title": "Term ID Taxonomy Query",
                  "description": "Perform an advanced term query.",
                  "type": "object",
                  "properties": {
                    "terms": {
                      "description": "Term IDs.",
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "default": []
                    },
                    "operator": {
                      "description": "Whether items must be assigned all or any of the specified terms.",
                      "type": "string",
                      "enum": [
                        "AND",
                        "OR"
                      ],
                      "default": "OR"
                    }
                  },
                  "unevaluatedProperties": false
                }
              ]
            }
          },
          {
            "name": "menus_exclude",
            "in": "query",
            "description": "Limit result set to items except those with specific terms assigned in the menus taxonomy.",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "title": "Term ID List",
                  "description": "Match terms with the listed IDs.",
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                },
                {
                  "title": "Term ID Taxonomy Query",
                  "description": "Perform an advanced term query.",
                  "type": "object",
                  "properties": {
                    "terms": {
                      "description": "Term IDs.",
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "default": []
                    }
                  },
                  "unevaluatedProperties": false
                }
              ]
            }
          },
          {
            "name": "menu_order",
            "in": "query",
            "description": "Limit result set to posts with a specific menu_order value.",
            "required": false,
            "schema": {}
          }
        ]
      },
      "post": {
        "tags": [
          "menu-items"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NavMenuItemResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "description": "The title for the object.",
                    "type": [
                      "string",
                      "object"
                    ],
                    "properties": {
                      "raw": {
                        "description": "Title for the object, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the object, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "type": {
                    "description": "The family of objects originally represented, such as \"post_type\" or \"taxonomy\".",
                    "default": "custom",
                    "type": "string",
                    "enum": [
                      "taxonomy",
                      "post_type",
                      "post_type_archive",
                      "custom"
                    ]
                  },
                  "status": {
                    "description": "A named status for the object.",
                    "default": "publish",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "parent": {
                    "description": "The ID for the parent of the object.",
                    "default": 0,
                    "type": "integer",
                    "minimum": 0
                  },
                  "attr_title": {
                    "description": "Text for the title attribute of the link element for this menu item.",
                    "type": "string"
                  },
                  "classes": {
                    "description": "Class names for the link element of this menu item.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "description": {
                    "description": "The description of this menu item.",
                    "type": "string"
                  },
                  "menu_order": {
                    "description": "The DB ID of the nav_menu_item that is this item's menu parent, if any, otherwise 0.",
                    "default": 1,
                    "type": "integer",
                    "minimum": 1
                  },
                  "object": {
                    "description": "The type of object originally represented, such as \"category\", \"post\", or \"attachment\".",
                    "type": "string"
                  },
                  "object_id": {
                    "description": "The database ID of the original object this menu item represents, for example the ID for posts or the term_id for categories.",
                    "default": 0,
                    "type": "integer",
                    "minimum": 0
                  },
                  "target": {
                    "description": "The target attribute of the link element for this menu item.",
                    "type": "string",
                    "enum": [
                      "_blank",
                      ""
                    ]
                  },
                  "url": {
                    "description": "The URL to which this menu item points.",
                    "type": "string",
                    "format": "uri"
                  },
                  "xfn": {
                    "description": "The XFN relationship expressed in the link of this menu item.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "menus": {
                    "description": "The terms assigned to the object in the nav_menu taxonomy.",
                    "type": "integer"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/menu-items/{id}": {
      "get": {
        "tags": [
          "menu-items"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NavMenuItemResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ]
      },
      "post": {
        "tags": [
          "menu-items"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NavMenuItemResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "description": "The title for the object.",
                    "type": [
                      "string",
                      "object"
                    ],
                    "properties": {
                      "raw": {
                        "description": "Title for the object, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the object, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "type": {
                    "description": "The family of objects originally represented, such as \"post_type\" or \"taxonomy\".",
                    "type": "string",
                    "enum": [
                      "taxonomy",
                      "post_type",
                      "post_type_archive",
                      "custom"
                    ]
                  },
                  "status": {
                    "description": "A named status for the object.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "parent": {
                    "description": "The ID for the parent of the object.",
                    "type": "integer",
                    "minimum": 0
                  },
                  "attr_title": {
                    "description": "Text for the title attribute of the link element for this menu item.",
                    "type": "string"
                  },
                  "classes": {
                    "description": "Class names for the link element of this menu item.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "description": {
                    "description": "The description of this menu item.",
                    "type": "string"
                  },
                  "menu_order": {
                    "description": "The DB ID of the nav_menu_item that is this item's menu parent, if any, otherwise 0.",
                    "type": "integer",
                    "minimum": 1
                  },
                  "object": {
                    "description": "The type of object originally represented, such as \"category\", \"post\", or \"attachment\".",
                    "type": "string"
                  },
                  "object_id": {
                    "description": "The database ID of the original object this menu item represents, for example the ID for posts or the term_id for categories.",
                    "type": "integer",
                    "minimum": 0
                  },
                  "target": {
                    "description": "The target attribute of the link element for this menu item.",
                    "type": "string",
                    "enum": [
                      "_blank",
                      ""
                    ]
                  },
                  "url": {
                    "description": "The URL to which this menu item points.",
                    "type": "string",
                    "format": "uri"
                  },
                  "xfn": {
                    "description": "The XFN relationship expressed in the link of this menu item.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "menus": {
                    "description": "The terms assigned to the object in the nav_menu taxonomy.",
                    "type": "integer"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "menu-items"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NavMenuItemResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "description": "The title for the object.",
                    "type": [
                      "string",
                      "object"
                    ],
                    "properties": {
                      "raw": {
                        "description": "Title for the object, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the object, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "type": {
                    "description": "The family of objects originally represented, such as \"post_type\" or \"taxonomy\".",
                    "type": "string",
                    "enum": [
                      "taxonomy",
                      "post_type",
                      "post_type_archive",
                      "custom"
                    ]
                  },
                  "status": {
                    "description": "A named status for the object.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "parent": {
                    "description": "The ID for the parent of the object.",
                    "type": "integer",
                    "minimum": 0
                  },
                  "attr_title": {
                    "description": "Text for the title attribute of the link element for this menu item.",
                    "type": "string"
                  },
                  "classes": {
                    "description": "Class names for the link element of this menu item.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "description": {
                    "description": "The description of this menu item.",
                    "type": "string"
                  },
                  "menu_order": {
                    "description": "The DB ID of the nav_menu_item that is this item's menu parent, if any, otherwise 0.",
                    "type": "integer",
                    "minimum": 1
                  },
                  "object": {
                    "description": "The type of object originally represented, such as \"category\", \"post\", or \"attachment\".",
                    "type": "string"
                  },
                  "object_id": {
                    "description": "The database ID of the original object this menu item represents, for example the ID for posts or the term_id for categories.",
                    "type": "integer",
                    "minimum": 0
                  },
                  "target": {
                    "description": "The target attribute of the link element for this menu item.",
                    "type": "string",
                    "enum": [
                      "_blank",
                      ""
                    ]
                  },
                  "url": {
                    "description": "The URL to which this menu item points.",
                    "type": "string",
                    "format": "uri"
                  },
                  "xfn": {
                    "description": "The XFN relationship expressed in the link of this menu item.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "menus": {
                    "description": "The terms assigned to the object in the nav_menu taxonomy.",
                    "type": "integer"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "menu-items"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NavMenuItemResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "description": "The title for the object.",
                    "type": [
                      "string",
                      "object"
                    ],
                    "properties": {
                      "raw": {
                        "description": "Title for the object, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the object, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "type": {
                    "description": "The family of objects originally represented, such as \"post_type\" or \"taxonomy\".",
                    "type": "string",
                    "enum": [
                      "taxonomy",
                      "post_type",
                      "post_type_archive",
                      "custom"
                    ]
                  },
                  "status": {
                    "description": "A named status for the object.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "parent": {
                    "description": "The ID for the parent of the object.",
                    "type": "integer",
                    "minimum": 0
                  },
                  "attr_title": {
                    "description": "Text for the title attribute of the link element for this menu item.",
                    "type": "string"
                  },
                  "classes": {
                    "description": "Class names for the link element of this menu item.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "description": {
                    "description": "The description of this menu item.",
                    "type": "string"
                  },
                  "menu_order": {
                    "description": "The DB ID of the nav_menu_item that is this item's menu parent, if any, otherwise 0.",
                    "type": "integer",
                    "minimum": 1
                  },
                  "object": {
                    "description": "The type of object originally represented, such as \"category\", \"post\", or \"attachment\".",
                    "type": "string"
                  },
                  "object_id": {
                    "description": "The database ID of the original object this menu item represents, for example the ID for posts or the term_id for categories.",
                    "type": "integer",
                    "minimum": 0
                  },
                  "target": {
                    "description": "The target attribute of the link element for this menu item.",
                    "type": "string",
                    "enum": [
                      "_blank",
                      ""
                    ]
                  },
                  "url": {
                    "description": "The URL to which this menu item points.",
                    "type": "string",
                    "format": "uri"
                  },
                  "xfn": {
                    "description": "The XFN relationship expressed in the link of this menu item.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "menus": {
                    "description": "The terms assigned to the object in the nav_menu taxonomy.",
                    "type": "integer"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "menu-items"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NavMenuItemResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Whether to bypass Trash and force deletion.",
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/menu-items/{id}/autosaves": {
      "get": {
        "tags": [
          "menu-items"
        ],
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the autosave.",
            "required": false,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NavMenuItemRevisionResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "menu-items"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "parent": {
                    "description": "The ID for the parent of the object.",
                    "type": "integer",
                    "minimum": 0
                  },
                  "title": {
                    "description": "The title for the object.",
                    "type": [
                      "string",
                      "object"
                    ],
                    "properties": {
                      "raw": {
                        "description": "Title for the object, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the object, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "type": {
                    "description": "The family of objects originally represented, such as \"post_type\" or \"taxonomy\".",
                    "type": "string",
                    "enum": [
                      "taxonomy",
                      "post_type",
                      "post_type_archive",
                      "custom"
                    ]
                  },
                  "status": {
                    "description": "A named status for the object.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "attr_title": {
                    "description": "Text for the title attribute of the link element for this menu item.",
                    "type": "string"
                  },
                  "classes": {
                    "description": "Class names for the link element of this menu item.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "description": {
                    "description": "The description of this menu item.",
                    "type": "string"
                  },
                  "menu_order": {
                    "description": "The DB ID of the nav_menu_item that is this item's menu parent, if any, otherwise 0.",
                    "type": "integer",
                    "minimum": 1
                  },
                  "object": {
                    "description": "The type of object originally represented, such as \"category\", \"post\", or \"attachment\".",
                    "type": "string"
                  },
                  "object_id": {
                    "description": "The database ID of the original object this menu item represents, for example the ID for posts or the term_id for categories.",
                    "type": "integer",
                    "minimum": 0
                  },
                  "target": {
                    "description": "The target attribute of the link element for this menu item.",
                    "type": "string",
                    "enum": [
                      "_blank",
                      ""
                    ]
                  },
                  "url": {
                    "description": "The URL to which this menu item points.",
                    "type": "string",
                    "format": "uri"
                  },
                  "xfn": {
                    "description": "The XFN relationship expressed in the link of this menu item.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "menus": {
                    "description": "The terms assigned to the object in the nav_menu taxonomy.",
                    "type": "integer"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NavMenuItemRevisionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/menu-items/{parent}/autosaves/{id}": {
      "get": {
        "tags": [
          "menu-items"
        ],
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the autosave.",
            "required": true,
            "schema": {}
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID for the autosave.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NavMenuItemRevisionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/menu-locations": {
      "get": {
        "tags": [
          "menu locations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuLocationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/menu-locations/{location}": {
      "get": {
        "tags": [
          "menu locations"
        ],
        "parameters": [
          {
            "name": "location",
            "in": "path",
            "description": "An alphanumeric identifier for the menu location.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuLocationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/menus": {
      "get": {
        "tags": [
          "menus"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NavMenuResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPage"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPerPage"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {}
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterOrder",
            "schema": {
              "default": "asc"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by term attribute.",
            "required": false,
            "schema": {
              "default": "name",
              "enum": [
                "id",
                "include",
                "name",
                "slug",
                "include_slugs",
                "term_group",
                "description",
                "count"
              ]
            }
          },
          {
            "name": "hide_empty",
            "in": "query",
            "description": "Whether to hide terms not assigned to any posts.",
            "required": false,
            "schema": {}
          },
          {
            "name": "post",
            "in": "query",
            "description": "Limit result set to terms assigned to a specific post.",
            "required": false,
            "schema": {}
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to terms with one or more specific slugs.",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              }
            }
          }
        ]
      },
      "post": {
        "tags": [
          "menus"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NavMenuResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "HTML description of the term.",
                    "type": "string"
                  },
                  "name": {
                    "description": "HTML title for the term.",
                    "type": "string"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the term unique to its type.",
                    "type": "string"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object"
                  },
                  "locations": {
                    "description": "The locations assigned to the menu.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "auto_add": {
                    "description": "Whether to automatically add top level pages to this menu.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        }
      }
    },
    "/wp/v2/menus/{id}": {
      "get": {
        "tags": [
          "menus"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NavMenuResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/PathParameterId"
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ]
      },
      "post": {
        "tags": [
          "menus"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NavMenuResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/PathParameterId"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "HTML description of the term.",
                    "type": "string"
                  },
                  "name": {
                    "description": "HTML title for the term.",
                    "type": "string"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the term unique to its type.",
                    "type": "string"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object"
                  },
                  "locations": {
                    "description": "The locations assigned to the menu.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "auto_add": {
                    "description": "Whether to automatically add top level pages to this menu.",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "menus"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NavMenuResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/PathParameterId"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "HTML description of the term.",
                    "type": "string"
                  },
                  "name": {
                    "description": "HTML title for the term.",
                    "type": "string"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the term unique to its type.",
                    "type": "string"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object"
                  },
                  "locations": {
                    "description": "The locations assigned to the menu.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "auto_add": {
                    "description": "Whether to automatically add top level pages to this menu.",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "menus"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NavMenuResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/PathParameterId"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "HTML description of the term.",
                    "type": "string"
                  },
                  "name": {
                    "description": "HTML title for the term.",
                    "type": "string"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the term unique to its type.",
                    "type": "string"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object"
                  },
                  "locations": {
                    "description": "The locations assigned to the menu.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "auto_add": {
                    "description": "Whether to automatically add top level pages to this menu.",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "menus"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NavMenuResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/PathParameterId"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Required to be true, as terms do not support trashing.",
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/navigation": {
      "get": {
        "tags": [
          "navigation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPNavigationResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPage"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPerPage"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {}
          },
          {
            "name": "after",
            "in": "query",
            "description": "Limit response to posts published after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "format": "date-time"
            }
          },
          {
            "name": "modified_after",
            "in": "query",
            "description": "Limit response to posts modified after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "format": "date-time"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Limit response to posts published before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "format": "date-time"
            }
          },
          {
            "name": "modified_before",
            "in": "query",
            "description": "Limit response to posts modified before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "format": "date-time"
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "search_semantics",
            "in": "query",
            "description": "How to interpret the search input.",
            "required": false,
            "schema": {
              "enum": [
                "exact"
              ]
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterOrder"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by post attribute.",
            "required": false,
            "schema": {
              "default": "date",
              "enum": [
                "author",
                "date",
                "id",
                "include",
                "modified",
                "parent",
                "relevance",
                "slug",
                "include_slugs",
                "title"
              ]
            }
          },
          {
            "name": "search_columns",
            "in": "query",
            "description": "Array of column names to be searched.",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "post_title",
                  "post_content",
                  "post_excerpt"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to posts with one or more specific slugs.",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Limit result set to posts assigned one or more statuses.",
            "required": false,
            "schema": {
              "default": "publish",
              "items": {
                "enum": [
                  "publish",
                  "future",
                  "draft",
                  "pending",
                  "private",
                  "trash",
                  "auto-draft",
                  "inherit",
                  "request-pending",
                  "request-confirmed",
                  "request-failed",
                  "request-completed",
                  "any"
                ],
                "type": "string"
              }
            }
          }
        ]
      },
      "post": {
        "tags": [
          "navigation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPNavigationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "description": "The date the post was published, in the site's timezone.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "date_gmt": {
                    "description": "The date the post was published, as GMT.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the post unique to its type.",
                    "type": "string"
                  },
                  "status": {
                    "description": "A named status for the post.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "password": {
                    "description": "A password to protect access to the content and excerpt.",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Title for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit",
                          "embed"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "content": {
                    "description": "The content for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Content for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit",
                          "embed"
                        ]
                      },
                      "rendered": {
                        "description": "HTML content for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      },
                      "block_version": {
                        "description": "Version of the content block format used by the post.",
                        "type": "integer",
                        "x-context": [
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the content is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "template": {
                    "description": "The theme file to use to display the post.",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/navigation/{id}": {
      "get": {
        "tags": [
          "navigation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPNavigationResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for the post if it is password protected.",
            "required": false,
            "schema": {}
          }
        ]
      },
      "post": {
        "tags": [
          "navigation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPNavigationResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "description": "The date the post was published, in the site's timezone.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "date_gmt": {
                    "description": "The date the post was published, as GMT.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the post unique to its type.",
                    "type": "string"
                  },
                  "status": {
                    "description": "A named status for the post.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "password": {
                    "description": "A password to protect access to the content and excerpt.",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Title for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit",
                          "embed"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "content": {
                    "description": "The content for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Content for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit",
                          "embed"
                        ]
                      },
                      "rendered": {
                        "description": "HTML content for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      },
                      "block_version": {
                        "description": "Version of the content block format used by the post.",
                        "type": "integer",
                        "x-context": [
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the content is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "template": {
                    "description": "The theme file to use to display the post.",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "navigation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPNavigationResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "description": "The date the post was published, in the site's timezone.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "date_gmt": {
                    "description": "The date the post was published, as GMT.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the post unique to its type.",
                    "type": "string"
                  },
                  "status": {
                    "description": "A named status for the post.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "password": {
                    "description": "A password to protect access to the content and excerpt.",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Title for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit",
                          "embed"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "content": {
                    "description": "The content for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Content for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit",
                          "embed"
                        ]
                      },
                      "rendered": {
                        "description": "HTML content for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      },
                      "block_version": {
                        "description": "Version of the content block format used by the post.",
                        "type": "integer",
                        "x-context": [
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the content is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "template": {
                    "description": "The theme file to use to display the post.",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "navigation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPNavigationResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "description": "The date the post was published, in the site's timezone.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "date_gmt": {
                    "description": "The date the post was published, as GMT.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the post unique to its type.",
                    "type": "string"
                  },
                  "status": {
                    "description": "A named status for the post.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "password": {
                    "description": "A password to protect access to the content and excerpt.",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Title for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit",
                          "embed"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "content": {
                    "description": "The content for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Content for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit",
                          "embed"
                        ]
                      },
                      "rendered": {
                        "description": "HTML content for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      },
                      "block_version": {
                        "description": "Version of the content block format used by the post.",
                        "type": "integer",
                        "x-context": [
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the content is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "template": {
                    "description": "The theme file to use to display the post.",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "navigation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPNavigationResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Whether to bypass Trash and force deletion.",
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/navigation/{parent}/revisions": {
      "get": {
        "tags": [
          "navigation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPNavigationRevisionResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPage"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPerPage"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {}
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterOrder"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by object attribute.",
            "required": false,
            "schema": {
              "default": "date",
              "enum": [
                "date",
                "id",
                "include",
                "relevance",
                "slug",
                "include_slugs",
                "title"
              ]
            }
          }
        ]
      }
    },
    "/wp/v2/navigation/{parent}/revisions/{id}": {
      "get": {
        "tags": [
          "navigation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPNavigationRevisionResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {}
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ]
      },
      "delete": {
        "tags": [
          "navigation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPNavigationRevisionResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {}
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Required to be true, as revisions do not support trashing.",
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/navigation/{id}/autosaves": {
      "get": {
        "tags": [
          "navigation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPNavigationRevisionResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the autosave.",
            "required": false,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ]
      },
      "post": {
        "tags": [
          "navigation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPNavigationRevisionResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "parent": {
                    "description": "The ID for the parent of the autosave.",
                    "type": "integer"
                  },
                  "date": {
                    "description": "The date the post was published, in the site's timezone.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "date_gmt": {
                    "description": "The date the post was published, as GMT.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the post unique to its type.",
                    "type": "string"
                  },
                  "status": {
                    "description": "A named status for the post.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "password": {
                    "description": "A password to protect access to the content and excerpt.",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Title for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit",
                          "embed"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "content": {
                    "description": "The content for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Content for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit",
                          "embed"
                        ]
                      },
                      "rendered": {
                        "description": "HTML content for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      },
                      "block_version": {
                        "description": "Version of the content block format used by the post.",
                        "type": "integer",
                        "x-context": [
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the content is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "template": {
                    "description": "The theme file to use to display the post.",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/navigation/{parent}/autosaves/{id}": {
      "get": {
        "tags": [
          "navigation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WPNavigationRevisionResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the autosave.",
            "required": true,
            "schema": {}
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID for the autosave.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ]
      }
    },
    "/wp/v2/pages": {
      "get": {
        "tags": [
          "Pages"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPage"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPerPage"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {}
          },
          {
            "name": "after",
            "in": "query",
            "description": "Limit response to posts published after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "format": "date-time"
            }
          },
          {
            "name": "modified_after",
            "in": "query",
            "description": "Limit response to posts modified after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "format": "date-time"
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "Limit result set to posts assigned to specific authors.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "author_exclude",
            "in": "query",
            "description": "Ensure result set excludes posts assigned to specific authors.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Limit response to posts published before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "format": "date-time"
            }
          },
          {
            "name": "modified_before",
            "in": "query",
            "description": "Limit response to posts modified before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "format": "date-time"
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "menu_order",
            "in": "query",
            "description": "Limit result set to posts with a specific menu_order value.",
            "required": false,
            "schema": {}
          },
          {
            "name": "search_semantics",
            "in": "query",
            "description": "How to interpret the search input.",
            "required": false,
            "schema": {
              "enum": [
                "exact"
              ]
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterOrder"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by post attribute.",
            "required": false,
            "schema": {
              "default": "date",
              "enum": [
                "author",
                "date",
                "id",
                "include",
                "modified",
                "parent",
                "relevance",
                "slug",
                "include_slugs",
                "title",
                "menu_order"
              ]
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "Limit result set to items with particular parent IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "parent_exclude",
            "in": "query",
            "description": "Limit result set to all items except those of a particular parent ID.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "search_columns",
            "in": "query",
            "description": "Array of column names to be searched.",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "post_title",
                  "post_content",
                  "post_excerpt"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to posts with one or more specific slugs.",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Limit result set to posts assigned one or more statuses.",
            "required": false,
            "schema": {
              "default": "publish",
              "items": {
                "enum": [
                  "publish",
                  "future",
                  "draft",
                  "pending",
                  "private",
                  "trash",
                  "auto-draft",
                  "inherit",
                  "request-pending",
                  "request-confirmed",
                  "request-failed",
                  "request-completed",
                  "any"
                ],
                "type": "string"
              }
            }
          }
        ]
      },
      "post": {
        "tags": [
          "Pages"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "description": "The date the post was published, in the site's timezone.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "date_gmt": {
                    "description": "The date the post was published, as GMT.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the post unique to its type.",
                    "type": "string"
                  },
                  "status": {
                    "description": "A named status for the post.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "password": {
                    "description": "A password to protect access to the content and excerpt.",
                    "type": "string"
                  },
                  "parent": {
                    "description": "The ID for the parent of the post.",
                    "type": "integer"
                  },
                  "title": {
                    "description": "The title for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Title for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "content": {
                    "description": "The content for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Content for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML content for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ],
                        "readOnly": true
                      },
                      "block_version": {
                        "description": "Version of the content block format used by the post.",
                        "type": "integer",
                        "x-context": [
                          "edit"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the content is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "author": {
                    "description": "The ID for the author of the post.",
                    "type": "integer"
                  },
                  "excerpt": {
                    "description": "The excerpt for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Excerpt for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML excerpt for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the excerpt is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "featured_media": {
                    "description": "The ID of the featured media for the post.",
                    "type": "integer"
                  },
                  "comment_status": {
                    "description": "Whether or not comments are open on the post.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "ping_status": {
                    "description": "Whether or not the post can be pinged.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "menu_order": {
                    "description": "The order of the post in relation to other posts.",
                    "type": "integer"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object",
                    "properties": {
                      "footnotes": {
                        "type": "string",
                        "title": "",
                        "description": "",
                        "default": ""
                      }
                    }
                  },
                  "template": {
                    "description": "The theme file to use to display the post.",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/pages/{id}": {
      "get": {
        "tags": [
          "Pages"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "name": "excerpt_length",
            "in": "query",
            "description": "Override the default excerpt length.",
            "required": false,
            "schema": {}
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for the post if it is password protected.",
            "required": false,
            "schema": {}
          }
        ]
      },
      "post": {
        "tags": [
          "Pages"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "description": "The date the post was published, in the site's timezone.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "date_gmt": {
                    "description": "The date the post was published, as GMT.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the post unique to its type.",
                    "type": "string"
                  },
                  "status": {
                    "description": "A named status for the post.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "password": {
                    "description": "A password to protect access to the content and excerpt.",
                    "type": "string"
                  },
                  "parent": {
                    "description": "The ID for the parent of the post.",
                    "type": "integer"
                  },
                  "title": {
                    "description": "The title for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Title for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "content": {
                    "description": "The content for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Content for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML content for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ],
                        "readOnly": true
                      },
                      "block_version": {
                        "description": "Version of the content block format used by the post.",
                        "type": "integer",
                        "x-context": [
                          "edit"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the content is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "author": {
                    "description": "The ID for the author of the post.",
                    "type": "integer"
                  },
                  "excerpt": {
                    "description": "The excerpt for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Excerpt for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML excerpt for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the excerpt is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "featured_media": {
                    "description": "The ID of the featured media for the post.",
                    "type": "integer"
                  },
                  "comment_status": {
                    "description": "Whether or not comments are open on the post.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "ping_status": {
                    "description": "Whether or not the post can be pinged.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "menu_order": {
                    "description": "The order of the post in relation to other posts.",
                    "type": "integer"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object",
                    "properties": {
                      "footnotes": {
                        "type": "string",
                        "title": "",
                        "description": "",
                        "default": ""
                      }
                    }
                  },
                  "template": {
                    "description": "The theme file to use to display the post.",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Pages"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "description": "The date the post was published, in the site's timezone.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "date_gmt": {
                    "description": "The date the post was published, as GMT.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the post unique to its type.",
                    "type": "string"
                  },
                  "status": {
                    "description": "A named status for the post.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "password": {
                    "description": "A password to protect access to the content and excerpt.",
                    "type": "string"
                  },
                  "parent": {
                    "description": "The ID for the parent of the post.",
                    "type": "integer"
                  },
                  "title": {
                    "description": "The title for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Title for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "content": {
                    "description": "The content for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Content for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML content for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ],
                        "readOnly": true
                      },
                      "block_version": {
                        "description": "Version of the content block format used by the post.",
                        "type": "integer",
                        "x-context": [
                          "edit"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the content is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "author": {
                    "description": "The ID for the author of the post.",
                    "type": "integer"
                  },
                  "excerpt": {
                    "description": "The excerpt for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Excerpt for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML excerpt for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the excerpt is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "featured_media": {
                    "description": "The ID of the featured media for the post.",
                    "type": "integer"
                  },
                  "comment_status": {
                    "description": "Whether or not comments are open on the post.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "ping_status": {
                    "description": "Whether or not the post can be pinged.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "menu_order": {
                    "description": "The order of the post in relation to other posts.",
                    "type": "integer"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object",
                    "properties": {
                      "footnotes": {
                        "type": "string",
                        "title": "",
                        "description": "",
                        "default": ""
                      }
                    }
                  },
                  "template": {
                    "description": "The theme file to use to display the post.",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Pages"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "description": "The date the post was published, in the site's timezone.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "date_gmt": {
                    "description": "The date the post was published, as GMT.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the post unique to its type.",
                    "type": "string"
                  },
                  "status": {
                    "description": "A named status for the post.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "password": {
                    "description": "A password to protect access to the content and excerpt.",
                    "type": "string"
                  },
                  "parent": {
                    "description": "The ID for the parent of the post.",
                    "type": "integer"
                  },
                  "title": {
                    "description": "The title for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Title for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "content": {
                    "description": "The content for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Content for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML content for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ],
                        "readOnly": true
                      },
                      "block_version": {
                        "description": "Version of the content block format used by the post.",
                        "type": "integer",
                        "x-context": [
                          "edit"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the content is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "author": {
                    "description": "The ID for the author of the post.",
                    "type": "integer"
                  },
                  "excerpt": {
                    "description": "The excerpt for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Excerpt for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML excerpt for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the excerpt is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "featured_media": {
                    "description": "The ID of the featured media for the post.",
                    "type": "integer"
                  },
                  "comment_status": {
                    "description": "Whether or not comments are open on the post.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "ping_status": {
                    "description": "Whether or not the post can be pinged.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "menu_order": {
                    "description": "The order of the post in relation to other posts.",
                    "type": "integer"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object",
                    "properties": {
                      "footnotes": {
                        "type": "string",
                        "title": "",
                        "description": "",
                        "default": ""
                      }
                    }
                  },
                  "template": {
                    "description": "The theme file to use to display the post.",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Pages"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Whether to bypass Trash and force deletion.",
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/pages/{parent}/revisions": {
      "get": {
        "tags": [
          "Pages"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageRevisionResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPage"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPerPage"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {}
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterOrder"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by object attribute.",
            "required": false,
            "schema": {
              "default": "date",
              "enum": [
                "date",
                "id",
                "include",
                "relevance",
                "slug",
                "include_slugs",
                "title"
              ]
            }
          }
        ]
      }
    },
    "/wp/v2/pages/{parent}/revisions/{id}": {
      "get": {
        "tags": [
          "Pages"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageRevisionResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {}
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ]
      },
      "delete": {
        "tags": [
          "Pages"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageRevisionResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {}
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Required to be true, as revisions do not support trashing.",
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/pages/{id}/autosaves": {
      "get": {
        "tags": [
          "Pages"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageRevisionResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the autosave.",
            "required": false,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ]
      },
      "post": {
        "tags": [
          "Pages"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageRevisionResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "parent": {
                    "description": "The ID for the parent of the post.",
                    "type": "integer"
                  },
                  "date": {
                    "description": "The date the post was published, in the site's timezone.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "date_gmt": {
                    "description": "The date the post was published, as GMT.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the post unique to its type.",
                    "type": "string"
                  },
                  "status": {
                    "description": "A named status for the post.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "password": {
                    "description": "A password to protect access to the content and excerpt.",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Title for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "content": {
                    "description": "The content for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Content for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML content for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ],
                        "readOnly": true
                      },
                      "block_version": {
                        "description": "Version of the content block format used by the post.",
                        "type": "integer",
                        "x-context": [
                          "edit"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the content is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "author": {
                    "description": "The ID for the author of the post.",
                    "type": "integer"
                  },
                  "excerpt": {
                    "description": "The excerpt for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Excerpt for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML excerpt for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the excerpt is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "featured_media": {
                    "description": "The ID of the featured media for the post.",
                    "type": "integer"
                  },
                  "comment_status": {
                    "description": "Whether or not comments are open on the post.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "ping_status": {
                    "description": "Whether or not the post can be pinged.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "menu_order": {
                    "description": "The order of the post in relation to other posts.",
                    "type": "integer"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object",
                    "properties": {
                      "footnotes": {
                        "type": "string",
                        "title": "",
                        "description": "",
                        "default": ""
                      }
                    }
                  },
                  "template": {
                    "description": "The theme file to use to display the post.",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/pages/{parent}/autosaves/{id}": {
      "get": {
        "tags": [
          "Pages"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageRevisionResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the autosave.",
            "required": true,
            "schema": {}
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID for the autosave.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ]
      }
    },
    "/wp/v2/pattern-directory/patterns": {
      "get": {
        "tags": [
          "Patterns"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatternDirectoryItemResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPage"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPerPage",
            "schema": {
              "default": 100
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {
              "minLength": 1
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Limit results to those matching a category ID.",
            "required": false,
            "schema": {
              "minimum": 1
            }
          },
          {
            "name": "keyword",
            "in": "query",
            "description": "Limit results to those matching a keyword ID.",
            "required": false,
            "schema": {
              "minimum": 1
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit results to those matching a pattern (slug).",
            "required": false,
            "schema": {}
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterOrder"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by post attribute.",
            "required": false,
            "schema": {
              "default": "date",
              "enum": [
                "author",
                "date",
                "id",
                "include",
                "modified",
                "parent",
                "relevance",
                "slug",
                "include_slugs",
                "title",
                "favorite_count"
              ]
            }
          }
        ]
      }
    },
    "/wp/v2/plugins": {
      "get": {
        "tags": [
          "Plugins"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {}
          },
          {
            "name": "status",
            "in": "query",
            "description": "Limits results to plugins with the given status.",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "enum": [
                  "inactive",
                  "active"
                ]
              }
            }
          }
        ]
      },
      "post": {
        "tags": [
          "Plugins"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "slug": {
                    "description": "WordPress.org plugin directory slug.",
                    "type": "string",
                    "pattern": "[\\w\\-]+"
                  },
                  "status": {
                    "description": "The plugin activation status.",
                    "default": "inactive",
                    "type": "string",
                    "enum": [
                      "inactive",
                      "active"
                    ]
                  }
                },
                "required": [
                  "slug"
                ]
              }
            }
          }
        }
      }
    },
    "/wp/v2/plugins/{plugin}": {
      "get": {
        "tags": [
          "Plugins"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "name": "plugin",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ]
      },
      "post": {
        "tags": [
          "Plugins"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "plugin",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "x-context": {
                    "description": "Scope under which the request is made; determines fields present in response.",
                    "default": "view",
                    "type": "string",
                    "enum": [
                      "view",
                      "embed",
                      "edit"
                    ]
                  },
                  "status": {
                    "description": "The plugin activation status.",
                    "type": "string",
                    "enum": [
                      "inactive",
                      "active"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Plugins"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "plugin",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "x-context": {
                    "description": "Scope under which the request is made; determines fields present in response.",
                    "default": "view",
                    "type": "string",
                    "enum": [
                      "view",
                      "embed",
                      "edit"
                    ]
                  },
                  "status": {
                    "description": "The plugin activation status.",
                    "type": "string",
                    "enum": [
                      "inactive",
                      "active"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Plugins"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "plugin",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "x-context": {
                    "description": "Scope under which the request is made; determines fields present in response.",
                    "default": "view",
                    "type": "string",
                    "enum": [
                      "view",
                      "embed",
                      "edit"
                    ]
                  },
                  "status": {
                    "description": "The plugin activation status.",
                    "type": "string",
                    "enum": [
                      "inactive",
                      "active"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Plugins"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "plugin",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "x-context": {
                    "description": "Scope under which the request is made; determines fields present in response.",
                    "default": "view",
                    "type": "string",
                    "enum": [
                      "view",
                      "embed",
                      "edit"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/posts": {
      "get": {
        "tags": [
          "Posts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPage"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPerPage"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {}
          },
          {
            "name": "after",
            "in": "query",
            "description": "Limit response to posts published after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "format": "date-time"
            }
          },
          {
            "name": "modified_after",
            "in": "query",
            "description": "Limit response to posts modified after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "format": "date-time"
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "Limit result set to posts assigned to specific authors.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "author_exclude",
            "in": "query",
            "description": "Ensure result set excludes posts assigned to specific authors.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Limit response to posts published before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "format": "date-time"
            }
          },
          {
            "name": "modified_before",
            "in": "query",
            "description": "Limit response to posts modified before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "format": "date-time"
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "search_semantics",
            "in": "query",
            "description": "How to interpret the search input.",
            "required": false,
            "schema": {
              "enum": [
                "exact"
              ]
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterOrder"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by post attribute.",
            "required": false,
            "schema": {
              "default": "date",
              "enum": [
                "author",
                "date",
                "id",
                "include",
                "modified",
                "parent",
                "relevance",
                "slug",
                "include_slugs",
                "title"
              ]
            }
          },
          {
            "name": "search_columns",
            "in": "query",
            "description": "Array of column names to be searched.",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "post_title",
                  "post_content",
                  "post_excerpt"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to posts with one or more specific slugs.",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Limit result set to posts assigned one or more statuses.",
            "required": false,
            "schema": {
              "default": "publish",
              "items": {
                "enum": [
                  "publish",
                  "future",
                  "draft",
                  "pending",
                  "private",
                  "trash",
                  "auto-draft",
                  "inherit",
                  "request-pending",
                  "request-confirmed",
                  "request-failed",
                  "request-completed",
                  "any"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "tax_relation",
            "in": "query",
            "description": "Limit result set based on relationship between multiple taxonomies.",
            "required": false,
            "schema": {
              "enum": [
                "AND",
                "OR"
              ]
            }
          },
          {
            "name": "categories",
            "in": "query",
            "description": "Limit result set to items with specific terms assigned in the categories taxonomy.",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "title": "Term ID List",
                  "description": "Match terms with the listed IDs.",
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                },
                {
                  "title": "Term ID Taxonomy Query",
                  "description": "Perform an advanced term query.",
                  "type": "object",
                  "properties": {
                    "terms": {
                      "description": "Term IDs.",
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "default": []
                    },
                    "include_children": {
                      "description": "Whether to include child terms in the terms limiting the result set.",
                      "type": "boolean",
                      "default": false
                    },
                    "operator": {
                      "description": "Whether items must be assigned all or any of the specified terms.",
                      "type": "string",
                      "enum": [
                        "AND",
                        "OR"
                      ],
                      "default": "OR"
                    }
                  },
                  "unevaluatedProperties": false
                }
              ]
            }
          },
          {
            "name": "categories_exclude",
            "in": "query",
            "description": "Limit result set to items except those with specific terms assigned in the categories taxonomy.",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "title": "Term ID List",
                  "description": "Match terms with the listed IDs.",
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                },
                {
                  "title": "Term ID Taxonomy Query",
                  "description": "Perform an advanced term query.",
                  "type": "object",
                  "properties": {
                    "terms": {
                      "description": "Term IDs.",
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "default": []
                    },
                    "include_children": {
                      "description": "Whether to include child terms in the terms limiting the result set.",
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "unevaluatedProperties": false
                }
              ]
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Limit result set to items with specific terms assigned in the tags taxonomy.",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "title": "Term ID List",
                  "description": "Match terms with the listed IDs.",
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                },
                {
                  "title": "Term ID Taxonomy Query",
                  "description": "Perform an advanced term query.",
                  "type": "object",
                  "properties": {
                    "terms": {
                      "description": "Term IDs.",
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "default": []
                    },
                    "operator": {
                      "description": "Whether items must be assigned all or any of the specified terms.",
                      "type": "string",
                      "enum": [
                        "AND",
                        "OR"
                      ],
                      "default": "OR"
                    }
                  },
                  "unevaluatedProperties": false
                }
              ]
            }
          },
          {
            "name": "tags_exclude",
            "in": "query",
            "description": "Limit result set to items except those with specific terms assigned in the tags taxonomy.",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "title": "Term ID List",
                  "description": "Match terms with the listed IDs.",
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                },
                {
                  "title": "Term ID Taxonomy Query",
                  "description": "Perform an advanced term query.",
                  "type": "object",
                  "properties": {
                    "terms": {
                      "description": "Term IDs.",
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "default": []
                    }
                  },
                  "unevaluatedProperties": false
                }
              ]
            }
          },
          {
            "name": "sticky",
            "in": "query",
            "description": "Limit result set to items that are sticky.",
            "required": false,
            "schema": {}
          },
          {
            "name": "format",
            "in": "query",
            "description": "Limit result set to items assigned one or more given formats.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "items": {
                "enum": [
                  "standard",
                  "aside",
                  "chat",
                  "gallery",
                  "link",
                  "image",
                  "quote",
                  "status",
                  "video",
                  "audio"
                ],
                "type": "string"
              }
            }
          }
        ]
      },
      "post": {
        "tags": [
          "Posts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "description": "The date the post was published, in the site's timezone.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "date_gmt": {
                    "description": "The date the post was published, as GMT.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the post unique to its type.",
                    "type": "string"
                  },
                  "status": {
                    "description": "A named status for the post.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "password": {
                    "description": "A password to protect access to the content and excerpt.",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Title for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "content": {
                    "description": "The content for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Content for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML content for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ],
                        "readOnly": true
                      },
                      "block_version": {
                        "description": "Version of the content block format used by the post.",
                        "type": "integer",
                        "x-context": [
                          "edit"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the content is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "author": {
                    "description": "The ID for the author of the post.",
                    "type": "integer"
                  },
                  "excerpt": {
                    "description": "The excerpt for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Excerpt for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML excerpt for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the excerpt is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "featured_media": {
                    "description": "The ID of the featured media for the post.",
                    "type": "integer"
                  },
                  "comment_status": {
                    "description": "Whether or not comments are open on the post.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "ping_status": {
                    "description": "Whether or not the post can be pinged.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "format": {
                    "description": "The format for the post.",
                    "type": "string",
                    "enum": [
                      "standard",
                      "aside",
                      "chat",
                      "gallery",
                      "link",
                      "image",
                      "quote",
                      "status",
                      "video",
                      "audio"
                    ]
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object",
                    "properties": {
                      "footnotes": {
                        "type": "string",
                        "title": "",
                        "description": "",
                        "default": ""
                      }
                    }
                  },
                  "sticky": {
                    "description": "Whether or not the post should be treated as sticky.",
                    "type": "boolean"
                  },
                  "template": {
                    "description": "The theme file to use to display the post.",
                    "type": "string"
                  },
                  "categories": {
                    "description": "The terms assigned to the post in the category taxonomy.",
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "tags": {
                    "description": "The terms assigned to the post in the post_tag taxonomy.",
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/posts/{id}": {
      "get": {
        "tags": [
          "Posts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "name": "excerpt_length",
            "in": "query",
            "description": "Override the default excerpt length.",
            "required": false,
            "schema": {}
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for the post if it is password protected.",
            "required": false,
            "schema": {}
          }
        ]
      },
      "post": {
        "tags": [
          "Posts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "description": "The date the post was published, in the site's timezone.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "date_gmt": {
                    "description": "The date the post was published, as GMT.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the post unique to its type.",
                    "type": "string"
                  },
                  "status": {
                    "description": "A named status for the post.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "password": {
                    "description": "A password to protect access to the content and excerpt.",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Title for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "content": {
                    "description": "The content for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Content for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML content for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ],
                        "readOnly": true
                      },
                      "block_version": {
                        "description": "Version of the content block format used by the post.",
                        "type": "integer",
                        "x-context": [
                          "edit"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the content is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "author": {
                    "description": "The ID for the author of the post.",
                    "type": "integer"
                  },
                  "excerpt": {
                    "description": "The excerpt for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Excerpt for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML excerpt for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the excerpt is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "featured_media": {
                    "description": "The ID of the featured media for the post.",
                    "type": "integer"
                  },
                  "comment_status": {
                    "description": "Whether or not comments are open on the post.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "ping_status": {
                    "description": "Whether or not the post can be pinged.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "format": {
                    "description": "The format for the post.",
                    "type": "string",
                    "enum": [
                      "standard",
                      "aside",
                      "chat",
                      "gallery",
                      "link",
                      "image",
                      "quote",
                      "status",
                      "video",
                      "audio"
                    ]
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object",
                    "properties": {
                      "footnotes": {
                        "type": "string",
                        "title": "",
                        "description": "",
                        "default": ""
                      }
                    }
                  },
                  "sticky": {
                    "description": "Whether or not the post should be treated as sticky.",
                    "type": "boolean"
                  },
                  "template": {
                    "description": "The theme file to use to display the post.",
                    "type": "string"
                  },
                  "categories": {
                    "description": "The terms assigned to the post in the category taxonomy.",
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "tags": {
                    "description": "The terms assigned to the post in the post_tag taxonomy.",
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Posts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "description": "The date the post was published, in the site's timezone.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "date_gmt": {
                    "description": "The date the post was published, as GMT.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the post unique to its type.",
                    "type": "string"
                  },
                  "status": {
                    "description": "A named status for the post.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "password": {
                    "description": "A password to protect access to the content and excerpt.",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Title for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "content": {
                    "description": "The content for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Content for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML content for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ],
                        "readOnly": true
                      },
                      "block_version": {
                        "description": "Version of the content block format used by the post.",
                        "type": "integer",
                        "x-context": [
                          "edit"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the content is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "author": {
                    "description": "The ID for the author of the post.",
                    "type": "integer"
                  },
                  "excerpt": {
                    "description": "The excerpt for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Excerpt for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML excerpt for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the excerpt is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "featured_media": {
                    "description": "The ID of the featured media for the post.",
                    "type": "integer"
                  },
                  "comment_status": {
                    "description": "Whether or not comments are open on the post.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "ping_status": {
                    "description": "Whether or not the post can be pinged.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "format": {
                    "description": "The format for the post.",
                    "type": "string",
                    "enum": [
                      "standard",
                      "aside",
                      "chat",
                      "gallery",
                      "link",
                      "image",
                      "quote",
                      "status",
                      "video",
                      "audio"
                    ]
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object",
                    "properties": {
                      "footnotes": {
                        "type": "string",
                        "title": "",
                        "description": "",
                        "default": ""
                      }
                    }
                  },
                  "sticky": {
                    "description": "Whether or not the post should be treated as sticky.",
                    "type": "boolean"
                  },
                  "template": {
                    "description": "The theme file to use to display the post.",
                    "type": "string"
                  },
                  "categories": {
                    "description": "The terms assigned to the post in the category taxonomy.",
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "tags": {
                    "description": "The terms assigned to the post in the post_tag taxonomy.",
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Posts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "description": "The date the post was published, in the site's timezone.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "date_gmt": {
                    "description": "The date the post was published, as GMT.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the post unique to its type.",
                    "type": "string"
                  },
                  "status": {
                    "description": "A named status for the post.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "password": {
                    "description": "A password to protect access to the content and excerpt.",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Title for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "content": {
                    "description": "The content for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Content for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML content for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ],
                        "readOnly": true
                      },
                      "block_version": {
                        "description": "Version of the content block format used by the post.",
                        "type": "integer",
                        "x-context": [
                          "edit"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the content is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "author": {
                    "description": "The ID for the author of the post.",
                    "type": "integer"
                  },
                  "excerpt": {
                    "description": "The excerpt for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Excerpt for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML excerpt for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the excerpt is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "featured_media": {
                    "description": "The ID of the featured media for the post.",
                    "type": "integer"
                  },
                  "comment_status": {
                    "description": "Whether or not comments are open on the post.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "ping_status": {
                    "description": "Whether or not the post can be pinged.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "format": {
                    "description": "The format for the post.",
                    "type": "string",
                    "enum": [
                      "standard",
                      "aside",
                      "chat",
                      "gallery",
                      "link",
                      "image",
                      "quote",
                      "status",
                      "video",
                      "audio"
                    ]
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object",
                    "properties": {
                      "footnotes": {
                        "type": "string",
                        "title": "",
                        "description": "",
                        "default": ""
                      }
                    }
                  },
                  "sticky": {
                    "description": "Whether or not the post should be treated as sticky.",
                    "type": "boolean"
                  },
                  "template": {
                    "description": "The theme file to use to display the post.",
                    "type": "string"
                  },
                  "categories": {
                    "description": "The terms assigned to the post in the category taxonomy.",
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "tags": {
                    "description": "The terms assigned to the post in the post_tag taxonomy.",
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Posts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Whether to bypass Trash and force deletion.",
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/posts/{parent}/revisions": {
      "get": {
        "tags": [
          "Posts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostRevisionResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPage"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPerPage"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {}
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterOrder"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by object attribute.",
            "required": false,
            "schema": {
              "default": "date",
              "enum": [
                "date",
                "id",
                "include",
                "relevance",
                "slug",
                "include_slugs",
                "title"
              ]
            }
          }
        ]
      }
    },
    "/wp/v2/posts/{parent}/revisions/{id}": {
      "get": {
        "tags": [
          "Posts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostRevisionResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {}
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ]
      },
      "delete": {
        "tags": [
          "Posts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostRevisionResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {}
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Required to be true, as revisions do not support trashing.",
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/posts/{id}/autosaves": {
      "get": {
        "tags": [
          "Posts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostRevisionResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the autosave.",
            "required": false,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ]
      },
      "post": {
        "tags": [
          "Posts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostRevisionResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "parent": {
                    "description": "The ID for the parent of the autosave.",
                    "type": "integer"
                  },
                  "date": {
                    "description": "The date the post was published, in the site's timezone.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "date_gmt": {
                    "description": "The date the post was published, as GMT.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the post unique to its type.",
                    "type": "string"
                  },
                  "status": {
                    "description": "A named status for the post.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "password": {
                    "description": "A password to protect access to the content and excerpt.",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Title for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "content": {
                    "description": "The content for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Content for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML content for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ],
                        "readOnly": true
                      },
                      "block_version": {
                        "description": "Version of the content block format used by the post.",
                        "type": "integer",
                        "x-context": [
                          "edit"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the content is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "author": {
                    "description": "The ID for the author of the post.",
                    "type": "integer"
                  },
                  "excerpt": {
                    "description": "The excerpt for the post.",
                    "type": "object",
                    "properties": {
                      "raw": {
                        "description": "Excerpt for the post, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "rendered": {
                        "description": "HTML excerpt for the post, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      },
                      "protected": {
                        "description": "Whether the excerpt is protected with a password.",
                        "type": "boolean",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "featured_media": {
                    "description": "The ID of the featured media for the post.",
                    "type": "integer"
                  },
                  "comment_status": {
                    "description": "Whether or not comments are open on the post.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "ping_status": {
                    "description": "Whether or not the post can be pinged.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "format": {
                    "description": "The format for the post.",
                    "type": "string",
                    "enum": [
                      "standard",
                      "aside",
                      "chat",
                      "gallery",
                      "link",
                      "image",
                      "quote",
                      "status",
                      "video",
                      "audio"
                    ]
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object",
                    "properties": {
                      "footnotes": {
                        "type": "string",
                        "title": "",
                        "description": "",
                        "default": ""
                      }
                    }
                  },
                  "sticky": {
                    "description": "Whether or not the post should be treated as sticky.",
                    "type": "boolean"
                  },
                  "template": {
                    "description": "The theme file to use to display the post.",
                    "type": "string"
                  },
                  "categories": {
                    "description": "The terms assigned to the post in the category taxonomy.",
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "tags": {
                    "description": "The terms assigned to the post in the post_tag taxonomy.",
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/posts/{parent}/autosaves/{id}": {
      "get": {
        "tags": [
          "Posts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostRevisionResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the autosave.",
            "required": true,
            "schema": {}
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID for the autosave.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ]
      }
    },
    "/wp/v2/search": {
      "get": {
        "tags": [
          "Search"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResultResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPage"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPerPage"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {}
          },
          {
            "name": "type",
            "in": "query",
            "description": "Limit results to items of an object type.",
            "required": false,
            "schema": {
              "default": "post",
              "enum": [
                "post",
                "term",
                "post-format"
              ]
            }
          },
          {
            "name": "subtype",
            "in": "query",
            "description": "Limit results to items of one or more object subtypes.",
            "required": false,
            "schema": {
              "default": "any",
              "items": {
                "enum": [
                  "post",
                  "page",
                  "category",
                  "post_tag",
                  "any"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "/wp/v2/settings": {
      "get": {
        "tags": [
          "Settings"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/settings"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Settings"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/settings"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "title": "Title",
                    "description": "Site title.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Tagline",
                    "description": "Site tagline.",
                    "type": "string"
                  },
                  "url": {
                    "title": "",
                    "description": "Site URL.",
                    "type": "string",
                    "format": "uri"
                  },
                  "email": {
                    "title": "",
                    "description": "This address is used for admin purposes, like new user notification.",
                    "type": "string",
                    "format": "email"
                  },
                  "timezone": {
                    "title": "",
                    "description": "A city in the same timezone as you.",
                    "type": "string"
                  },
                  "date_format": {
                    "title": "",
                    "description": "A date format for all date strings.",
                    "type": "string"
                  },
                  "time_format": {
                    "title": "",
                    "description": "A time format for all time strings.",
                    "type": "string"
                  },
                  "start_of_week": {
                    "title": "",
                    "description": "A day number of the week that the week should start on.",
                    "type": "integer"
                  },
                  "language": {
                    "title": "",
                    "description": "WordPress locale code.",
                    "type": "string"
                  },
                  "use_smilies": {
                    "title": "",
                    "description": "Convert emoticons like :-) and :-P to graphics on display.",
                    "type": "boolean"
                  },
                  "default_category": {
                    "title": "",
                    "description": "Default post category.",
                    "type": "integer"
                  },
                  "default_post_format": {
                    "title": "",
                    "description": "Default post format.",
                    "type": "string"
                  },
                  "posts_per_page": {
                    "title": "Maximum posts per page",
                    "description": "Blog pages show at most.",
                    "type": "integer"
                  },
                  "show_on_front": {
                    "title": "Show on front",
                    "description": "What to show on the front page",
                    "type": "string"
                  },
                  "page_on_front": {
                    "title": "Page on front",
                    "description": "The ID of the page that should be displayed on the front page",
                    "type": "integer"
                  },
                  "page_for_posts": {
                    "title": "",
                    "description": "The ID of the page that should display the latest posts",
                    "type": "integer"
                  },
                  "default_ping_status": {
                    "title": "",
                    "description": "Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "default_comment_status": {
                    "title": "Allow comments on new posts",
                    "description": "Allow people to submit comments on new posts.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "site_logo": {
                    "title": "Logo",
                    "description": "Site logo.",
                    "type": "integer"
                  },
                  "site_icon": {
                    "title": "Icon",
                    "description": "Site icon.",
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/settings"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "title": "Title",
                    "description": "Site title.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Tagline",
                    "description": "Site tagline.",
                    "type": "string"
                  },
                  "url": {
                    "title": "",
                    "description": "Site URL.",
                    "type": "string",
                    "format": "uri"
                  },
                  "email": {
                    "title": "",
                    "description": "This address is used for admin purposes, like new user notification.",
                    "type": "string",
                    "format": "email"
                  },
                  "timezone": {
                    "title": "",
                    "description": "A city in the same timezone as you.",
                    "type": "string"
                  },
                  "date_format": {
                    "title": "",
                    "description": "A date format for all date strings.",
                    "type": "string"
                  },
                  "time_format": {
                    "title": "",
                    "description": "A time format for all time strings.",
                    "type": "string"
                  },
                  "start_of_week": {
                    "title": "",
                    "description": "A day number of the week that the week should start on.",
                    "type": "integer"
                  },
                  "language": {
                    "title": "",
                    "description": "WordPress locale code.",
                    "type": "string"
                  },
                  "use_smilies": {
                    "title": "",
                    "description": "Convert emoticons like :-) and :-P to graphics on display.",
                    "type": "boolean"
                  },
                  "default_category": {
                    "title": "",
                    "description": "Default post category.",
                    "type": "integer"
                  },
                  "default_post_format": {
                    "title": "",
                    "description": "Default post format.",
                    "type": "string"
                  },
                  "posts_per_page": {
                    "title": "Maximum posts per page",
                    "description": "Blog pages show at most.",
                    "type": "integer"
                  },
                  "show_on_front": {
                    "title": "Show on front",
                    "description": "What to show on the front page",
                    "type": "string"
                  },
                  "page_on_front": {
                    "title": "Page on front",
                    "description": "The ID of the page that should be displayed on the front page",
                    "type": "integer"
                  },
                  "page_for_posts": {
                    "title": "",
                    "description": "The ID of the page that should display the latest posts",
                    "type": "integer"
                  },
                  "default_ping_status": {
                    "title": "",
                    "description": "Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "default_comment_status": {
                    "title": "Allow comments on new posts",
                    "description": "Allow people to submit comments on new posts.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "site_logo": {
                    "title": "Logo",
                    "description": "Site logo.",
                    "type": "integer"
                  },
                  "site_icon": {
                    "title": "Icon",
                    "description": "Site icon.",
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Settings"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/settings"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "title": "Title",
                    "description": "Site title.",
                    "type": "string"
                  },
                  "description": {
                    "title": "Tagline",
                    "description": "Site tagline.",
                    "type": "string"
                  },
                  "url": {
                    "title": "",
                    "description": "Site URL.",
                    "type": "string",
                    "format": "uri"
                  },
                  "email": {
                    "title": "",
                    "description": "This address is used for admin purposes, like new user notification.",
                    "type": "string",
                    "format": "email"
                  },
                  "timezone": {
                    "title": "",
                    "description": "A city in the same timezone as you.",
                    "type": "string"
                  },
                  "date_format": {
                    "title": "",
                    "description": "A date format for all date strings.",
                    "type": "string"
                  },
                  "time_format": {
                    "title": "",
                    "description": "A time format for all time strings.",
                    "type": "string"
                  },
                  "start_of_week": {
                    "title": "",
                    "description": "A day number of the week that the week should start on.",
                    "type": "integer"
                  },
                  "language": {
                    "title": "",
                    "description": "WordPress locale code.",
                    "type": "string"
                  },
                  "use_smilies": {
                    "title": "",
                    "description": "Convert emoticons like :-) and :-P to graphics on display.",
                    "type": "boolean"
                  },
                  "default_category": {
                    "title": "",
                    "description": "Default post category.",
                    "type": "integer"
                  },
                  "default_post_format": {
                    "title": "",
                    "description": "Default post format.",
                    "type": "string"
                  },
                  "posts_per_page": {
                    "title": "Maximum posts per page",
                    "description": "Blog pages show at most.",
                    "type": "integer"
                  },
                  "show_on_front": {
                    "title": "Show on front",
                    "description": "What to show on the front page",
                    "type": "string"
                  },
                  "page_on_front": {
                    "title": "Page on front",
                    "description": "The ID of the page that should be displayed on the front page",
                    "type": "integer"
                  },
                  "page_for_posts": {
                    "title": "",
                    "description": "The ID of the page that should display the latest posts",
                    "type": "integer"
                  },
                  "default_ping_status": {
                    "title": "",
                    "description": "Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "default_comment_status": {
                    "title": "Allow comments on new posts",
                    "description": "Allow people to submit comments on new posts.",
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "site_logo": {
                    "title": "Logo",
                    "description": "Site logo.",
                    "type": "integer"
                  },
                  "site_icon": {
                    "title": "Icon",
                    "description": "Site icon.",
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/sidebars": {
      "get": {
        "tags": [
          "Sidebars"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SidebarResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ]
      }
    },
    "/wp/v2/sidebars/{id}": {
      "get": {
        "tags": [
          "Sidebars"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SidebarResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a registered sidebar",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ]
      },
      "post": {
        "tags": [
          "Sidebars"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SidebarResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "widgets": {
                    "description": "Nested widgets.",
                    "type": "array",
                    "items": {
                      "type": [
                        "object",
                        "string"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Sidebars"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SidebarResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "widgets": {
                    "description": "Nested widgets.",
                    "type": "array",
                    "items": {
                      "type": [
                        "object",
                        "string"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Sidebars"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SidebarResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "widgets": {
                    "description": "Nested widgets.",
                    "type": "array",
                    "items": {
                      "type": [
                        "object",
                        "string"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/statuses": {
      "get": {
        "tags": [
          "Statuses"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ]
      }
    },
    "/wp/v2/statuses/{status}": {
      "get": {
        "tags": [
          "Statuses"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "status",
            "in": "path",
            "description": "An alphanumeric identifier for the status.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ]
      }
    },
    "/wp/v2/tags": {
      "get": {
        "tags": [
          "Tags"
        ],
        "operationId": "tagsList",
        "summary": "List tags",
        "description": "Query this endpoint to retrieve a collection of tags.\n\nThe response you receive can be controlled and filtered using the URL query parameters below.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPage"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPerPage"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {}
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterOrder",
            "schema": {
              "default": "asc"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by term attribute.",
            "required": false,
            "schema": {
              "default": "name",
              "enum": [
                "id",
                "include",
                "name",
                "slug",
                "include_slugs",
                "term_group",
                "description",
                "count"
              ]
            }
          },
          {
            "name": "hide_empty",
            "in": "query",
            "description": "Whether to hide terms not assigned to any posts.",
            "required": false,
            "schema": {}
          },
          {
            "name": "post",
            "in": "query",
            "description": "Limit result set to terms assigned to a specific post.",
            "required": false,
            "schema": {}
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to terms with one or more specific slugs.",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tags"
        ],
        "operationId": "tagCreate",
        "summary": "Create  tag",
        "description": "Query this endpoint to create a  tag.\n",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "HTML description of the term.",
                    "type": "string"
                  },
                  "name": {
                    "description": "HTML title for the term.",
                    "type": "string"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the term unique to its type.",
                    "type": "string"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/tags/{id}": {
      "get": {
        "tags": [
          "Tags"
        ],
        "operationId": "tagGet",
        "summary": "Retrieve a tag",
        "description": "Query this endpoint to retrieve to retrieve a specific tag record.\n\nThe response you receive can be controlled and filtered using the URL query parameters below.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathParameterId"
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tags"
        ],
        "operationId": "tagPost",
        "summary": "Update a tag",
        "description": "Query this endpoint to update a specific tag record.\n\nThe response you receive can be controlled and filtered using the URL query parameters below.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathParameterId"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "HTML description of the term.",
                    "type": "string"
                  },
                  "name": {
                    "description": "HTML title for the term.",
                    "type": "string"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the term unique to its type.",
                    "type": "string"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tags"
        ],
        "operationId": "tagPut",
        "summary": "Update a tag",
        "description": "Query this endpoint to update a specific tag record.\n\nThe response you receive can be controlled and filtered using the URL query parameters below.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathParameterId"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "HTML description of the term.",
                    "type": "string"
                  },
                  "name": {
                    "description": "HTML title for the term.",
                    "type": "string"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the term unique to its type.",
                    "type": "string"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Tags"
        ],
        "operationId": "tagPatch",
        "summary": "Patch a tag",
        "description": "Query this endpoint to patch a specific tag record.\n\nThe response you receive can be controlled and filtered using the URL query parameters below.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathParameterId"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "HTML description of the term.",
                    "type": "string"
                  },
                  "name": {
                    "description": "HTML title for the term.",
                    "type": "string"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the term unique to its type.",
                    "type": "string"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "operationId": "tagDelete",
        "summary": "Delete a tag",
        "description": "Query this endpoint to delete a specific tag record.\n\nThe response you receive can be controlled and filtered using the URL query parameters below.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathParameterId"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Required to be true, as terms do not support trashing.",
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/taxonomies": {
      "get": {
        "tags": [
          "Taxonomies"
        ],
        "operationId": "taxonomiesList",
        "summary": "List taxonomies",
        "description": "Query this endpoint to retrieve a collection of taxonomies.\n\nThe response you receive can be controlled and filtered using the URL query parameters below.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Limit results to taxonomies associated with a specific post type.",
            "required": false,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxonomyCollectionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/taxonomies/{taxonomy}": {
      "get": {
        "tags": [
          "Taxonomies"
        ],
        "operationId": "taxonomyGet",
        "summary": "Retrieve a taxonomy",
        "description": "Query this endpoint to retrieve to retrieve a specific taxonomy record.\n\nThe response you receive can be controlled and filtered using the URL query parameters below.\n",
        "parameters": [
          {
            "name": "taxonomy",
            "in": "path",
            "description": "An alphanumeric identifier for the taxonomy.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxonomyResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/template-parts": {
      "get": {
        "tags": [
          "Template parts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpTemplatePartResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "name": "wp_id",
            "in": "query",
            "description": "Limit to the specified post id.",
            "required": false,
            "schema": {}
          },
          {
            "name": "area",
            "in": "query",
            "description": "Limit to the specified template part area.",
            "required": false,
            "schema": {}
          },
          {
            "name": "post_type",
            "in": "query",
            "description": "Post type to get the templates for.",
            "required": false,
            "schema": {}
          }
        ]
      },
      "post": {
        "tags": [
          "Template parts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpTemplatePartResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "slug": {
                    "description": "Unique slug identifying the template.",
                    "type": "string",
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9_\\%-]+"
                  },
                  "theme": {
                    "description": "Theme identifier for the template.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of template.",
                    "type": "string"
                  },
                  "content": {
                    "description": "Content of template.",
                    "default": "",
                    "type": [
                      "object",
                      "string"
                    ],
                    "properties": {
                      "raw": {
                        "description": "Content for the template, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ]
                      },
                      "block_version": {
                        "description": "Version of the content block format used by the template.",
                        "type": "integer",
                        "x-context": [
                          "edit"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "title": {
                    "description": "Title of template.",
                    "default": "",
                    "type": [
                      "object",
                      "string"
                    ],
                    "properties": {
                      "raw": {
                        "description": "Title for the template, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the template, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "description": {
                    "description": "Description of template.",
                    "default": "",
                    "type": "string"
                  },
                  "status": {
                    "description": "Status of template.",
                    "default": "publish",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "author": {
                    "description": "The ID for the author of the template.",
                    "type": "integer"
                  },
                  "area": {
                    "description": "Where the template part is intended for use (header, footer, etc.)",
                    "type": "string"
                  }
                },
                "required": [
                  "slug"
                ]
              }
            }
          }
        }
      }
    },
    "/wp/v2/template-parts/lookup": {
      "get": {
        "tags": [
          "Template parts"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "name": "slug",
            "in": "query",
            "description": "The slug of the template to get the fallback for",
            "required": true,
            "schema": {}
          },
          {
            "name": "is_custom",
            "in": "query",
            "description": "Indicates if a template is custom or part of the template hierarchy",
            "required": false,
            "schema": {}
          },
          {
            "name": "template_prefix",
            "in": "query",
            "description": "The template prefix for the created template. This is used to extract the main template type, e.g. in `taxonomy-books` extracts the `taxonomy`",
            "required": false,
            "schema": {}
          }
        ]
      }
    },
    "/wp/v2/template-parts/{id}": {
      "get": {
        "tags": [
          "Template parts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpTemplatePartResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ]
      },
      "post": {
        "tags": [
          "Template parts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpTemplatePartResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "slug": {
                    "description": "Unique slug identifying the template.",
                    "type": "string",
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9_\\%-]+"
                  },
                  "theme": {
                    "description": "Theme identifier for the template.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of template.",
                    "type": "string"
                  },
                  "content": {
                    "description": "Content of template.",
                    "type": [
                      "object",
                      "string"
                    ],
                    "properties": {
                      "raw": {
                        "description": "Content for the template, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ]
                      },
                      "block_version": {
                        "description": "Version of the content block format used by the template.",
                        "type": "integer",
                        "x-context": [
                          "edit"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "title": {
                    "description": "Title of template.",
                    "type": [
                      "object",
                      "string"
                    ],
                    "properties": {
                      "raw": {
                        "description": "Title for the template, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the template, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "description": {
                    "description": "Description of template.",
                    "type": "string"
                  },
                  "status": {
                    "description": "Status of template.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "author": {
                    "description": "The ID for the author of the template.",
                    "type": "integer"
                  },
                  "area": {
                    "description": "Where the template part is intended for use (header, footer, etc.)",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Template parts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpTemplatePartResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "slug": {
                    "description": "Unique slug identifying the template.",
                    "type": "string",
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9_\\%-]+"
                  },
                  "theme": {
                    "description": "Theme identifier for the template.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of template.",
                    "type": "string"
                  },
                  "content": {
                    "description": "Content of template.",
                    "type": [
                      "object",
                      "string"
                    ],
                    "properties": {
                      "raw": {
                        "description": "Content for the template, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ]
                      },
                      "block_version": {
                        "description": "Version of the content block format used by the template.",
                        "type": "integer",
                        "x-context": [
                          "edit"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "title": {
                    "description": "Title of template.",
                    "type": [
                      "object",
                      "string"
                    ],
                    "properties": {
                      "raw": {
                        "description": "Title for the template, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the template, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "description": {
                    "description": "Description of template.",
                    "type": "string"
                  },
                  "status": {
                    "description": "Status of template.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "author": {
                    "description": "The ID for the author of the template.",
                    "type": "integer"
                  },
                  "area": {
                    "description": "Where the template part is intended for use (header, footer, etc.)",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Template parts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpTemplatePartResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "slug": {
                    "description": "Unique slug identifying the template.",
                    "type": "string",
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9_\\%-]+"
                  },
                  "theme": {
                    "description": "Theme identifier for the template.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of template.",
                    "type": "string"
                  },
                  "content": {
                    "description": "Content of template.",
                    "type": [
                      "object",
                      "string"
                    ],
                    "properties": {
                      "raw": {
                        "description": "Content for the template, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ]
                      },
                      "block_version": {
                        "description": "Version of the content block format used by the template.",
                        "type": "integer",
                        "x-context": [
                          "edit"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "title": {
                    "description": "Title of template.",
                    "type": [
                      "object",
                      "string"
                    ],
                    "properties": {
                      "raw": {
                        "description": "Title for the template, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the template, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "description": {
                    "description": "Description of template.",
                    "type": "string"
                  },
                  "status": {
                    "description": "Status of template.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "author": {
                    "description": "The ID for the author of the template.",
                    "type": "integer"
                  },
                  "area": {
                    "description": "Where the template part is intended for use (header, footer, etc.)",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Template parts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpTemplatePartResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Whether to bypass Trash and force deletion.",
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/template-parts/{parent}/revisions": {
      "get": {
        "tags": [
          "Template parts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpTemplatePartResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPage"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPerPage"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {}
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterOrder"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by object attribute.",
            "required": false,
            "schema": {
              "default": "date",
              "enum": [
                "date",
                "id",
                "include",
                "relevance",
                "slug",
                "include_slugs",
                "title"
              ]
            }
          }
        ]
      }
    },
    "/wp/v2/template-parts/{parent}/revisions/{id}": {
      "get": {
        "tags": [
          "Template parts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpTemplatePartResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {}
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ]
      },
      "delete": {
        "tags": [
          "Template parts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpTemplatePartResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {}
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Required to be true, as revisions do not support trashing.",
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/template-parts/{id}/autosaves": {
      "get": {
        "tags": [
          "Template parts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpTemplatePartResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ]
      },
      "post": {
        "tags": [
          "Template parts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpTemplatePartResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "slug": {
                    "description": "Unique slug identifying the template.",
                    "type": "string",
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9_\\%-]+"
                  },
                  "theme": {
                    "description": "Theme identifier for the template.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of template.",
                    "type": "string"
                  },
                  "content": {
                    "description": "Content of template.",
                    "type": [
                      "object",
                      "string"
                    ],
                    "properties": {
                      "raw": {
                        "description": "Content for the template, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ]
                      },
                      "block_version": {
                        "description": "Version of the content block format used by the template.",
                        "type": "integer",
                        "x-context": [
                          "edit"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "title": {
                    "description": "Title of template.",
                    "type": [
                      "object",
                      "string"
                    ],
                    "properties": {
                      "raw": {
                        "description": "Title for the template, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the template, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "description": {
                    "description": "Description of template.",
                    "type": "string"
                  },
                  "status": {
                    "description": "Status of template.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "author": {
                    "description": "The ID for the author of the template.",
                    "type": "integer"
                  },
                  "area": {
                    "description": "Where the template part is intended for use (header, footer, etc.)",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/template-parts/{parent}/autosaves/{id}": {
      "get": {
        "tags": [
          "Template parts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpTemplatePartResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {}
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID for the autosave.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ]
      }
    },
    "/wp/v2/templates": {
      "get": {
        "tags": [
          "Templates"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpTemplateResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "name": "wp_id",
            "in": "query",
            "description": "Limit to the specified post id.",
            "required": false,
            "schema": {}
          },
          {
            "name": "area",
            "in": "query",
            "description": "Limit to the specified template part area.",
            "required": false,
            "schema": {}
          },
          {
            "name": "post_type",
            "in": "query",
            "description": "Post type to get the templates for.",
            "required": false,
            "schema": {}
          }
        ]
      },
      "post": {
        "tags": [
          "Templates"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpTemplateResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "slug": {
                    "description": "Unique slug identifying the template.",
                    "type": "string",
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9_\\%-]+"
                  },
                  "theme": {
                    "description": "Theme identifier for the template.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of template.",
                    "type": "string"
                  },
                  "content": {
                    "description": "Content of template.",
                    "default": "",
                    "type": [
                      "object",
                      "string"
                    ],
                    "properties": {
                      "raw": {
                        "description": "Content for the template, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ]
                      },
                      "block_version": {
                        "description": "Version of the content block format used by the template.",
                        "type": "integer",
                        "x-context": [
                          "edit"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "title": {
                    "description": "Title of template.",
                    "default": "",
                    "type": [
                      "object",
                      "string"
                    ],
                    "properties": {
                      "raw": {
                        "description": "Title for the template, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the template, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "description": {
                    "description": "Description of template.",
                    "default": "",
                    "type": "string"
                  },
                  "status": {
                    "description": "Status of template.",
                    "default": "publish",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "author": {
                    "description": "The ID for the author of the template.",
                    "type": "integer"
                  }
                },
                "required": [
                  "slug"
                ]
              }
            }
          }
        }
      }
    },
    "/wp/v2/templates/lookup": {
      "get": {
        "tags": [
          "Templates"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "name": "slug",
            "in": "query",
            "description": "The slug of the template to get the fallback for",
            "required": true,
            "schema": {}
          },
          {
            "name": "is_custom",
            "in": "query",
            "description": "Indicates if a template is custom or part of the template hierarchy",
            "required": false,
            "schema": {}
          },
          {
            "name": "template_prefix",
            "in": "query",
            "description": "The template prefix for the created template. This is used to extract the main template type, e.g. in `taxonomy-books` extracts the `taxonomy`",
            "required": false,
            "schema": {}
          }
        ]
      }
    },
    "/wp/v2/templates/{id}": {
      "get": {
        "tags": [
          "Templates"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpTemplateResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ]
      },
      "post": {
        "tags": [
          "Templates"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpTemplateResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "slug": {
                    "description": "Unique slug identifying the template.",
                    "type": "string",
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9_\\%-]+"
                  },
                  "theme": {
                    "description": "Theme identifier for the template.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of template.",
                    "type": "string"
                  },
                  "content": {
                    "description": "Content of template.",
                    "type": [
                      "object",
                      "string"
                    ],
                    "properties": {
                      "raw": {
                        "description": "Content for the template, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ]
                      },
                      "block_version": {
                        "description": "Version of the content block format used by the template.",
                        "type": "integer",
                        "x-context": [
                          "edit"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "title": {
                    "description": "Title of template.",
                    "type": [
                      "object",
                      "string"
                    ],
                    "properties": {
                      "raw": {
                        "description": "Title for the template, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the template, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "description": {
                    "description": "Description of template.",
                    "type": "string"
                  },
                  "status": {
                    "description": "Status of template.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "author": {
                    "description": "The ID for the author of the template.",
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Templates"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpTemplateResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "slug": {
                    "description": "Unique slug identifying the template.",
                    "type": "string",
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9_\\%-]+"
                  },
                  "theme": {
                    "description": "Theme identifier for the template.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of template.",
                    "type": "string"
                  },
                  "content": {
                    "description": "Content of template.",
                    "type": [
                      "object",
                      "string"
                    ],
                    "properties": {
                      "raw": {
                        "description": "Content for the template, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ]
                      },
                      "block_version": {
                        "description": "Version of the content block format used by the template.",
                        "type": "integer",
                        "x-context": [
                          "edit"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "title": {
                    "description": "Title of template.",
                    "type": [
                      "object",
                      "string"
                    ],
                    "properties": {
                      "raw": {
                        "description": "Title for the template, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the template, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "description": {
                    "description": "Description of template.",
                    "type": "string"
                  },
                  "status": {
                    "description": "Status of template.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "author": {
                    "description": "The ID for the author of the template.",
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Templates"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpTemplateResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "slug": {
                    "description": "Unique slug identifying the template.",
                    "type": "string",
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9_\\%-]+"
                  },
                  "theme": {
                    "description": "Theme identifier for the template.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of template.",
                    "type": "string"
                  },
                  "content": {
                    "description": "Content of template.",
                    "type": [
                      "object",
                      "string"
                    ],
                    "properties": {
                      "raw": {
                        "description": "Content for the template, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ]
                      },
                      "block_version": {
                        "description": "Version of the content block format used by the template.",
                        "type": "integer",
                        "x-context": [
                          "edit"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "title": {
                    "description": "Title of template.",
                    "type": [
                      "object",
                      "string"
                    ],
                    "properties": {
                      "raw": {
                        "description": "Title for the template, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the template, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "description": {
                    "description": "Description of template.",
                    "type": "string"
                  },
                  "status": {
                    "description": "Status of template.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "author": {
                    "description": "The ID for the author of the template.",
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Templates"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpTemplateResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Whether to bypass Trash and force deletion.",
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/templates/{parent}/revisions": {
      "get": {
        "tags": [
          "Templates"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpTemplateResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPage"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPerPage"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {}
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterOrder"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by object attribute.",
            "required": false,
            "schema": {
              "default": "date",
              "enum": [
                "date",
                "id",
                "include",
                "relevance",
                "slug",
                "include_slugs",
                "title"
              ]
            }
          }
        ]
      }
    },
    "/wp/v2/templates/{parent}/revisions/{id}": {
      "get": {
        "tags": [
          "Templates"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpTemplateResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {}
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ]
      },
      "delete": {
        "tags": [
          "Templates"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpTemplateResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {}
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Required to be true, as revisions do not support trashing.",
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/templates/{id}/autosaves": {
      "get": {
        "tags": [
          "Templates"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpTemplateResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ]
      },
      "post": {
        "tags": [
          "Templates"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpTemplateResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "slug": {
                    "description": "Unique slug identifying the template.",
                    "type": "string",
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9_\\%-]+"
                  },
                  "theme": {
                    "description": "Theme identifier for the template.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of template.",
                    "type": "string"
                  },
                  "content": {
                    "description": "Content of template.",
                    "type": [
                      "object",
                      "string"
                    ],
                    "properties": {
                      "raw": {
                        "description": "Content for the template, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit"
                        ]
                      },
                      "block_version": {
                        "description": "Version of the content block format used by the template.",
                        "type": "integer",
                        "x-context": [
                          "edit"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "title": {
                    "description": "Title of template.",
                    "type": [
                      "object",
                      "string"
                    ],
                    "properties": {
                      "raw": {
                        "description": "Title for the template, as it exists in the database.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ]
                      },
                      "rendered": {
                        "description": "HTML title for the template, transformed for display.",
                        "type": "string",
                        "x-context": [
                          "view",
                          "edit",
                          "embed"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "description": {
                    "description": "Description of template.",
                    "type": "string"
                  },
                  "status": {
                    "description": "Status of template.",
                    "type": "string",
                    "enum": [
                      "publish",
                      "future",
                      "draft",
                      "pending",
                      "private"
                    ]
                  },
                  "author": {
                    "description": "The ID for the author of the template.",
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/templates/{parent}/autosaves/{id}": {
      "get": {
        "tags": [
          "Templates"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpTemplateResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {}
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID for the autosave.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ]
      }
    },
    "/wp/v2/themes": {
      "get": {
        "tags": [
          "Themes"
        ],
        "operationId": "themesList",
        "summary": "List themes",
        "description": "Query this endpoint to retrieve a collection of themes.\n\nThe response you receive can be controlled and filtered using the URL query parameters below.\n",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Limit result set to themes assigned one or more statuses.",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "active",
                  "inactive"
                ],
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThemeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/themes/{stylesheet}": {
      "get": {
        "tags": [
          "Themes"
        ],
        "operationId": "themeGet",
        "summary": "Retrieve a theme",
        "description": "Query this endpoint to retrieve to retrieve a specific theme record.\n\nThe response you receive can be controlled and filtered using the URL query parameters below.\n",
        "parameters": [
          {
            "name": "stylesheet",
            "in": "path",
            "description": "The theme's stylesheet. This uniquely identifies the theme.",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThemeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/types": {
      "get": {
        "tags": [
          "Types"
        ],
        "operationId": "typesList",
        "summary": "List types",
        "description": "Query this endpoint to retrieve a collection of types.\n\nThe response you receive can be controlled and filtered using the URL query parameters below.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TypeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/types/{type}": {
      "get": {
        "tags": [
          "Types"
        ],
        "operationId": "typeGet",
        "summary": "Retrieve a type",
        "description": "Query this endpoint to retrieve to retrieve a specific type record.\n\nThe response you receive can be controlled and filtered using the URL query parameters below.\n",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "An alphanumeric identifier for the post type.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TypeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPage"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPerPage"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {}
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterOrder",
            "schema": {
              "default": "asc"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by user attribute.",
            "required": false,
            "schema": {
              "default": "name",
              "enum": [
                "id",
                "include",
                "name",
                "registered_date",
                "slug",
                "include_slugs",
                "email",
                "url"
              ]
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to users with one or more specific slugs.",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "roles",
            "in": "query",
            "description": "Limit result set to users matching at least one specific role provided. Accepts csv list or single role.",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "capabilities",
            "in": "query",
            "description": "Limit result set to users matching at least one specific capability provided. Accepts csv list or single capability.",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "who",
            "in": "query",
            "description": "Limit result set to users who are considered authors.",
            "required": false,
            "schema": {
              "enum": [
                "authors"
              ]
            }
          },
          {
            "name": "has_published_posts",
            "in": "query",
            "description": "Limit result set to users who have published posts.",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "enum": [
                  "post",
                  "page",
                  "attachment",
                  "nav_menu_item",
                  "wp_block",
                  "wp_template",
                  "wp_template_part",
                  "wp_global_styles",
                  "wp_navigation",
                  "wp_font_family",
                  "wp_font_face"
                ]
              }
            }
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Login name for the user.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Display name for the user.",
                    "type": "string"
                  },
                  "first_name": {
                    "description": "First name for the user.",
                    "type": "string"
                  },
                  "last_name": {
                    "description": "Last name for the user.",
                    "type": "string"
                  },
                  "email": {
                    "description": "The email address for the user.",
                    "type": "string",
                    "format": "email"
                  },
                  "url": {
                    "description": "URL of the user.",
                    "type": "string",
                    "format": "uri"
                  },
                  "description": {
                    "description": "Description of the user.",
                    "type": "string"
                  },
                  "locale": {
                    "description": "Locale for the user.",
                    "type": "string",
                    "enum": [
                      "",
                      "en_US"
                    ]
                  },
                  "nickname": {
                    "description": "The nickname for the user.",
                    "type": "string"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the user.",
                    "type": "string"
                  },
                  "roles": {
                    "description": "Roles assigned to the user.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "password": {
                    "description": "Password for the user (never included).",
                    "type": "string"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object",
                    "properties": {
                      "persisted_preferences": {
                        "type": "object",
                        "title": "",
                        "description": "",
                        "default": [],
                        "x-context": [
                          "edit"
                        ],
                        "properties": {
                          "_modified": {
                            "description": "The date and time the preferences were updated.",
                            "type": "string",
                            "format": "date-time",
                            "readOnly": false
                          }
                        },
                        "unevaluatedProperties": true
                      }
                    }
                  }
                },
                "required": [
                  "username",
                  "email",
                  "password"
                ]
              }
            }
          }
        }
      }
    },
    "/wp/v2/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the user.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the user.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Login name for the user.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Display name for the user.",
                    "type": "string"
                  },
                  "first_name": {
                    "description": "First name for the user.",
                    "type": "string"
                  },
                  "last_name": {
                    "description": "Last name for the user.",
                    "type": "string"
                  },
                  "email": {
                    "description": "The email address for the user.",
                    "type": "string",
                    "format": "email"
                  },
                  "url": {
                    "description": "URL of the user.",
                    "type": "string",
                    "format": "uri"
                  },
                  "description": {
                    "description": "Description of the user.",
                    "type": "string"
                  },
                  "locale": {
                    "description": "Locale for the user.",
                    "type": "string",
                    "enum": [
                      "",
                      "en_US"
                    ]
                  },
                  "nickname": {
                    "description": "The nickname for the user.",
                    "type": "string"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the user.",
                    "type": "string"
                  },
                  "roles": {
                    "description": "Roles assigned to the user.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "password": {
                    "description": "Password for the user (never included).",
                    "type": "string"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object",
                    "properties": {
                      "persisted_preferences": {
                        "type": "object",
                        "title": "",
                        "description": "",
                        "default": [],
                        "x-context": [
                          "edit"
                        ],
                        "properties": {
                          "_modified": {
                            "description": "The date and time the preferences were updated.",
                            "type": "string",
                            "format": "date-time",
                            "readOnly": false
                          }
                        },
                        "unevaluatedProperties": true
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the user.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Login name for the user.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Display name for the user.",
                    "type": "string"
                  },
                  "first_name": {
                    "description": "First name for the user.",
                    "type": "string"
                  },
                  "last_name": {
                    "description": "Last name for the user.",
                    "type": "string"
                  },
                  "email": {
                    "description": "The email address for the user.",
                    "type": "string",
                    "format": "email"
                  },
                  "url": {
                    "description": "URL of the user.",
                    "type": "string",
                    "format": "uri"
                  },
                  "description": {
                    "description": "Description of the user.",
                    "type": "string"
                  },
                  "locale": {
                    "description": "Locale for the user.",
                    "type": "string",
                    "enum": [
                      "",
                      "en_US"
                    ]
                  },
                  "nickname": {
                    "description": "The nickname for the user.",
                    "type": "string"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the user.",
                    "type": "string"
                  },
                  "roles": {
                    "description": "Roles assigned to the user.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "password": {
                    "description": "Password for the user (never included).",
                    "type": "string"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object",
                    "properties": {
                      "persisted_preferences": {
                        "type": "object",
                        "title": "",
                        "description": "",
                        "default": [],
                        "x-context": [
                          "edit"
                        ],
                        "properties": {
                          "_modified": {
                            "description": "The date and time the preferences were updated.",
                            "type": "string",
                            "format": "date-time",
                            "readOnly": false
                          }
                        },
                        "unevaluatedProperties": true
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the user.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Login name for the user.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Display name for the user.",
                    "type": "string"
                  },
                  "first_name": {
                    "description": "First name for the user.",
                    "type": "string"
                  },
                  "last_name": {
                    "description": "Last name for the user.",
                    "type": "string"
                  },
                  "email": {
                    "description": "The email address for the user.",
                    "type": "string",
                    "format": "email"
                  },
                  "url": {
                    "description": "URL of the user.",
                    "type": "string",
                    "format": "uri"
                  },
                  "description": {
                    "description": "Description of the user.",
                    "type": "string"
                  },
                  "locale": {
                    "description": "Locale for the user.",
                    "type": "string",
                    "enum": [
                      "",
                      "en_US"
                    ]
                  },
                  "nickname": {
                    "description": "The nickname for the user.",
                    "type": "string"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the user.",
                    "type": "string"
                  },
                  "roles": {
                    "description": "Roles assigned to the user.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "password": {
                    "description": "Password for the user (never included).",
                    "type": "string"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object",
                    "properties": {
                      "persisted_preferences": {
                        "type": "object",
                        "title": "",
                        "description": "",
                        "default": [],
                        "x-context": [
                          "edit"
                        ],
                        "properties": {
                          "_modified": {
                            "description": "The date and time the preferences were updated.",
                            "type": "string",
                            "format": "date-time",
                            "readOnly": false
                          }
                        },
                        "unevaluatedProperties": true
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the user.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Required to be true, as users do not support trashing.",
                    "default": false,
                    "type": "boolean"
                  },
                  "reassign": {
                    "description": "Reassign the deleted user's posts and links to this user ID.",
                    "type": "integer"
                  }
                },
                "required": [
                  "reassign"
                ]
              }
            }
          }
        }
      }
    },
    "/wp/v2/users/me": {
      "get": {
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Login name for the user.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Display name for the user.",
                    "type": "string"
                  },
                  "first_name": {
                    "description": "First name for the user.",
                    "type": "string"
                  },
                  "last_name": {
                    "description": "Last name for the user.",
                    "type": "string"
                  },
                  "email": {
                    "description": "The email address for the user.",
                    "type": "string",
                    "format": "email"
                  },
                  "url": {
                    "description": "URL of the user.",
                    "type": "string",
                    "format": "uri"
                  },
                  "description": {
                    "description": "Description of the user.",
                    "type": "string"
                  },
                  "locale": {
                    "description": "Locale for the user.",
                    "type": "string",
                    "enum": [
                      "",
                      "en_US"
                    ]
                  },
                  "nickname": {
                    "description": "The nickname for the user.",
                    "type": "string"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the user.",
                    "type": "string"
                  },
                  "roles": {
                    "description": "Roles assigned to the user.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "password": {
                    "description": "Password for the user (never included).",
                    "type": "string"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object",
                    "properties": {
                      "persisted_preferences": {
                        "type": "object",
                        "title": "",
                        "description": "",
                        "default": [],
                        "x-context": [
                          "edit"
                        ],
                        "properties": {
                          "_modified": {
                            "description": "The date and time the preferences were updated.",
                            "type": "string",
                            "format": "date-time",
                            "readOnly": false
                          }
                        },
                        "unevaluatedProperties": true
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Login name for the user.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Display name for the user.",
                    "type": "string"
                  },
                  "first_name": {
                    "description": "First name for the user.",
                    "type": "string"
                  },
                  "last_name": {
                    "description": "Last name for the user.",
                    "type": "string"
                  },
                  "email": {
                    "description": "The email address for the user.",
                    "type": "string",
                    "format": "email"
                  },
                  "url": {
                    "description": "URL of the user.",
                    "type": "string",
                    "format": "uri"
                  },
                  "description": {
                    "description": "Description of the user.",
                    "type": "string"
                  },
                  "locale": {
                    "description": "Locale for the user.",
                    "type": "string",
                    "enum": [
                      "",
                      "en_US"
                    ]
                  },
                  "nickname": {
                    "description": "The nickname for the user.",
                    "type": "string"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the user.",
                    "type": "string"
                  },
                  "roles": {
                    "description": "Roles assigned to the user.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "password": {
                    "description": "Password for the user (never included).",
                    "type": "string"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object",
                    "properties": {
                      "persisted_preferences": {
                        "type": "object",
                        "title": "",
                        "description": "",
                        "default": [],
                        "x-context": [
                          "edit"
                        ],
                        "properties": {
                          "_modified": {
                            "description": "The date and time the preferences were updated.",
                            "type": "string",
                            "format": "date-time",
                            "readOnly": false
                          }
                        },
                        "unevaluatedProperties": true
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Login name for the user.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Display name for the user.",
                    "type": "string"
                  },
                  "first_name": {
                    "description": "First name for the user.",
                    "type": "string"
                  },
                  "last_name": {
                    "description": "Last name for the user.",
                    "type": "string"
                  },
                  "email": {
                    "description": "The email address for the user.",
                    "type": "string",
                    "format": "email"
                  },
                  "url": {
                    "description": "URL of the user.",
                    "type": "string",
                    "format": "uri"
                  },
                  "description": {
                    "description": "Description of the user.",
                    "type": "string"
                  },
                  "locale": {
                    "description": "Locale for the user.",
                    "type": "string",
                    "enum": [
                      "",
                      "en_US"
                    ]
                  },
                  "nickname": {
                    "description": "The nickname for the user.",
                    "type": "string"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the user.",
                    "type": "string"
                  },
                  "roles": {
                    "description": "Roles assigned to the user.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "password": {
                    "description": "Password for the user (never included).",
                    "type": "string"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object",
                    "properties": {
                      "persisted_preferences": {
                        "type": "object",
                        "title": "",
                        "description": "",
                        "default": [],
                        "x-context": [
                          "edit"
                        ],
                        "properties": {
                          "_modified": {
                            "description": "The date and time the preferences were updated.",
                            "type": "string",
                            "format": "date-time",
                            "readOnly": false
                          }
                        },
                        "unevaluatedProperties": true
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Required to be true, as users do not support trashing.",
                    "default": false,
                    "type": "boolean"
                  },
                  "reassign": {
                    "description": "Reassign the deleted user's posts and links to this user ID.",
                    "type": "integer"
                  }
                },
                "required": [
                  "reassign"
                ]
              }
            }
          }
        }
      }
    },
    "/wp/v2/users/{user_id}/application-passwords": {
      "get": {
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationPasswordResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationPasswordResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "app_id": {
                    "description": "A UUID provided by the application to uniquely identify it. It is recommended to use an UUID v5 with the URL or DNS namespace.",
                    "type": "string",
                    "format": "uuid"
                  },
                  "name": {
                    "description": "The name of the application password.",
                    "type": "string",
                    "minLength": 1,
                    "pattern": ".*\\S.*"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationPasswordResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ]
      }
    },
    "/wp/v2/users/{user_id}/application-passwords/introspect": {
      "get": {
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationPasswordResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ]
      }
    },
    "/wp/v2/users/{user_id}/application-passwords/{uuid}": {
      "get": {
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationPasswordResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          },
          {
            "name": "uuid",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationPasswordResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          },
          {
            "name": "uuid",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "app_id": {
                    "description": "A UUID provided by the application to uniquely identify it. It is recommended to use an UUID v5 with the URL or DNS namespace.",
                    "type": "string",
                    "format": "uuid"
                  },
                  "name": {
                    "description": "The name of the application password.",
                    "type": "string",
                    "minLength": 1,
                    "pattern": ".*\\S.*"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationPasswordResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          },
          {
            "name": "uuid",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "app_id": {
                    "description": "A UUID provided by the application to uniquely identify it. It is recommended to use an UUID v5 with the URL or DNS namespace.",
                    "type": "string",
                    "format": "uuid"
                  },
                  "name": {
                    "description": "The name of the application password.",
                    "type": "string",
                    "minLength": 1,
                    "pattern": ".*\\S.*"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationPasswordResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          },
          {
            "name": "uuid",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "app_id": {
                    "description": "A UUID provided by the application to uniquely identify it. It is recommended to use an UUID v5 with the URL or DNS namespace.",
                    "type": "string",
                    "format": "uuid"
                  },
                  "name": {
                    "description": "The name of the application password.",
                    "type": "string",
                    "minLength": 1,
                    "pattern": ".*\\S.*"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationPasswordResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          },
          {
            "name": "uuid",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ]
      }
    },
    "/wp/v2/widget-types": {
      "get": {
        "tags": [
          "Widget types"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetTypeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/widget-types/{id}": {
      "get": {
        "tags": [
          "Widget types"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The widget type id.",
            "required": true,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetTypeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/widget-types/{id}/encode": {
      "post": {
        "tags": [
          "Widget types"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The widget type id.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "instance": {
                    "description": "Current instance settings of the widget.",
                    "type": "object"
                  },
                  "form_data": {
                    "description": "Serialized widget form data to encode into instance settings.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/wp/v2/widget-types/{id}/render": {
      "post": {
        "tags": [
          "Widget types"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The widget type id.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "instance": {
                    "description": "Current instance settings of the widget.",
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/wp/v2/widgets": {
      "get": {
        "tags": [
          "Widgets"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "name": "sidebar",
            "in": "query",
            "description": "The sidebar to return widgets for.",
            "required": false,
            "schema": {}
          }
        ]
      },
      "post": {
        "tags": [
          "Widgets"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "description": "Unique identifier for the widget.",
                    "type": "string"
                  },
                  "id_base": {
                    "description": "The type of the widget. Corresponds to ID in widget-types endpoint.",
                    "type": "string"
                  },
                  "sidebar": {
                    "description": "The sidebar the widget belongs to.",
                    "default": "wp_inactive_widgets",
                    "type": "string"
                  },
                  "instance": {
                    "description": "Instance settings of the widget, if supported.",
                    "type": "object",
                    "properties": {
                      "encoded": {
                        "description": "Base64 encoded representation of the instance settings.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "hash": {
                        "description": "Cryptographic hash of the instance settings.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "raw": {
                        "description": "Unencoded instance settings, if supported.",
                        "type": "object",
                        "x-context": [
                          "edit"
                        ]
                      }
                    }
                  },
                  "form_data": {
                    "description": "URL-encoded form data from the widget admin form. Used to update a widget that does not support instance. Write only.",
                    "type": "string"
                  }
                },
                "required": [
                  "sidebar"
                ]
              }
            }
          }
        }
      }
    },
    "/wp/v2/widgets/{id}": {
      "get": {
        "tags": [
          "Widgets"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "default": "view",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ]
      },
      "post": {
        "tags": [
          "Widgets"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the widget.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "id_base": {
                    "description": "The type of the widget. Corresponds to ID in widget-types endpoint.",
                    "type": "string"
                  },
                  "sidebar": {
                    "description": "The sidebar the widget belongs to.",
                    "type": "string"
                  },
                  "instance": {
                    "description": "Instance settings of the widget, if supported.",
                    "type": "object",
                    "properties": {
                      "encoded": {
                        "description": "Base64 encoded representation of the instance settings.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "hash": {
                        "description": "Cryptographic hash of the instance settings.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "raw": {
                        "description": "Unencoded instance settings, if supported.",
                        "type": "object",
                        "x-context": [
                          "edit"
                        ]
                      }
                    }
                  },
                  "form_data": {
                    "description": "URL-encoded form data from the widget admin form. Used to update a widget that does not support instance. Write only.",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Widgets"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the widget.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "id_base": {
                    "description": "The type of the widget. Corresponds to ID in widget-types endpoint.",
                    "type": "string"
                  },
                  "sidebar": {
                    "description": "The sidebar the widget belongs to.",
                    "type": "string"
                  },
                  "instance": {
                    "description": "Instance settings of the widget, if supported.",
                    "type": "object",
                    "properties": {
                      "encoded": {
                        "description": "Base64 encoded representation of the instance settings.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "hash": {
                        "description": "Cryptographic hash of the instance settings.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "raw": {
                        "description": "Unencoded instance settings, if supported.",
                        "type": "object",
                        "x-context": [
                          "edit"
                        ]
                      }
                    }
                  },
                  "form_data": {
                    "description": "URL-encoded form data from the widget admin form. Used to update a widget that does not support instance. Write only.",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Widgets"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the widget.",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "id_base": {
                    "description": "The type of the widget. Corresponds to ID in widget-types endpoint.",
                    "type": "string"
                  },
                  "sidebar": {
                    "description": "The sidebar the widget belongs to.",
                    "type": "string"
                  },
                  "instance": {
                    "description": "Instance settings of the widget, if supported.",
                    "type": "object",
                    "properties": {
                      "encoded": {
                        "description": "Base64 encoded representation of the instance settings.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "hash": {
                        "description": "Cryptographic hash of the instance settings.",
                        "type": "string",
                        "x-context": [
                          "edit"
                        ]
                      },
                      "raw": {
                        "description": "Unencoded instance settings, if supported.",
                        "type": "object",
                        "x-context": [
                          "edit"
                        ]
                      }
                    }
                  },
                  "form_data": {
                    "description": "URL-encoded form data from the widget admin form. Used to update a widget that does not support instance. Write only.",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Widgets"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Whether to force removal of the widget, or move it to the inactive sidebar.",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/wp_pattern_category": {
      "get": {
        "tags": [
          "Pattern category"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPage"
          },
          {
            "$ref": "#/components/parameters/QueryParameterPerPage"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {}
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {}
          },
          {
            "$ref": "#/components/parameters/QueryParameterOrder",
            "schema": {
              "default": "asc"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by term attribute.",
            "required": false,
            "schema": {
              "default": "name",
              "enum": [
                "id",
                "include",
                "name",
                "slug",
                "include_slugs",
                "term_group",
                "description",
                "count"
              ]
            }
          },
          {
            "name": "hide_empty",
            "in": "query",
            "description": "Whether to hide terms not assigned to any posts.",
            "required": false,
            "schema": {}
          },
          {
            "name": "post",
            "in": "query",
            "description": "Limit result set to terms assigned to a specific post.",
            "required": false,
            "schema": {}
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to terms with one or more specific slugs.",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpPatternCategoryResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Pattern category"
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "HTML description of the term.",
                    "type": "string"
                  },
                  "name": {
                    "description": "HTML title for the term.",
                    "type": "string"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the term unique to its type.",
                    "type": "string"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpPatternCategoryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wp/v2/wp_pattern_category/{id}": {
      "get": {
        "tags": [
          "Pattern category"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PathParameterId"
          },
          {
            "$ref": "#/components/parameters/QueryParameterContext"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpPatternCategoryResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Pattern category"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PathParameterId"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "HTML description of the term.",
                    "type": "string"
                  },
                  "name": {
                    "description": "HTML title for the term.",
                    "type": "string"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the term unique to its type.",
                    "type": "string"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpPatternCategoryResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Pattern category"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PathParameterId"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "HTML description of the term.",
                    "type": "string"
                  },
                  "name": {
                    "description": "HTML title for the term.",
                    "type": "string"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the term unique to its type.",
                    "type": "string"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpPatternCategoryResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Pattern category"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PathParameterId"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "HTML description of the term.",
                    "type": "string"
                  },
                  "name": {
                    "description": "HTML title for the term.",
                    "type": "string"
                  },
                  "slug": {
                    "description": "An alphanumeric identifier for the term unique to its type.",
                    "type": "string"
                  },
                  "meta": {
                    "description": "Meta fields.",
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpPatternCategoryResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Pattern category"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PathParameterId"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Required to be true, as terms do not support trashing.",
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WpPatternCategoryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wp-block-editor/v1": {
      "get": {
        "tags": [
          "Block editor"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "default": "wp-block-editor/v1"
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "default": "view"
            }
          }
        ]
      }
    },
    "/wp-block-editor/v1/url-details": {
      "get": {
        "tags": [
          "Block editor"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "The URL to process.",
            "required": true,
            "schema": {
              "format": "uri"
            }
          }
        ]
      }
    },
    "/wp-block-editor/v1/export": {
      "get": {
        "tags": [
          "Block editor"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/wp-block-editor/v1/navigation-fallback": {
      "get": {
        "tags": [
          "Block editor"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NavigationFallbackResponse"
                }
              }
            }
          }
        }
      }
    },
    "/wp-site-health/v1": {
      "get": {
        "tags": [
          "Site health"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "default": "wp-site-health/v1"
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "default": "view"
            }
          }
        ]
      }
    },
    "/wp-site-health/v1/tests/background-updates": {
      "get": {
        "tags": [
          "Site health"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp-site-health-test"
                }
              }
            }
          }
        }
      }
    },
    "/wp-site-health/v1/tests/loopback-requests": {
      "get": {
        "tags": [
          "Site health"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp-site-health-test"
                }
              }
            }
          }
        }
      }
    },
    "/wp-site-health/v1/tests/https-status": {
      "get": {
        "tags": [
          "Site health"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp-site-health-test"
                }
              }
            }
          }
        }
      }
    },
    "/wp-site-health/v1/tests/dotorg-communication": {
      "get": {
        "tags": [
          "Site health"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp-site-health-test"
                }
              }
            }
          }
        }
      }
    },
    "/wp-site-health/v1/tests/authorization-header": {
      "get": {
        "tags": [
          "Site health"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp-site-health-test"
                }
              }
            }
          }
        }
      }
    },
    "/wp-site-health/v1/directory-sizes": {
      "get": {
        "tags": [
          "Site health"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/wp-site-health/v1/tests/page-cache": {
      "get": {
        "tags": [
          "Site health"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "QueryParameterContextView": {
        "name": "context",
        "in": "query",
        "description": "Scope under which the request is made; determines fields present in response, limited to view.\n",
        "required": false,
        "schema": {
          "default": "view",
          "enum": [
            "view"
          ]
        }
      },
      "QueryParameterPage": {
        "name": "page",
        "in": "query",
        "description": "Current page of the collection.",
        "required": false,
        "schema": {
          "default": 1,
          "minimum": 1
        }
      },
      "QueryParameterPerPage": {
        "name": "per_page",
        "in": "query",
        "description": "Maximum number of items to be returned in result set.",
        "required": false,
        "schema": {
          "default": 10,
          "minimum": 1,
          "maximum": 100
        }
      },
      "QueryParameterContext": {
        "name": "context",
        "in": "query",
        "description": "Scope under which the request is made; determines fields present in response.",
        "required": false,
        "schema": {
          "default": "view",
          "enum": [
            "view",
            "embed",
            "edit"
          ]
        }
      },
      "QueryParameterOrder": {
        "name": "order",
        "in": "query",
        "description": "Order sort attribute ascending or descending.",
        "required": false,
        "schema": {
          "default": "desc",
          "enum": [
            "asc",
            "desc"
          ]
        }
      },
      "PathParameterId": {
        "name": "id",
        "in": "path",
        "description": "Unique identifier for the term.",
        "required": true,
        "schema": {}
      }
    },
    "schemas": {
      "BlockDirectoryItemBase": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "type": "object",
        "properties": {
          "name": {
            "description": "The block name, in namespace/block-name format.",
            "type": "string"
          },
          "title": {
            "description": "The block title, in human readable format.",
            "type": "string"
          },
          "description": {
            "description": "A short description of the block, in human readable format.",
            "type": "string"
          },
          "id": {
            "description": "The block slug.",
            "type": "string"
          },
          "rating": {
            "description": "The star rating of the block.",
            "type": "number"
          },
          "rating_count": {
            "description": "The number of ratings.",
            "type": "integer"
          },
          "active_installs": {
            "description": "The number of sites that have activated this block.",
            "type": "integer"
          },
          "author_block_rating": {
            "description": "The average rating of blocks published by the same author.",
            "type": "number"
          },
          "author_block_count": {
            "description": "The number of blocks published by the same author.",
            "type": "integer"
          },
          "author": {
            "description": "The WordPress.org username of the block author.",
            "type": "string"
          },
          "icon": {
            "description": "The block icon.",
            "type": "string",
            "format": "uri"
          },
          "last_updated": {
            "description": "The date when the block was last updated.",
            "type": "string",
            "format": "date-time"
          },
          "humanized_updated": {
            "description": "The date when the block was last updated, in fuzzy human readable format.",
            "type": "string"
          }
        }
      },
      "BlockDirectoryItemView": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "allOf": [
          {
            "$ref": "#/components/schemas/BlockDirectoryItemBase"
          }
        ]
      },
      "BlockDirectoryItemResponse": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "oneOf": [
          {
            "$ref": "#/components/schemas/BlockDirectoryItemView"
          }
        ]
      },
      "BlockPatternsResponse": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "type": "object",
        "properties": {
          "name": {
            "description": "The pattern name.",
            "type": "string",
            "readOnly": true
          },
          "title": {
            "description": "The pattern title, in human readable format.",
            "type": "string",
            "readOnly": true
          },
          "content": {
            "description": "The pattern content.",
            "type": "string",
            "readOnly": true
          },
          "description": {
            "description": "The pattern detailed description.",
            "type": "string",
            "readOnly": true
          },
          "viewport_width": {
            "description": "The pattern viewport width for inserter preview.",
            "type": "number",
            "readOnly": true
          },
          "inserter": {
            "description": "Determines whether the pattern is visible in inserter.",
            "type": "boolean",
            "readOnly": true
          },
          "categories": {
            "description": "The pattern category slugs.",
            "type": "array",
            "readOnly": true
          },
          "keywords": {
            "description": "The pattern keywords.",
            "type": "array",
            "readOnly": true
          },
          "block_types": {
            "description": "Block types that the pattern is intended to be used with.",
            "type": "array",
            "readOnly": true
          },
          "post_types": {
            "description": "An array of post types that the pattern is restricted to be used with.",
            "type": "array",
            "readOnly": true
          },
          "template_types": {
            "description": "An array of template types where the pattern fits.",
            "type": "array",
            "readOnly": true
          },
          "source": {
            "description": "Where the pattern comes from e.g. core.",
            "type": "string",
            "readOnly": true,
            "enum": [
              "core",
              "plugin",
              "theme",
              "pattern-directory/core",
              "pattern-directory/theme",
              "pattern-directory/featured"
            ]
          }
        }
      },
      "BlockPatternCategoryResponse": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "type": "object",
        "properties": {
          "name": {
            "description": "The category name.",
            "type": "string",
            "readOnly": true
          },
          "label": {
            "description": "The category label, in human readable format.",
            "type": "string",
            "readOnly": true
          },
          "description": {
            "description": "The category description, in human readable format.",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "RenderedBlockBase": {
        "type": "object",
        "required": [
          "rendered"
        ],
        "properties": {
          "rendered": {
            "description": "The rendered block.",
            "type": "string"
          }
        }
      },
      "RenderedBlockEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RenderedBlockBase"
          }
        ]
      },
      "RenderedBlockResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/RenderedBlockEdit"
          }
        ]
      },
      "BlockTypeBase": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "api_version": {
            "description": "Version of block API.",
            "type": "integer",
            "default": 1,
            "readOnly": true
          },
          "title": {
            "description": "Title of block type.",
            "type": "string",
            "default": "",
            "readOnly": true
          },
          "name": {
            "description": "Unique name identifying the block type.",
            "type": "string",
            "pattern": "^[a-z][a-z0-9-]*/[a-z][a-z0-9-]*$",
            "readOnly": true
          },
          "description": {
            "description": "Description of block type.",
            "type": "string",
            "default": "",
            "readOnly": true
          },
          "icon": {
            "description": "Icon of block type.",
            "type": [
              "string",
              "null"
            ],
            "default": null,
            "readOnly": true
          },
          "attributes": {
            "description": "Block attributes.",
            "type": [
              "object",
              "null"
            ],
            "default": null,
            "readOnly": true
          },
          "provides_x_context": {
            "description": "Context provided by blocks of this type.",
            "type": "object",
            "default": [],
            "readOnly": true
          },
          "uses_x_context": {
            "description": "Context values inherited by blocks of this type.",
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "readOnly": true
          },
          "selectors": {
            "description": "Custom CSS selectors.",
            "type": "object",
            "default": [],
            "readOnly": true
          },
          "supports": {
            "description": "Block supports.",
            "type": "object",
            "default": [],
            "readOnly": true
          },
          "category": {
            "description": "Block category.",
            "type": [
              "string",
              "null"
            ],
            "default": null,
            "readOnly": true
          },
          "is_dynamic": {
            "description": "Is the block dynamically rendered.",
            "type": "boolean",
            "default": false,
            "readOnly": true
          },
          "editor_script_handles": {
            "description": "Editor script handles.",
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "readOnly": true
          },
          "script_handles": {
            "description": "Public facing and editor script handles.",
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "readOnly": true
          },
          "view_script_handles": {
            "description": "Public facing script handles.",
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "readOnly": true
          },
          "editor_style_handles": {
            "description": "Editor style handles.",
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "readOnly": true
          },
          "style_handles": {
            "description": "Public facing and editor style handles.",
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "readOnly": true
          },
          "view_style_handles": {
            "description": "Public facing style handles.",
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "readOnly": true
          },
          "styles": {
            "description": "Block style variations.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "description": "Unique name identifying the style.",
                  "type": "string"
                },
                "label": {
                  "description": "The human-readable label for the style.",
                  "type": "string"
                },
                "inline_style": {
                  "description": "Inline CSS code that registers the CSS class required for the style.",
                  "type": "string"
                },
                "style_handle": {
                  "description": "Contains the handle that defines the block style.",
                  "type": "string"
                }
              },
              "required": [
                "name"
              ]
            },
            "default": [],
            "readOnly": true
          },
          "variations": {
            "description": "Block variations.",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name",
                "title"
              ],
              "properties": {
                "name": {
                  "description": "The unique and machine-readable name.",
                  "type": "string"
                },
                "title": {
                  "description": "A human-readable variation title.",
                  "type": "string"
                },
                "description": {
                  "description": "A detailed variation description.",
                  "type": "string"
                },
                "category": {
                  "description": "Block category.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "default": null,
                  "readOnly": true
                },
                "icon": {
                  "description": "Icon of block type.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "default": null,
                  "readOnly": true
                },
                "isDefault": {
                  "description": "Indicates whether the current variation is the default one.",
                  "type": "boolean",
                  "default": false
                },
                "attributes": {
                  "description": "The initial values for attributes.",
                  "type": "object"
                },
                "innerBlocks": {
                  "description": "The list of inner blocks used in the example.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "The name of the inner block.",
                        "type": "string",
                        "pattern": "^[a-z][a-z0-9-]*/[a-z][a-z0-9-]*$"
                      },
                      "attributes": {
                        "description": "The attributes of the inner block.",
                        "type": "object"
                      },
                      "innerBlocks": {
                        "description": "A list of the inner block's own inner blocks.",
                        "type": "array"
                      }
                    },
                    "required": [
                      "name"
                    ]
                  }
                },
                "example": {
                  "description": "Block example.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "attributes": {
                      "description": "The attributes used in the example.",
                      "type": "object"
                    },
                    "innerBlocks": {
                      "description": "The list of inner blocks used in the example.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "The name of the inner block.",
                            "type": "string",
                            "pattern": "^[a-z][a-z0-9-]*/[a-z][a-z0-9-]*$"
                          },
                          "attributes": {
                            "description": "The attributes of the inner block.",
                            "type": "object"
                          },
                          "innerBlocks": {
                            "description": "A list of the inner block's own inner blocks.",
                            "type": "array"
                          }
                        },
                        "required": [
                          "name"
                        ]
                      }
                    }
                  },
                  "readOnly": true
                },
                "scope": {
                  "description": "The list of scopes where the variation is applicable.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "default": null,
                  "items": {
                    "type": "string",
                    "enum": [
                      "block",
                      "inserter",
                      "transform"
                    ]
                  },
                  "readOnly": true
                },
                "keywords": {
                  "description": "Block keywords.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "default": [],
                  "readOnly": true
                }
              }
            }
          }
        }
      },
      "BlockTypeView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BlockTypeBase"
          }
        ]
      },
      "BlockTypeEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BlockTypeBase"
          }
        ]
      },
      "BlockTypeEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BlockTypeBase"
          }
        ]
      },
      "BlockTypeResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/BlockTypeView"
          },
          {
            "$ref": "#/components/schemas/BlockTypeEmbed"
          },
          {
            "$ref": "#/components/schemas/BlockTypeEdit"
          }
        ]
      },
      "WPBlockBase": {
        "type": "object",
        "properties": {
          "date": {
            "description": "The date the post was published, in the site's timezone.",
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "date_gmt": {
            "description": "The date the post was published, as GMT.",
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "guid": {
            "description": "The globally unique identifier for the post.",
            "type": "object",
            "readOnly": true,
            "properties": {
              "raw": {
                "description": "GUID for the post, as it exists in the database.",
                "type": "string"
              },
              "rendered": {
                "description": "GUID for the post, transformed for display.",
                "type": "string"
              }
            }
          },
          "id": {
            "description": "Unique identifier for the post.",
            "type": "integer",
            "readOnly": true
          },
          "link": {
            "description": "URL to the post.",
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "modified": {
            "description": "The date the post was last modified, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified_gmt": {
            "description": "The date the post was last modified, as GMT.",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "slug": {
            "description": "An alphanumeric identifier for the post unique to its type.",
            "type": "string"
          },
          "status": {
            "description": "A named status for the post.",
            "type": "string",
            "enum": [
              "publish",
              "future",
              "draft",
              "pending",
              "private"
            ]
          },
          "type": {
            "description": "Type of post.",
            "type": "string",
            "readOnly": true
          },
          "password": {
            "description": "A password to protect access to the content and excerpt.",
            "type": "string"
          },
          "title": {
            "description": "The title for the post.",
            "type": "object",
            "properties": {
              "raw": {
                "description": "Title for the post, as it exists in the database.",
                "type": "string"
              }
            }
          },
          "content": {
            "description": "The content for the post.",
            "type": "object",
            "properties": {
              "raw": {
                "description": "Content for the post, as it exists in the database.",
                "type": "string"
              },
              "block_version": {
                "description": "Version of the content block format used by the post.",
                "type": "integer",
                "readOnly": true
              },
              "protected": {
                "description": "Whether the content is protected with a password.",
                "type": "boolean",
                "readOnly": true
              }
            }
          },
          "excerpt": {
            "description": "The excerpt for the post.",
            "type": "object",
            "properties": {
              "raw": {
                "description": "Excerpt for the post, as it exists in the database.",
                "type": "string"
              },
              "rendered": {
                "description": "HTML excerpt for the post, transformed for display.",
                "type": "string",
                "readOnly": true
              },
              "protected": {
                "description": "Whether the excerpt is protected with a password.",
                "type": "boolean",
                "readOnly": true
              }
            }
          },
          "meta": {
            "description": "Meta fields.",
            "type": "object",
            "properties": {
              "wp_pattern_sync_status": {
                "type": "string",
                "enum": [
                  "partial",
                  "unsynced"
                ]
              },
              "footnotes": {
                "type": "string"
              }
            }
          },
          "template": {
            "description": "The theme file to use to display the post.",
            "type": "string"
          },
          "wp_pattern_category": {
            "description": "The terms assigned to the post in the wp_pattern_category taxonomy.",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "WPBlockView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WPBlockBase"
          }
        ]
      },
      "id": {
        "description": "Unique identifier for the post.",
        "type": "integer",
        "readOnly": true
      },
      "link": {
        "description": "URL to the post.",
        "type": "string",
        "format": "uri",
        "readOnly": true
      },
      "title": {
        "description": "The title for the post.",
        "type": "object",
        "properties": {
          "raw": {
            "description": "Title for the post, as it exists in the database.",
            "type": "string"
          }
        }
      },
      "WPBlockEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WPBlockBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/id"
              },
              "link": {
                "$ref": "#/components/schemas/link"
              },
              "title": {
                "$ref": "#/components/schemas/title"
              }
            }
          }
        ]
      },
      "WPBlockEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WPBlockBase"
          }
        ]
      },
      "WPBlockResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/WPBlockView"
          },
          {
            "$ref": "#/components/schemas/WPBlockEmbed"
          },
          {
            "$ref": "#/components/schemas/WPBlockEdit"
          }
        ]
      },
      "WPBlockRevisionBase": {
        "type": "object",
        "properties": {
          "author": {
            "description": "The ID for the author of the revision.",
            "type": "integer"
          },
          "date": {
            "description": "The date the revision was published, in the site's timezone.",
            "type": "string",
            "format": "date-time"
          },
          "date_gmt": {
            "description": "The date the revision was published, as GMT.",
            "type": "string",
            "format": "date-time"
          },
          "guid": {
            "description": "The globally unique identifier for the post.",
            "type": "object",
            "readOnly": true,
            "properties": {
              "raw": {
                "description": "GUID for the post, as it exists in the database.",
                "type": "string"
              },
              "rendered": {
                "description": "GUID for the post, transformed for display.",
                "type": "string"
              }
            }
          },
          "id": {
            "description": "Unique identifier for the revision.",
            "type": "integer"
          },
          "modified": {
            "description": "The date the revision was last modified, in the site's timezone.",
            "type": "string",
            "format": "date-time"
          },
          "modified_gmt": {
            "description": "The date the revision was last modified, as GMT.",
            "type": "string",
            "format": "date-time"
          },
          "parent": {
            "description": "The ID for the parent of the revision.",
            "type": "integer"
          },
          "slug": {
            "description": "An alphanumeric identifier for the revision unique to its type.",
            "type": "string"
          },
          "title": {
            "description": "The title for the post.",
            "type": "object",
            "properties": {
              "raw": {
                "description": "Title for the post, as it exists in the database.",
                "type": "string"
              }
            }
          },
          "content": {
            "description": "The content for the post.",
            "type": "object",
            "properties": {
              "raw": {
                "description": "Content for the post, as it exists in the database.",
                "type": "string"
              },
              "block_version": {
                "description": "Version of the content block format used by the post.",
                "type": "integer",
                "readOnly": true
              },
              "protected": {
                "description": "Whether the content is protected with a password.",
                "type": "boolean",
                "readOnly": true
              }
            }
          },
          "excerpt": {
            "description": "The excerpt for the post.",
            "type": "object",
            "properties": {
              "raw": {
                "description": "Excerpt for the post, as it exists in the database.",
                "type": "string"
              },
              "rendered": {
                "description": "HTML excerpt for the post, transformed for display.",
                "type": "string",
                "readOnly": true
              },
              "protected": {
                "description": "Whether the excerpt is protected with a password.",
                "type": "boolean",
                "readOnly": true
              }
            }
          },
          "meta": {
            "description": "Meta fields.",
            "type": "object",
            "properties": {
              "wp_pattern_sync_status": {
                "type": "string"
              },
              "footnotes": {
                "type": "string"
              }
            }
          },
          "preview_link": {
            "description": "Preview link for the post.",
            "type": "string",
            "format": "uri",
            "readOnly": true
          }
        }
      },
      "WPBlockRevisionView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WPBlockRevisionBase"
          }
        ]
      },
      "properties-id": {
        "description": "Unique identifier for the revision.",
        "type": "integer"
      },
      "author": {
        "description": "The ID for the author of the revision.",
        "type": "integer"
      },
      "date": {
        "description": "The date the revision was published, in the site's timezone.",
        "type": "string",
        "format": "date-time"
      },
      "WPBlockRevisionEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WPBlockRevisionBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/properties-id"
              },
              "author": {
                "$ref": "#/components/schemas/author"
              },
              "date": {
                "$ref": "#/components/schemas/date"
              }
            }
          }
        ]
      },
      "WPBlockRevisionEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WPBlockRevisionBase"
          }
        ]
      },
      "WPBlockRevisionResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/WPBlockRevisionView"
          },
          {
            "$ref": "#/components/schemas/WPBlockRevisionEmbed"
          },
          {
            "$ref": "#/components/schemas/WPBlockRevisionEdit"
          }
        ]
      },
      "CategoryBase": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the term.",
            "type": "integer",
            "readOnly": true
          },
          "link": {
            "description": "URL of the term.",
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "name": {
            "description": "HTML title for the term.",
            "type": "string"
          },
          "slug": {
            "description": "An alphanumeric identifier for the term unique to its type.",
            "type": "string"
          },
          "taxonomy": {
            "description": "Type attribution for the term.",
            "type": "string",
            "enum": [
              "category"
            ],
            "readOnly": true
          }
        }
      },
      "CategoryViewEdit": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "allOf": [
          {
            "$ref": "#/components/schemas/CategoryBase"
          },
          {
            "type": "object",
            "properties": {
              "count": {
                "description": "Number of published posts for the term.",
                "type": "integer",
                "readOnly": true
              },
              "description": {
                "description": "HTML description of the term.",
                "type": "string"
              },
              "parent": {
                "description": "The parent term ID.",
                "type": "integer"
              },
              "meta": {
                "description": "Meta fields.",
                "type": "object"
              }
            }
          }
        ]
      },
      "CategoryEmbed": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "allOf": [
          {
            "$ref": "#/components/schemas/CategoryBase"
          },
          {
            "type": "object",
            "properties": {
              "slug": {}
            }
          }
        ]
      },
      "CategoryResponse": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "oneOf": [
          {
            "$ref": "#/components/schemas/CategoryViewEdit"
          },
          {
            "$ref": "#/components/schemas/CategoryEmbed"
          }
        ]
      },
      "CommentBase": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the comment.",
            "type": "integer",
            "readOnly": true
          },
          "author": {
            "description": "The ID of the user object, if author was a user.",
            "type": "integer"
          },
          "author_name": {
            "description": "Display name for the comment author.",
            "type": "string"
          },
          "author_url": {
            "description": "URL for the comment author.",
            "type": "string",
            "format": "uri"
          },
          "content": {
            "description": "The content for the comment.",
            "type": "object",
            "properties": {
              "rendered": {
                "description": "HTML content for the comment, transformed for display.",
                "type": "string",
                "readOnly": true
              }
            }
          },
          "date": {
            "description": "The date the comment was published, in the site's timezone.",
            "type": "string",
            "format": "date-time"
          },
          "link": {
            "description": "URL to the comment.",
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "parent": {
            "description": "The ID for the parent of the comment.",
            "type": "integer",
            "default": 0
          },
          "post": {
            "description": "The ID of the associated post object.",
            "type": "integer",
            "default": 0
          },
          "type": {
            "description": "Type of the comment.",
            "type": "string",
            "readOnly": true
          },
          "author_avatar_urls": {
            "description": "Avatar URLs for the comment author.",
            "type": "object",
            "properties": {
              "24": {
                "description": "Avatar URL with image size of 24 pixels.",
                "type": "string",
                "format": "uri"
              },
              "48": {
                "description": "Avatar URL with image size of 48 pixels.",
                "type": "string",
                "format": "uri"
              },
              "96": {
                "description": "Avatar URL with image size of 96 pixels.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      },
      "CommentView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommentBase"
          },
          {
            "type": "object",
            "properties": {
              "date_gmt": {
                "description": "The date the comment was published, as GMT.",
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "CommentEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommentBase"
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "properties": {
                  "rendered": {
                    "description": "Rendered content available in embed context.",
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      },
      "CommentEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommentBase"
          },
          {
            "type": "object",
            "properties": {
              "author_email": {
                "description": "Email address for the comment author.",
                "type": "string",
                "format": "email"
              },
              "author_ip": {
                "description": "IP address for the comment author.",
                "type": "string",
                "format": "ip"
              },
              "author_user_agent": {
                "description": "User agent for the comment author.",
                "type": "string"
              },
              "content": {
                "properties": {
                  "raw": {
                    "description": "Content for the comment, as it exists in the database.",
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      },
      "CommentResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CommentView"
          },
          {
            "$ref": "#/components/schemas/CommentEmbed"
          },
          {
            "$ref": "#/components/schemas/CommentEdit"
          }
        ]
      },
      "FontCollectionBase": {
        "type": "object",
        "properties": {
          "slug": {
            "description": "Unique identifier for the font collection.",
            "type": "string",
            "readOnly": true
          },
          "name": {
            "description": "The name for the font collection.",
            "type": "string"
          },
          "description": {
            "description": "The description for the font collection.",
            "type": "string"
          },
          "font_families": {
            "description": "The font families for the font collection.",
            "type": "array"
          },
          "categories": {
            "description": "The categories for the font collection.",
            "type": "array"
          }
        }
      },
      "FontCollectionView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FontCollectionBase"
          }
        ]
      },
      "FontCollectionEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FontCollectionBase"
          }
        ]
      },
      "FontCollectionEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FontCollectionBase"
          }
        ]
      },
      "FontCollectionResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/FontCollectionView"
          },
          {
            "$ref": "#/components/schemas/FontCollectionEmbed"
          },
          {
            "$ref": "#/components/schemas/FontCollectionEdit"
          }
        ]
      },
      "WpFontFamilyBase": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the post.",
            "type": "integer",
            "readOnly": true
          },
          "theme_json_version": {
            "description": "Version of the theme.json schema used for the typography settings.",
            "type": "integer",
            "default": 3,
            "minimum": 2,
            "maximum": 3
          },
          "font_faces": {
            "description": "The IDs of the child font faces in the font family.",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "font_family_settings": {
            "description": "font-face definition in theme.json format.",
            "type": "object",
            "properties": {
              "name": {
                "description": "Name of the font family preset, translatable.",
                "type": "string"
              },
              "slug": {
                "description": "Kebab-case unique identifier for the font family preset.",
                "type": "string"
              },
              "fontFamily": {
                "description": "CSS font-family value.",
                "type": "string"
              },
              "preview": {
                "description": "URL to a preview image of the font family.",
                "type": "string",
                "format": "uri",
                "default": ""
              }
            },
            "required": [
              "name",
              "slug",
              "fontFamily"
            ],
            "unevaluatedProperties": false
          }
        }
      },
      "WpFontFamilyView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WpFontFamilyBase"
          }
        ]
      },
      "WpFontFamilyEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WpFontFamilyBase"
          }
        ]
      },
      "WpFontFamilyEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WpFontFamilyBase"
          }
        ]
      },
      "WpFontFamilyResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/WpFontFamilyView"
          },
          {
            "$ref": "#/components/schemas/WpFontFamilyEmbed"
          },
          {
            "$ref": "#/components/schemas/WpFontFamilyEdit"
          }
        ]
      },
      "WpFontFaceBase": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the post.",
            "type": "integer",
            "readOnly": true
          },
          "theme_json_version": {
            "description": "Version of the theme.json schema used for the typography settings.",
            "type": "integer",
            "default": 3,
            "minimum": 2,
            "maximum": 3
          },
          "parent": {
            "description": "The ID for the parent font family of the font face.",
            "type": "integer"
          },
          "font_face_settings": {
            "description": "font-face declaration in theme.json format.",
            "type": "object",
            "properties": {
              "fontFamily": {
                "description": "CSS font-family value.",
                "type": "string",
                "default": ""
              },
              "fontStyle": {
                "description": "CSS font-style value.",
                "type": "string",
                "default": "normal"
              },
              "fontWeight": {
                "description": "List of available font weights, separated by a space.",
                "default": "400",
                "type": [
                  "string",
                  "integer"
                ]
              },
              "fontDisplay": {
                "description": "CSS font-display value.",
                "type": "string",
                "default": "fallback",
                "enum": [
                  "auto",
                  "block",
                  "fallback",
                  "swap",
                  "optional"
                ]
              },
              "src": {
                "description": "Paths or URLs to the font files.",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ],
                "default": []
              },
              "fontStretch": {
                "description": "CSS font-stretch value.",
                "type": "string"
              },
              "ascentOverride": {
                "description": "CSS ascent-override value.",
                "type": "string"
              },
              "descentOverride": {
                "description": "CSS descent-override value.",
                "type": "string"
              },
              "fontVariant": {
                "description": "CSS font-variant value.",
                "type": "string"
              },
              "fontFeatureSettings": {
                "description": "CSS font-feature-settings value.",
                "type": "string"
              },
              "fontVariationSettings": {
                "description": "CSS font-variation-settings value.",
                "type": "string"
              },
              "lineGapOverride": {
                "description": "CSS line-gap-override value.",
                "type": "string"
              },
              "sizeAdjust": {
                "description": "CSS size-adjust value.",
                "type": "string"
              },
              "unicodeRange": {
                "description": "CSS unicode-range value.",
                "type": "string"
              },
              "preview": {
                "description": "URL to a preview image of the font face.",
                "type": "string",
                "format": "uri",
                "default": ""
              }
            },
            "required": [
              "fontFamily",
              "src"
            ],
            "unevaluatedProperties": false
          }
        }
      },
      "WpFontFaceView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WpFontFaceBase"
          }
        ]
      },
      "WpFontFaceEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WpFontFaceBase"
          }
        ]
      },
      "WpFontFaceEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WpFontFaceBase"
          }
        ]
      },
      "WpFontFaceResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/WpFontFaceView"
          },
          {
            "$ref": "#/components/schemas/WpFontFaceEmbed"
          },
          {
            "$ref": "#/components/schemas/WpFontFaceEdit"
          }
        ]
      },
      "WPGlobalStylesRevisionBase": {
        "type": "object",
        "properties": {
          "author": {
            "description": "The ID for the author of the revision.",
            "type": "integer"
          },
          "date": {
            "description": "The date the revision was published, in the site's timezone.",
            "type": "string",
            "format": "date-time"
          },
          "date_gmt": {
            "description": "The date the revision was published, as GMT.",
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "description": "ID of global styles config.",
            "type": "string",
            "readOnly": true
          },
          "modified": {
            "description": "The date the revision was last modified, in the site's timezone.",
            "type": "string",
            "format": "date-time"
          },
          "modified_gmt": {
            "description": "The date the revision was last modified, as GMT.",
            "type": "string",
            "format": "date-time"
          },
          "parent": {
            "description": "The ID for the parent of the revision.",
            "type": "integer"
          },
          "styles": {
            "description": "Global styles.",
            "type": "object"
          },
          "settings": {
            "description": "Global settings.",
            "type": "object"
          }
        }
      },
      "WPGlobalStylesRevisionView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WPGlobalStylesRevisionBase"
          }
        ]
      },
      "WPGlobalStylesRevisionBase-properties-id": {
        "description": "ID of global styles config.",
        "type": "string",
        "readOnly": true
      },
      "WPGlobalStylesRevisionEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WPGlobalStylesRevisionBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/WPGlobalStylesRevisionBase-properties-id"
              },
              "date": {
                "$ref": "#/components/schemas/date"
              },
              "author": {
                "$ref": "#/components/schemas/author"
              }
            }
          }
        ]
      },
      "WPGlobalStylesRevisionEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WPGlobalStylesRevisionBase"
          }
        ]
      },
      "WPGlobalStylesRevisionResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/WPGlobalStylesRevisionView"
          },
          {
            "$ref": "#/components/schemas/WPGlobalStylesRevisionEmbed"
          },
          {
            "$ref": "#/components/schemas/WPGlobalStylesRevisionEdit"
          }
        ]
      },
      "WPGlobalStylesBase": {
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of global styles config.",
            "type": "string",
            "readOnly": true
          },
          "styles": {
            "description": "Global styles.",
            "type": "object"
          },
          "settings": {
            "description": "Global settings.",
            "type": "object"
          },
          "title": {
            "description": "Title of the global styles variation.",
            "type": [
              "object",
              "string"
            ],
            "default": "",
            "properties": {
              "raw": {
                "description": "Title for the global styles variation, as it exists in the database.",
                "type": "string"
              },
              "rendered": {
                "description": "HTML title for the global styles variation, transformed for display.",
                "type": "string",
                "readOnly": true
              }
            }
          }
        }
      },
      "WPGlobalStylesView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WPGlobalStylesBase"
          }
        ]
      },
      "WPGlobalStylesBase-properties-id": {
        "description": "ID of global styles config.",
        "type": "string",
        "readOnly": true
      },
      "properties-title": {
        "description": "Title of the global styles variation.",
        "type": [
          "object",
          "string"
        ],
        "default": "",
        "properties": {
          "raw": {
            "description": "Title for the global styles variation, as it exists in the database.",
            "type": "string"
          },
          "rendered": {
            "description": "HTML title for the global styles variation, transformed for display.",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "WPGlobalStylesEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WPGlobalStylesBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/WPGlobalStylesBase-properties-id"
              },
              "title": {
                "$ref": "#/components/schemas/properties-title"
              }
            }
          }
        ]
      },
      "WPGlobalStylesEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WPGlobalStylesBase"
          }
        ]
      },
      "WPGlobalStylesResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/WPGlobalStylesView"
          },
          {
            "$ref": "#/components/schemas/WPGlobalStylesEmbed"
          },
          {
            "$ref": "#/components/schemas/WPGlobalStylesEdit"
          }
        ]
      },
      "AttachmentBase": {
        "type": "object",
        "properties": {
          "date": {
            "description": "The date the post was published, in the site's timezone.",
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "date_gmt": {
            "description": "The date the post was published, as GMT.",
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "guid": {
            "description": "The globally unique identifier for the post.",
            "type": "object",
            "readOnly": true,
            "properties": {
              "raw": {
                "description": "GUID for the post, as it exists in the database.",
                "type": "string"
              },
              "rendered": {
                "description": "GUID for the post, transformed for display.",
                "type": "string"
              }
            }
          },
          "id": {
            "description": "Unique identifier for the post.",
            "type": "integer",
            "readOnly": true
          },
          "link": {
            "description": "URL to the post.",
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "modified": {
            "description": "The date the post was last modified, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified_gmt": {
            "description": "The date the post was last modified, as GMT.",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "slug": {
            "description": "An alphanumeric identifier for the post unique to its type.",
            "type": "string"
          },
          "status": {
            "description": "A named status for the post.",
            "type": "string",
            "enum": [
              "publish",
              "future",
              "draft",
              "pending",
              "private"
            ]
          },
          "type": {
            "description": "Type of post.",
            "type": "string",
            "readOnly": true
          },
          "permalink_template": {
            "description": "Permalink template for the post.",
            "type": "string",
            "readOnly": true
          },
          "generated_slug": {
            "description": "Slug automatically generated from the post title.",
            "type": "string",
            "readOnly": true
          },
          "class_list": {
            "description": "An array of the class names for the post container element.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "readOnly": true
          },
          "title": {
            "description": "The title for the post.",
            "type": "object",
            "properties": {
              "raw": {
                "description": "Title for the post, as it exists in the database.",
                "type": "string"
              },
              "rendered": {
                "description": "HTML title for the post, transformed for display.",
                "type": "string",
                "readOnly": true
              }
            }
          },
          "author": {
            "description": "The ID for the author of the post.",
            "type": "integer"
          },
          "featured_media": {
            "description": "The ID of the featured media for the post.",
            "type": "integer"
          },
          "comment_status": {
            "description": "Whether or not comments are open on the post.",
            "type": "string",
            "enum": [
              "open",
              "closed"
            ]
          },
          "ping_status": {
            "description": "Whether or not the post can be pinged.",
            "type": "string",
            "enum": [
              "open",
              "closed"
            ]
          },
          "meta": {
            "description": "Meta fields.",
            "type": "object"
          },
          "template": {
            "description": "The theme file to use to display the post.",
            "type": "string"
          },
          "alt_text": {
            "description": "Alternative text to display when attachment is not displayed.",
            "type": "string"
          },
          "caption": {
            "description": "The attachment caption.",
            "type": "object",
            "properties": {
              "raw": {
                "description": "Caption for the attachment, as it exists in the database.",
                "type": "string"
              },
              "rendered": {
                "description": "HTML caption for the attachment, transformed for display.",
                "type": "string",
                "readOnly": true
              }
            }
          },
          "description": {
            "description": "The attachment description.",
            "type": "object",
            "properties": {
              "raw": {
                "description": "Description for the attachment, as it exists in the database.",
                "type": "string"
              },
              "rendered": {
                "description": "HTML description for the attachment, transformed for display.",
                "type": "string",
                "readOnly": true
              }
            }
          },
          "media_type": {
            "description": "Attachment type.",
            "type": "string",
            "enum": [
              "image",
              "file"
            ],
            "readOnly": true
          },
          "mime_type": {
            "description": "The attachment MIME type.",
            "type": "string",
            "readOnly": true
          },
          "media_details": {
            "description": "Details about the media file, specific to its type.",
            "type": "object",
            "readOnly": true
          },
          "post": {
            "description": "The ID for the associated post of the attachment.",
            "type": "integer"
          },
          "source_url": {
            "description": "URL to the original attachment file.",
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "missing_image_sizes": {
            "description": "List of the missing image sizes of the attachment.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "readOnly": true
          }
        }
      },
      "AttachmentView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AttachmentBase"
          }
        ]
      },
      "alt_text": {
        "description": "Alternative text to display when attachment is not displayed.",
        "type": "string"
      },
      "AttachmentEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AttachmentBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/id"
              },
              "link": {
                "$ref": "#/components/schemas/link"
              },
              "alt_text": {
                "$ref": "#/components/schemas/alt_text"
              }
            }
          }
        ]
      },
      "AttachmentEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AttachmentBase"
          }
        ]
      },
      "AttachmentResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AttachmentView"
          },
          {
            "$ref": "#/components/schemas/AttachmentEmbed"
          },
          {
            "$ref": "#/components/schemas/AttachmentEdit"
          }
        ]
      },
      "NavMenuItemBase": {
        "type": "object",
        "properties": {
          "title": {
            "description": "The title for the object.",
            "type": [
              "string",
              "object"
            ],
            "properties": {
              "raw": {
                "description": "Title for the object, as it exists in the database.",
                "type": "string"
              },
              "rendered": {
                "description": "HTML title for the object, transformed for display.",
                "type": "string",
                "readOnly": true
              }
            }
          },
          "id": {
            "description": "Unique identifier for the object.",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "readOnly": true
          },
          "type_label": {
            "description": "The singular label used to describe this type of menu item.",
            "type": "string",
            "readOnly": true
          },
          "type": {
            "description": "The family of objects originally represented, such as \"post_type\" or \"taxonomy\".",
            "type": "string",
            "enum": [
              "taxonomy",
              "post_type",
              "post_type_archive",
              "custom"
            ],
            "default": "custom"
          },
          "status": {
            "description": "A named status for the object.",
            "type": "string",
            "enum": [
              "publish",
              "future",
              "draft",
              "pending",
              "private"
            ],
            "default": "publish"
          },
          "parent": {
            "description": "The ID for the parent of the object.",
            "type": "integer",
            "minimum": 0,
            "default": 0
          },
          "attr_title": {
            "description": "Text for the title attribute of the link element for this menu item.",
            "type": "string"
          },
          "classes": {
            "description": "Class names for the link element of this menu item.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "description": "The description of this menu item.",
            "type": "string"
          },
          "menu_order": {
            "description": "The DB ID of the nav_menu_item that is this item's menu parent, if any, otherwise 0.",
            "type": "integer",
            "minimum": 1,
            "default": 1
          },
          "object": {
            "description": "The type of object originally represented, such as \"category\", \"post\", or \"attachment\".",
            "type": "string"
          },
          "object_id": {
            "description": "The database ID of the original object this menu item represents.",
            "type": "integer",
            "minimum": 0,
            "default": 0
          },
          "target": {
            "description": "The target attribute of the link element for this menu item.",
            "type": "string",
            "enum": [
              "_blank",
              ""
            ]
          },
          "url": {
            "description": "The URL to which this menu item points.",
            "type": "string",
            "format": "uri"
          },
          "xfn": {
            "description": "The XFN relationship expressed in the link of this menu item.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "invalid": {
            "description": "Whether the menu item represents an object that no longer exists.",
            "type": "boolean",
            "readOnly": true
          },
          "menus": {
            "description": "The terms assigned to the object in the nav_menu taxonomy.",
            "type": "integer"
          },
          "meta": {
            "description": "Meta fields.",
            "type": "object"
          }
        }
      },
      "NavMenuItemView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NavMenuItemBase"
          }
        ]
      },
      "NavMenuItemEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NavMenuItemBase"
          }
        ]
      },
      "NavMenuItemEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NavMenuItemBase"
          }
        ]
      },
      "NavMenuItemResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/NavMenuItemView"
          },
          {
            "$ref": "#/components/schemas/NavMenuItemEmbed"
          },
          {
            "$ref": "#/components/schemas/NavMenuItemEdit"
          }
        ]
      },
      "NavMenuItemRevisionBase": {
        "type": "object",
        "properties": {
          "author": {
            "description": "The ID for the author of the revision.",
            "type": "integer"
          },
          "date": {
            "description": "The date the revision was published, in the site's timezone.",
            "type": "string",
            "format": "date-time"
          },
          "date_gmt": {
            "description": "The date the revision was published, as GMT.",
            "type": "string",
            "format": "date-time"
          },
          "guid": {
            "description": "GUID for the revision, as it exists in the database.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the revision.",
            "type": "integer",
            "readOnly": true
          },
          "modified": {
            "description": "The date the revision was last modified, in the site's timezone.",
            "type": "string",
            "format": "date-time"
          },
          "modified_gmt": {
            "description": "The date the revision was last modified, as GMT.",
            "type": "string",
            "format": "date-time"
          },
          "parent": {
            "description": "The ID for the parent of the revision.",
            "type": "integer"
          },
          "slug": {
            "description": "An alphanumeric identifier for the revision unique to its type.",
            "type": "string"
          },
          "title": {
            "description": "The title for the object.",
            "type": [
              "string",
              "object"
            ],
            "properties": {
              "raw": {
                "description": "Title for the object, as it exists in the database.",
                "type": "string"
              },
              "rendered": {
                "description": "HTML title for the object, transformed for display.",
                "type": "string",
                "readOnly": true
              }
            }
          },
          "meta": {
            "description": "Meta fields.",
            "type": "object"
          },
          "preview_link": {
            "description": "Preview link for the post.",
            "type": "string",
            "format": "uri",
            "readOnly": true
          }
        }
      },
      "NavMenuItemRevisionView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NavMenuItemRevisionBase"
          }
        ]
      },
      "NavMenuItemRevisionEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NavMenuItemRevisionBase"
          }
        ]
      },
      "NavMenuItemRevisionEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NavMenuItemRevisionBase"
          }
        ]
      },
      "NavMenuItemRevisionResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/NavMenuItemRevisionView"
          },
          {
            "$ref": "#/components/schemas/NavMenuItemRevisionEmbed"
          },
          {
            "$ref": "#/components/schemas/NavMenuItemRevisionEdit"
          }
        ]
      },
      "MenuLocationBase": {
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the menu location.",
            "type": "string",
            "readOnly": true
          },
          "description": {
            "description": "The description of the menu location.",
            "type": "string",
            "readOnly": true
          },
          "menu": {
            "description": "The ID of the assigned menu.",
            "type": "integer",
            "readOnly": true
          }
        }
      },
      "MenuLocationView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MenuLocationBase"
          }
        ]
      },
      "MenuLocationEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MenuLocationBase"
          }
        ]
      },
      "MenuLocationEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MenuLocationBase"
          }
        ]
      },
      "MenuLocationResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/MenuLocationView"
          },
          {
            "$ref": "#/components/schemas/MenuLocationEmbed"
          },
          {
            "$ref": "#/components/schemas/MenuLocationEdit"
          }
        ]
      },
      "NavMenuBase": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the term.",
            "type": "integer",
            "readOnly": true
          },
          "description": {
            "description": "HTML description of the term.",
            "type": "string"
          },
          "name": {
            "description": "HTML title for the term.",
            "type": "string"
          },
          "slug": {
            "description": "An alphanumeric identifier for the term unique to its type.",
            "type": "string"
          },
          "meta": {
            "description": "Meta fields.",
            "type": "object"
          },
          "locations": {
            "description": "The locations assigned to the menu.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "auto_add": {
            "description": "Whether to automatically add top-level pages to this menu.",
            "type": "boolean"
          }
        }
      },
      "NavMenuView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NavMenuBase"
          }
        ]
      },
      "NavMenuBase-properties-id": {
        "description": "Unique identifier for the term.",
        "type": "integer",
        "readOnly": true
      },
      "name": {
        "description": "HTML title for the term.",
        "type": "string"
      },
      "slug": {
        "description": "An alphanumeric identifier for the term unique to its type.",
        "type": "string"
      },
      "NavMenuEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NavMenuBase"
          },
          {
            "properties": {
              "id": {
                "$ref": "#/components/schemas/NavMenuBase-properties-id"
              },
              "name": {
                "$ref": "#/components/schemas/name"
              },
              "slug": {
                "$ref": "#/components/schemas/slug"
              }
            }
          }
        ]
      },
      "NavMenuEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NavMenuBase"
          }
        ]
      },
      "NavMenuResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/NavMenuView"
          },
          {
            "$ref": "#/components/schemas/NavMenuEmbed"
          },
          {
            "$ref": "#/components/schemas/NavMenuEdit"
          }
        ]
      },
      "WPNavigationBase": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the post.",
            "type": "integer",
            "readOnly": true
          },
          "date": {
            "description": "The date the post was published, in the site's timezone.",
            "type": "string",
            "format": "date-time"
          },
          "date_gmt": {
            "description": "The date the post was published, as GMT.",
            "type": "string",
            "format": "date-time"
          },
          "guid": {
            "description": "The globally unique identifier for the post.",
            "type": "object",
            "properties": {
              "raw": {
                "description": "GUID for the post, as it exists in the database.",
                "type": "string",
                "readOnly": true
              },
              "rendered": {
                "description": "GUID for the post, transformed for display.",
                "type": "string",
                "readOnly": true
              }
            }
          },
          "modified": {
            "description": "The date the post was last modified, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified_gmt": {
            "description": "The date the post was last modified, as GMT.",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "slug": {
            "description": "An alphanumeric identifier for the post unique to its type.",
            "type": "string"
          },
          "status": {
            "description": "A named status for the post.",
            "type": "string",
            "enum": [
              "publish",
              "future",
              "draft",
              "pending",
              "private"
            ]
          },
          "type": {
            "description": "Type of post.",
            "type": "string",
            "readOnly": true
          },
          "title": {
            "description": "The title for the post.",
            "type": "object",
            "properties": {
              "raw": {
                "description": "Title for the post, as it exists in the database.",
                "type": "string"
              },
              "rendered": {
                "description": "HTML title for the post, transformed for display.",
                "type": "string",
                "readOnly": true
              }
            }
          },
          "content": {
            "description": "The content for the post.",
            "type": "object",
            "properties": {
              "raw": {
                "description": "Content for the post, as it exists in the database.",
                "type": "string"
              },
              "rendered": {
                "description": "HTML content for the post, transformed for display.",
                "type": "string",
                "readOnly": true
              },
              "block_version": {
                "description": "Version of the content block format used by the post.",
                "type": "integer",
                "readOnly": true
              },
              "protected": {
                "description": "Whether the content is protected with a password.",
                "type": "boolean",
                "readOnly": true
              }
            }
          },
          "template": {
            "description": "The theme file to use to display the post.",
            "type": "string"
          }
        }
      },
      "WPNavigationView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WPNavigationBase"
          }
        ]
      },
      "WPNavigationBase-properties-title": {
        "description": "The title for the post.",
        "type": "object",
        "properties": {
          "raw": {
            "description": "Title for the post, as it exists in the database.",
            "type": "string"
          },
          "rendered": {
            "description": "HTML title for the post, transformed for display.",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "guid": {
        "description": "The globally unique identifier for the post.",
        "type": "object",
        "properties": {
          "raw": {
            "description": "GUID for the post, as it exists in the database.",
            "type": "string",
            "readOnly": true
          },
          "rendered": {
            "description": "GUID for the post, transformed for display.",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "WPNavigationEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WPNavigationBase"
          },
          {
            "properties": {
              "id": {
                "$ref": "#/components/schemas/id"
              },
              "title": {
                "$ref": "#/components/schemas/WPNavigationBase-properties-title"
              },
              "guid": {
                "$ref": "#/components/schemas/guid"
              }
            }
          }
        ]
      },
      "WPNavigationEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WPNavigationBase"
          }
        ]
      },
      "WPNavigationResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/WPNavigationView"
          },
          {
            "$ref": "#/components/schemas/WPNavigationEmbed"
          },
          {
            "$ref": "#/components/schemas/WPNavigationEdit"
          }
        ]
      },
      "WPNavigationRevisionBase": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the revision.",
            "type": "integer",
            "readOnly": true
          },
          "date": {
            "description": "The date the revision was published, in the site's timezone.",
            "type": "string",
            "format": "date-time"
          },
          "date_gmt": {
            "description": "The date the revision was published, as GMT.",
            "type": "string",
            "format": "date-time"
          },
          "guid": {
            "description": "The globally unique identifier for the post.",
            "type": "object",
            "properties": {
              "raw": {
                "description": "GUID for the post, as it exists in the database.",
                "type": "string",
                "readOnly": true
              },
              "rendered": {
                "description": "GUID for the post, transformed for display.",
                "type": "string",
                "readOnly": true
              }
            }
          },
          "modified": {
            "description": "The date the revision was last modified, in the site's timezone.",
            "type": "string",
            "format": "date-time"
          },
          "modified_gmt": {
            "description": "The date the revision was last modified, as GMT.",
            "type": "string",
            "format": "date-time"
          },
          "parent": {
            "description": "The ID for the parent of the revision.",
            "type": "integer"
          },
          "slug": {
            "description": "An alphanumeric identifier for the revision unique to its type.",
            "type": "string"
          },
          "title": {
            "description": "The title for the revision.",
            "type": "object",
            "properties": {
              "raw": {
                "description": "Title for the revision, as it exists in the database.",
                "type": "string"
              },
              "rendered": {
                "description": "HTML title for the revision, transformed for display.",
                "type": "string",
                "readOnly": true
              }
            }
          },
          "content": {
            "description": "The content for the revision.",
            "type": "object",
            "properties": {
              "raw": {
                "description": "Content for the revision, as it exists in the database.",
                "type": "string"
              },
              "rendered": {
                "description": "HTML content for the revision, transformed for display.",
                "type": "string",
                "readOnly": true
              },
              "block_version": {
                "description": "Version of the content block format used by the revision.",
                "type": "integer",
                "readOnly": true
              },
              "protected": {
                "description": "Whether the content is protected with a password.",
                "type": "boolean",
                "readOnly": true
              }
            }
          }
        }
      },
      "WPNavigationRevisionView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WPNavigationRevisionBase"
          }
        ]
      },
      "WPNavigationRevisionBase-properties-id": {
        "description": "Unique identifier for the revision.",
        "type": "integer",
        "readOnly": true
      },
      "WPNavigationRevisionBase-properties-title": {
        "description": "The title for the revision.",
        "type": "object",
        "properties": {
          "raw": {
            "description": "Title for the revision, as it exists in the database.",
            "type": "string"
          },
          "rendered": {
            "description": "HTML title for the revision, transformed for display.",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "WPNavigationRevisionEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WPNavigationRevisionBase"
          },
          {
            "properties": {
              "id": {
                "$ref": "#/components/schemas/WPNavigationRevisionBase-properties-id"
              },
              "title": {
                "$ref": "#/components/schemas/WPNavigationRevisionBase-properties-title"
              }
            }
          }
        ]
      },
      "WPNavigationRevisionEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WPNavigationRevisionBase"
          }
        ]
      },
      "WPNavigationRevisionResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/WPNavigationRevisionView"
          },
          {
            "$ref": "#/components/schemas/WPNavigationRevisionEmbed"
          },
          {
            "$ref": "#/components/schemas/WPNavigationRevisionEdit"
          }
        ]
      },
      "PageBase": {
        "type": "object",
        "properties": {
          "author": {
            "description": "The ID for the author of the post.",
            "type": "integer"
          },
          "date": {
            "description": "The date the post was published, in the site's timezone.",
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "id": {
            "description": "Unique identifier for the post.",
            "type": "integer",
            "readOnly": true
          },
          "title": {
            "description": "The title for the post.",
            "type": "object",
            "properties": {
              "raw": {
                "description": "Title for the post, as it exists in the database.",
                "type": "string"
              },
              "rendered": {
                "description": "HTML title for the post, transformed for display.",
                "type": "string",
                "readOnly": true
              }
            }
          },
          "content": {
            "description": "The content for the post.",
            "type": "object",
            "properties": {
              "raw": {
                "description": "Content for the post, as it exists in the database.",
                "type": "string"
              },
              "rendered": {
                "description": "HTML content for the post, transformed for display.",
                "type": "string",
                "readOnly": true
              }
            }
          },
          "meta": {
            "description": "Meta fields.",
            "type": "object"
          }
        }
      },
      "PageGMT": {
        "type": "object",
        "properties": {
          "date_gmt": {
            "description": "The date the post was published, as GMT.",
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "modified_gmt": {
            "description": "The date the revision was last modified, as GMT.",
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          }
        }
      },
      "PageView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PageBase"
          },
          {
            "$ref": "#/components/schemas/PageGMT"
          }
        ]
      },
      "PageEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PageBase"
          }
        ]
      },
      "PageEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PageBase"
          },
          {
            "$ref": "#/components/schemas/PageGMT"
          }
        ]
      },
      "PageResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PageView"
          },
          {
            "$ref": "#/components/schemas/PageEmbed"
          },
          {
            "$ref": "#/components/schemas/PageEdit"
          }
        ]
      },
      "PageRevisionBase": {
        "type": "object",
        "properties": {
          "author": {
            "description": "The ID for the author of the revision.",
            "type": "integer"
          },
          "date": {
            "description": "The date the revision was published, in the site's timezone.",
            "type": "string",
            "format": "date-time"
          },
          "guid": {
            "description": "The globally unique identifier for the post.",
            "type": "object",
            "properties": {
              "raw": {
                "description": "GUID for the post, as it exists in the database.",
                "type": "string"
              },
              "rendered": {
                "description": "GUID for the post, transformed for display.",
                "type": "string",
                "readOnly": true
              }
            }
          },
          "id": {
            "description": "Unique identifier for the revision.",
            "type": "integer",
            "readOnly": true
          },
          "modified": {
            "description": "The date the revision was last modified, in the site's timezone.",
            "type": "string",
            "format": "date-time"
          },
          "parent": {
            "description": "The ID for the parent of the revision.",
            "type": "integer"
          },
          "slug": {
            "description": "An alphanumeric identifier for the revision unique to its type.",
            "type": "string"
          },
          "title": {
            "description": "The title for the post.",
            "type": [
              "string",
              "object"
            ],
            "properties": {
              "raw": {
                "description": "Title for the post, as it exists in the database.",
                "type": "string"
              },
              "rendered": {
                "description": "HTML title for the post, transformed for display.",
                "type": "string",
                "readOnly": true
              }
            }
          },
          "content": {
            "description": "The content for the post.",
            "type": "object",
            "properties": {
              "raw": {
                "description": "Content for the post, as it exists in the database.",
                "type": "string"
              },
              "rendered": {
                "description": "HTML content for the post, transformed for display.",
                "type": "string",
                "readOnly": true
              }
            }
          },
          "meta": {
            "description": "Meta fields.",
            "type": "object"
          }
        }
      },
      "PageRevisionView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PageRevisionBase"
          },
          {
            "$ref": "#/components/schemas/PageGMT"
          }
        ]
      },
      "PageRevisionEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PageRevisionBase"
          }
        ]
      },
      "PageRevisionEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PageRevisionBase"
          },
          {
            "$ref": "#/components/schemas/PageGMT"
          }
        ]
      },
      "PageRevisionResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PageRevisionView"
          },
          {
            "$ref": "#/components/schemas/PageRevisionEmbed"
          },
          {
            "$ref": "#/components/schemas/PageRevisionEdit"
          }
        ]
      },
      "PatternDirectoryItemBase": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The pattern ID.",
            "type": "integer",
            "minimum": 1
          },
          "title": {
            "description": "The pattern title, in human readable format.",
            "type": "string",
            "minLength": 1
          },
          "content": {
            "description": "The pattern content.",
            "type": "string",
            "minLength": 1
          },
          "categories": {
            "description": "The pattern's category slugs.",
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          },
          "keywords": {
            "description": "The pattern's keywords.",
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          },
          "description": {
            "description": "A description of the pattern.",
            "type": "string",
            "minLength": 1
          },
          "viewport_width": {
            "description": "The preferred width of the viewport when previewing a pattern, in pixels.",
            "type": "integer"
          }
        }
      },
      "PatternDirectoryItemBlockTypes": {
        "type": "object",
        "properties": {
          "block_types": {
            "description": "The block types which can use this pattern.",
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PatternDirectoryItemView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PatternDirectoryItemBase"
          },
          {
            "$ref": "#/components/schemas/PatternDirectoryItemBlockTypes"
          }
        ],
        "required": [
          "id",
          "title",
          "content",
          "categories",
          "keywords",
          "description",
          "viewport_width",
          "block_types"
        ]
      },
      "PatternDirectoryItemEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PatternDirectoryItemBase"
          }
        ],
        "required": [
          "id",
          "title",
          "content",
          "categories",
          "keywords",
          "description",
          "viewport_width"
        ]
      },
      "PatternDirectoryItemEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PatternDirectoryItemBase"
          },
          {
            "$ref": "#/components/schemas/PatternDirectoryItemBlockTypes"
          }
        ],
        "required": [
          "id",
          "title",
          "content",
          "categories",
          "keywords",
          "description",
          "viewport_width",
          "block_types"
        ]
      },
      "PatternDirectoryItemResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PatternDirectoryItemView"
          },
          {
            "$ref": "#/components/schemas/PatternDirectoryItemEdit"
          },
          {
            "$ref": "#/components/schemas/PatternDirectoryItemEmbed"
          }
        ]
      },
      "PluginBase": {
        "type": "object",
        "properties": {
          "plugin": {
            "description": "The plugin file.",
            "type": "string",
            "pattern": "[^.\\/]+(?:\\/[^.\\/]+)?"
          },
          "status": {
            "description": "The plugin activation status.",
            "type": "string",
            "enum": [
              "inactive",
              "active"
            ]
          },
          "name": {
            "description": "The plugin name.",
            "type": "string"
          },
          "plugin_uri": {
            "description": "The plugin's website address.",
            "type": "string",
            "format": "uri"
          },
          "author": {
            "description": "The plugin author.",
            "type": "string"
          },
          "author_uri": {
            "description": "Plugin author's website address.",
            "type": "string",
            "format": "uri"
          },
          "description": {
            "description": "The plugin description.",
            "type": "object",
            "properties": {
              "raw": {
                "description": "The raw plugin description.",
                "type": "string"
              },
              "rendered": {
                "description": "The plugin description formatted for display.",
                "type": "string"
              }
            }
          },
          "version": {
            "description": "The plugin version number.",
            "type": "string"
          },
          "network_only": {
            "description": "Whether the plugin can only be activated network-wide.",
            "type": "boolean"
          },
          "requires_wp": {
            "description": "Minimum required version of WordPress.",
            "type": "string"
          },
          "requires_php": {
            "description": "Minimum required version of PHP.",
            "type": "string"
          },
          "textdomain": {
            "description": "The plugin's text domain.",
            "type": "string"
          }
        }
      },
      "PluginView": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PluginBase"
          }
        ],
        "properties": {
          "plugin": {
            "readOnly": true
          },
          "status": {
            "readOnly": true
          },
          "name": {
            "readOnly": true
          },
          "plugin_uri": {
            "readOnly": true
          },
          "author": {
            "readOnly": true
          },
          "author_uri": {
            "readOnly": true
          },
          "description": {
            "readOnly": true
          },
          "version": {
            "readOnly": true
          },
          "network_only": {
            "readOnly": true
          },
          "requires_wp": {
            "readOnly": true
          },
          "requires_php": {
            "readOnly": true
          },
          "textdomain": {
            "readOnly": true
          }
        }
      },
      "PluginEdit": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PluginBase"
          }
        ],
        "properties": {
          "plugin": {
            "readOnly": true
          },
          "name": {
            "readOnly": true
          },
          "plugin_uri": {
            "readOnly": true
          },
          "author": {
            "readOnly": true
          },
          "author_uri": {
            "readOnly": true
          },
          "description": {
            "readOnly": true
          },
          "version": {
            "readOnly": true
          },
          "network_only": {
            "readOnly": true
          },
          "requires_wp": {
            "readOnly": true
          },
          "requires_php": {
            "readOnly": true
          },
          "textdomain": {
            "readOnly": true
          }
        }
      },
      "PluginEmbed": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PluginBase"
          }
        ],
        "properties": {
          "plugin": {
            "readOnly": true
          },
          "status": {
            "readOnly": true
          },
          "name": {
            "readOnly": true
          },
          "network_only": {
            "readOnly": true
          },
          "requires_wp": {
            "readOnly": true
          },
          "requires_php": {
            "readOnly": true
          }
        }
      },
      "PluginResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PluginView"
          },
          {
            "$ref": "#/components/schemas/PluginEdit"
          },
          {
            "$ref": "#/components/schemas/PluginEmbed"
          }
        ]
      },
      "PostBase": {
        "type": "object",
        "properties": {
          "date": {
            "description": "The date the post was published, in the site's timezone.",
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "date_gmt": {
            "description": "The date the post was published, as GMT.",
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "guid": {
            "description": "The globally unique identifier for the post.",
            "type": "object",
            "properties": {
              "raw": {
                "description": "GUID for the post, as it exists in the database.",
                "type": "string"
              },
              "rendered": {
                "description": "GUID for the post, transformed for display.",
                "type": "string",
                "readOnly": true
              }
            }
          },
          "id": {
            "description": "Unique identifier for the post.",
            "type": "integer",
            "readOnly": true
          },
          "link": {
            "description": "URL to the post.",
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "modified": {
            "description": "The date the post was last modified, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified_gmt": {
            "description": "The date the post was last modified, as GMT.",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "slug": {
            "description": "An alphanumeric identifier for the post unique to its type.",
            "type": "string"
          },
          "status": {
            "description": "A named status for the post.",
            "type": "string",
            "enum": [
              "publish",
              "future",
              "draft",
              "pending",
              "private"
            ]
          },
          "type": {
            "description": "Type of post.",
            "type": "string",
            "readOnly": true
          },
          "title": {
            "description": "The title for the post.",
            "type": "object",
            "properties": {
              "raw": {
                "description": "Title for the post, as it exists in the database.",
                "type": "string"
              },
              "rendered": {
                "description": "HTML title for the post, transformed for display.",
                "type": "string",
                "readOnly": true
              }
            }
          },
          "content": {
            "description": "The content for the post.",
            "type": "object",
            "properties": {
              "raw": {
                "description": "Content for the post, as it exists in the database.",
                "type": "string"
              },
              "rendered": {
                "description": "HTML content for the post, transformed for display.",
                "type": "string",
                "readOnly": true
              },
              "block_version": {
                "description": "Version of the content block format used by the post.",
                "type": "integer",
                "readOnly": true
              },
              "protected": {
                "description": "Whether the content is protected with a password.",
                "type": "boolean",
                "readOnly": true
              }
            }
          },
          "author": {
            "description": "The ID for the author of the post.",
            "type": "integer"
          },
          "categories": {
            "description": "The terms assigned to the post in the category taxonomy.",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "tags": {
            "description": "The terms assigned to the post in the post_tag taxonomy.",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "PostView": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PostBase"
          },
          {
            "properties": {
              "date_gmt": {},
              "guid": {
                "properties": {
                  "rendered": {}
                }
              },
              "modified_gmt": {}
            }
          }
        ]
      },
      "PostEmbed": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PostBase"
          },
          {
            "properties": {
              "guid": {
                "properties": {
                  "rendered": {}
                }
              },
              "title": {
                "properties": {
                  "rendered": {}
                }
              }
            }
          }
        ]
      },
      "PostEdit": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PostBase"
          },
          {
            "properties": {
              "guid": {
                "properties": {
                  "raw": {},
                  "rendered": {}
                }
              },
              "content": {
                "properties": {
                  "raw": {},
                  "block_version": {}
                }
              },
              "title": {
                "properties": {
                  "raw": {}
                }
              }
            }
          }
        ]
      },
      "PostResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PostView"
          },
          {
            "$ref": "#/components/schemas/PostEmbed"
          },
          {
            "$ref": "#/components/schemas/PostEdit"
          }
        ]
      },
      "PostRevisionBase": {
        "type": "object",
        "properties": {
          "author": {
            "description": "The ID for the author of the revision.",
            "type": "integer"
          },
          "date": {
            "description": "The date the revision was published, in the site's timezone.",
            "type": "string",
            "format": "date-time"
          },
          "date_gmt": {
            "description": "The date the revision was published, as GMT.",
            "type": "string",
            "format": "date-time"
          },
          "guid": {
            "description": "The globally unique identifier for the post.",
            "type": "object",
            "properties": {
              "raw": {
                "description": "GUID for the post, as it exists in the database.",
                "type": "string"
              },
              "rendered": {
                "description": "GUID for the post, transformed for display.",
                "type": "string",
                "readOnly": true
              }
            }
          },
          "id": {
            "description": "Unique identifier for the revision.",
            "type": "integer"
          },
          "modified": {
            "description": "The date the revision was last modified, in the site's timezone.",
            "type": "string",
            "format": "date-time"
          },
          "modified_gmt": {
            "description": "The date the revision was last modified, as GMT.",
            "type": "string",
            "format": "date-time"
          },
          "parent": {
            "description": "The ID for the parent of the revision.",
            "type": "integer"
          },
          "slug": {
            "description": "An alphanumeric identifier for the revision unique to its type.",
            "type": "string"
          },
          "title": {
            "description": "The title for the post.",
            "type": "object",
            "properties": {
              "raw": {
                "description": "Title for the post, as it exists in the database.",
                "type": "string"
              },
              "rendered": {
                "description": "HTML title for the post, transformed for display.",
                "type": "string",
                "readOnly": true
              }
            }
          },
          "content": {
            "description": "The content for the post.",
            "type": "object",
            "properties": {
              "raw": {
                "description": "Content for the post, as it exists in the database.",
                "type": "string"
              },
              "rendered": {
                "description": "HTML content for the post, transformed for display.",
                "type": "string",
                "readOnly": true
              },
              "block_version": {
                "description": "Version of the content block format used by the post.",
                "type": "integer",
                "readOnly": true
              },
              "protected": {
                "description": "Whether the content is protected with a password.",
                "type": "boolean",
                "readOnly": true
              }
            }
          },
          "excerpt": {
            "description": "The excerpt for the post.",
            "type": "object",
            "properties": {
              "raw": {
                "description": "Excerpt for the post, as it exists in the database.",
                "type": "string"
              },
              "rendered": {
                "description": "HTML excerpt for the post, transformed for display.",
                "type": "string",
                "readOnly": true
              },
              "protected": {
                "description": "Whether the excerpt is protected with a password.",
                "type": "boolean",
                "readOnly": true
              }
            }
          },
          "meta": {
            "description": "Meta fields.",
            "type": "object",
            "properties": {
              "footnotes": {
                "type": "string",
                "default": ""
              }
            }
          },
          "preview_link": {
            "description": "Preview link for the post.",
            "type": "string",
            "format": "uri",
            "readOnly": true
          }
        }
      },
      "PostRevisionView": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PostRevisionBase"
          },
          {
            "properties": {
              "date_gmt": {},
              "guid": {
                "properties": {
                  "rendered": {}
                }
              },
              "modified_gmt": {}
            }
          }
        ]
      },
      "PostRevisionEmbed": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PostRevisionBase"
          },
          {
            "properties": {
              "guid": {
                "properties": {
                  "rendered": {}
                }
              },
              "title": {
                "properties": {
                  "rendered": {}
                }
              }
            }
          }
        ]
      },
      "PostRevisionEdit": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PostRevisionBase"
          },
          {
            "properties": {
              "guid": {
                "properties": {
                  "raw": {},
                  "rendered": {}
                }
              },
              "content": {
                "properties": {
                  "raw": {},
                  "block_version": {}
                }
              },
              "title": {
                "properties": {
                  "raw": {}
                }
              }
            }
          }
        ]
      },
      "PostRevisionResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PostRevisionView"
          },
          {
            "$ref": "#/components/schemas/PostRevisionEmbed"
          },
          {
            "$ref": "#/components/schemas/PostRevisionEdit"
          }
        ]
      },
      "SearchResultBase": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the object.",
            "type": [
              "integer",
              "string"
            ],
            "readOnly": true
          },
          "title": {
            "description": "The title for the object.",
            "type": "string",
            "readOnly": true
          },
          "url": {
            "description": "URL to the object.",
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "type": {
            "description": "Object type.",
            "type": "string",
            "enum": [
              "post",
              "term",
              "post-format"
            ],
            "readOnly": true
          },
          "subtype": {
            "description": "Object subtype.",
            "type": "string",
            "enum": [
              "post",
              "page",
              "category",
              "post_tag"
            ],
            "readOnly": true
          }
        }
      },
      "SearchResultBase-properties-id": {
        "description": "Unique identifier for the object.",
        "type": [
          "integer",
          "string"
        ],
        "readOnly": true
      },
      "SearchResultBase-properties-title": {
        "description": "The title for the object.",
        "type": "string",
        "readOnly": true
      },
      "url": {
        "description": "URL to the object.",
        "type": "string",
        "format": "uri",
        "readOnly": true
      },
      "type": {
        "description": "Object type.",
        "type": "string",
        "enum": [
          "post",
          "term",
          "post-format"
        ],
        "readOnly": true
      },
      "subtype": {
        "description": "Object subtype.",
        "type": "string",
        "enum": [
          "post",
          "page",
          "category",
          "post_tag"
        ],
        "readOnly": true
      },
      "SearchResultView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchResultBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/SearchResultBase-properties-id"
              },
              "title": {
                "$ref": "#/components/schemas/SearchResultBase-properties-title"
              },
              "url": {
                "$ref": "#/components/schemas/url"
              },
              "type": {
                "$ref": "#/components/schemas/type"
              },
              "subtype": {
                "$ref": "#/components/schemas/subtype"
              }
            }
          }
        ]
      },
      "SearchResultEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchResultBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/SearchResultBase-properties-id"
              },
              "title": {
                "$ref": "#/components/schemas/SearchResultBase-properties-title"
              },
              "url": {
                "$ref": "#/components/schemas/url"
              },
              "type": {
                "$ref": "#/components/schemas/type"
              },
              "subtype": {
                "$ref": "#/components/schemas/subtype"
              }
            }
          }
        ]
      },
      "SearchResultResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SearchResultView"
          },
          {
            "$ref": "#/components/schemas/SearchResultEmbed"
          }
        ]
      },
      "settings": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "title": "settings",
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Site title.",
            "default": null
          },
          "description": {
            "type": "string",
            "title": "Tagline",
            "description": "Site tagline.",
            "default": null
          },
          "url": {
            "type": "string",
            "title": "",
            "description": "Site URL.",
            "default": null,
            "format": "uri"
          },
          "email": {
            "type": "string",
            "title": "",
            "description": "This address is used for admin purposes, like new user notification.",
            "default": null,
            "format": "email"
          },
          "timezone": {
            "type": "string",
            "title": "",
            "description": "A city in the same timezone as you.",
            "default": null
          },
          "date_format": {
            "type": "string",
            "title": "",
            "description": "A date format for all date strings.",
            "default": null
          },
          "time_format": {
            "type": "string",
            "title": "",
            "description": "A time format for all time strings.",
            "default": null
          },
          "start_of_week": {
            "type": "integer",
            "title": "",
            "description": "A day number of the week that the week should start on.",
            "default": null
          },
          "language": {
            "type": "string",
            "title": "",
            "description": "WordPress locale code.",
            "default": "en_US"
          },
          "use_smilies": {
            "type": "boolean",
            "title": "",
            "description": "Convert emoticons like :-) and :-P to graphics on display.",
            "default": true
          },
          "default_category": {
            "type": "integer",
            "title": "",
            "description": "Default post category.",
            "default": null
          },
          "default_post_format": {
            "type": "string",
            "title": "",
            "description": "Default post format.",
            "default": null
          },
          "posts_per_page": {
            "type": "integer",
            "title": "Maximum posts per page",
            "description": "Blog pages show at most.",
            "default": 10
          },
          "show_on_front": {
            "type": "string",
            "title": "Show on front",
            "description": "What to show on the front page",
            "default": null
          },
          "page_on_front": {
            "type": "integer",
            "title": "Page on front",
            "description": "The ID of the page that should be displayed on the front page",
            "default": null
          },
          "page_for_posts": {
            "type": "integer",
            "title": "",
            "description": "The ID of the page that should display the latest posts",
            "default": null
          },
          "default_ping_status": {
            "type": "string",
            "title": "",
            "description": "Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.",
            "default": null,
            "enum": [
              "open",
              "closed"
            ]
          },
          "default_comment_status": {
            "type": "string",
            "title": "Allow comments on new posts",
            "description": "Allow people to submit comments on new posts.",
            "default": null,
            "enum": [
              "open",
              "closed"
            ]
          },
          "site_logo": {
            "type": "integer",
            "title": "Logo",
            "description": "Site logo.",
            "default": null
          },
          "site_icon": {
            "type": "integer",
            "title": "Icon",
            "description": "Site icon.",
            "default": null
          }
        }
      },
      "SidebarBase": {
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of sidebar.",
            "type": "string",
            "readOnly": true
          },
          "name": {
            "description": "Unique name identifying the sidebar.",
            "type": "string",
            "readOnly": true
          },
          "description": {
            "description": "Description of sidebar.",
            "type": "string",
            "readOnly": true
          },
          "class": {
            "description": "Extra CSS class to assign to the sidebar in the Widgets interface.",
            "type": "string",
            "readOnly": true
          },
          "before_widget": {
            "description": "HTML content to prepend to each widget's HTML output when assigned to this sidebar. Default is an opening list item element.",
            "type": "string",
            "default": "",
            "readOnly": true
          },
          "after_widget": {
            "description": "HTML content to append to each widget's HTML output when assigned to this sidebar. Default is a closing list item element.",
            "type": "string",
            "default": "",
            "readOnly": true
          },
          "before_title": {
            "description": "HTML content to prepend to the sidebar title when displayed. Default is an opening h2 element.",
            "type": "string",
            "default": "",
            "readOnly": true
          },
          "after_title": {
            "description": "HTML content to append to the sidebar title when displayed. Default is a closing h2 element.",
            "type": "string",
            "default": "",
            "readOnly": true
          },
          "status": {
            "description": "Status of sidebar.",
            "type": "string",
            "enum": [
              "active",
              "inactive"
            ],
            "readOnly": true
          },
          "widgets": {
            "description": "Nested widgets.",
            "type": "array",
            "items": {
              "type": [
                "object",
                "string"
              ]
            },
            "default": []
          }
        }
      },
      "SidebarBase-properties-id": {
        "description": "ID of sidebar.",
        "type": "string",
        "readOnly": true
      },
      "properties-name": {
        "description": "Unique name identifying the sidebar.",
        "type": "string",
        "readOnly": true
      },
      "description": {
        "description": "Description of sidebar.",
        "type": "string",
        "readOnly": true
      },
      "class": {
        "description": "Extra CSS class to assign to the sidebar in the Widgets interface.",
        "type": "string",
        "readOnly": true
      },
      "before_widget": {
        "description": "HTML content to prepend to each widget's HTML output when assigned to this sidebar. Default is an opening list item element.",
        "type": "string",
        "default": "",
        "readOnly": true
      },
      "after_widget": {
        "description": "HTML content to append to each widget's HTML output when assigned to this sidebar. Default is a closing list item element.",
        "type": "string",
        "default": "",
        "readOnly": true
      },
      "before_title": {
        "description": "HTML content to prepend to the sidebar title when displayed. Default is an opening h2 element.",
        "type": "string",
        "default": "",
        "readOnly": true
      },
      "after_title": {
        "description": "HTML content to append to the sidebar title when displayed. Default is a closing h2 element.",
        "type": "string",
        "default": "",
        "readOnly": true
      },
      "status": {
        "description": "Status of sidebar.",
        "type": "string",
        "enum": [
          "active",
          "inactive"
        ],
        "readOnly": true
      },
      "widgets": {
        "description": "Nested widgets.",
        "type": "array",
        "items": {
          "type": [
            "object",
            "string"
          ]
        },
        "default": []
      },
      "SidebarView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SidebarBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/SidebarBase-properties-id"
              },
              "name": {
                "$ref": "#/components/schemas/properties-name"
              },
              "description": {
                "$ref": "#/components/schemas/description"
              },
              "class": {
                "$ref": "#/components/schemas/class"
              },
              "before_widget": {
                "$ref": "#/components/schemas/before_widget"
              },
              "after_widget": {
                "$ref": "#/components/schemas/after_widget"
              },
              "before_title": {
                "$ref": "#/components/schemas/before_title"
              },
              "after_title": {
                "$ref": "#/components/schemas/after_title"
              },
              "status": {
                "$ref": "#/components/schemas/status"
              },
              "widgets": {
                "$ref": "#/components/schemas/widgets"
              }
            }
          }
        ]
      },
      "SidebarEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SidebarBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/SidebarBase-properties-id"
              },
              "name": {
                "$ref": "#/components/schemas/properties-name"
              },
              "status": {
                "$ref": "#/components/schemas/status"
              },
              "widgets": {
                "$ref": "#/components/schemas/widgets"
              }
            }
          }
        ]
      },
      "SidebarEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SidebarBase"
          }
        ]
      },
      "SidebarResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SidebarView"
          },
          {
            "$ref": "#/components/schemas/SidebarEmbed"
          },
          {
            "$ref": "#/components/schemas/SidebarEdit"
          }
        ]
      },
      "StatusBase": {
        "type": "object",
        "properties": {
          "name": {
            "description": "The title for the status.",
            "type": "string",
            "readOnly": true
          },
          "private": {
            "description": "Whether posts with this status should be private.",
            "type": "boolean",
            "readOnly": true
          },
          "protected": {
            "description": "Whether posts with this status should be protected.",
            "type": "boolean",
            "readOnly": true
          },
          "public": {
            "description": "Whether posts of this status should be shown in the front end of the site.",
            "type": "boolean",
            "readOnly": true
          },
          "queryable": {
            "description": "Whether posts with this status should be publicly-queryable.",
            "type": "boolean",
            "readOnly": true
          },
          "show_in_list": {
            "description": "Whether to include posts in the edit listing for their post type.",
            "type": "boolean",
            "readOnly": true
          },
          "slug": {
            "description": "An alphanumeric identifier for the status.",
            "type": "string",
            "readOnly": true
          },
          "date_floating": {
            "description": "Whether posts of this status may have floating published dates.",
            "type": "boolean",
            "readOnly": true
          }
        }
      },
      "StatusBase-properties-name": {
        "description": "The title for the status.",
        "type": "string",
        "readOnly": true
      },
      "public": {
        "description": "Whether posts of this status should be shown in the front end of the site.",
        "type": "boolean",
        "readOnly": true
      },
      "queryable": {
        "description": "Whether posts with this status should be publicly-queryable.",
        "type": "boolean",
        "readOnly": true
      },
      "properties-slug": {
        "description": "An alphanumeric identifier for the status.",
        "type": "string",
        "readOnly": true
      },
      "date_floating": {
        "description": "Whether posts of this status may have floating published dates.",
        "type": "boolean",
        "readOnly": true
      },
      "StatusView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StatusBase"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "$ref": "#/components/schemas/StatusBase-properties-name"
              },
              "public": {
                "$ref": "#/components/schemas/public"
              },
              "queryable": {
                "$ref": "#/components/schemas/queryable"
              },
              "slug": {
                "$ref": "#/components/schemas/properties-slug"
              },
              "date_floating": {
                "$ref": "#/components/schemas/date_floating"
              }
            }
          }
        ]
      },
      "StatusEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StatusBase"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "$ref": "#/components/schemas/StatusBase-properties-name"
              },
              "slug": {
                "$ref": "#/components/schemas/properties-slug"
              }
            }
          }
        ]
      },
      "private": {
        "description": "Whether posts with this status should be private.",
        "type": "boolean",
        "readOnly": true
      },
      "protected": {
        "description": "Whether posts with this status should be protected.",
        "type": "boolean",
        "readOnly": true
      },
      "show_in_list": {
        "description": "Whether to include posts in the edit listing for their post type.",
        "type": "boolean",
        "readOnly": true
      },
      "StatusEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StatusBase"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "$ref": "#/components/schemas/StatusBase-properties-name"
              },
              "private": {
                "$ref": "#/components/schemas/private"
              },
              "protected": {
                "$ref": "#/components/schemas/protected"
              },
              "public": {
                "$ref": "#/components/schemas/public"
              },
              "queryable": {
                "$ref": "#/components/schemas/queryable"
              },
              "show_in_list": {
                "$ref": "#/components/schemas/show_in_list"
              },
              "slug": {
                "$ref": "#/components/schemas/properties-slug"
              },
              "date_floating": {
                "$ref": "#/components/schemas/date_floating"
              }
            }
          }
        ]
      },
      "StatusResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/StatusView"
          },
          {
            "$ref": "#/components/schemas/StatusEmbed"
          },
          {
            "$ref": "#/components/schemas/StatusEdit"
          }
        ]
      },
      "TagBase": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier for the term.",
            "type": "integer",
            "readOnly": true
          },
          "count": {
            "description": "Number of published posts for the term.",
            "type": "integer",
            "readOnly": true
          },
          "description": {
            "description": "HTML description of the term.",
            "type": "string"
          },
          "link": {
            "description": "URL of the term.",
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "name": {
            "description": "HTML title for the term.",
            "type": "string"
          },
          "slug": {
            "description": "An alphanumeric identifier for the term unique to its type.",
            "type": "string"
          },
          "taxonomy": {
            "description": "Type attribution for the term.",
            "type": "string",
            "enum": [
              "post_tag"
            ],
            "readOnly": true
          },
          "meta": {
            "description": "Meta fields.",
            "type": "object"
          }
        }
      },
      "TagBase-properties-id": {
        "description": "Unique identifier for the term.",
        "type": "integer",
        "readOnly": true
      },
      "count": {
        "description": "Number of published posts for the term.",
        "type": "integer",
        "readOnly": true
      },
      "properties-description": {
        "description": "HTML description of the term.",
        "type": "string"
      },
      "properties-link": {
        "description": "URL of the term.",
        "type": "string",
        "format": "uri",
        "readOnly": true
      },
      "taxonomy": {
        "description": "Type attribution for the term.",
        "type": "string",
        "enum": [
          "post_tag"
        ],
        "readOnly": true
      },
      "meta": {
        "description": "Meta fields.",
        "type": "object"
      },
      "TagViewEdit": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "allOf": [
          {
            "$ref": "#/components/schemas/TagBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/TagBase-properties-id"
              },
              "count": {
                "$ref": "#/components/schemas/count"
              },
              "description": {
                "$ref": "#/components/schemas/properties-description"
              },
              "link": {
                "$ref": "#/components/schemas/properties-link"
              },
              "name": {
                "$ref": "#/components/schemas/name"
              },
              "slug": {
                "$ref": "#/components/schemas/slug"
              },
              "taxonomy": {
                "$ref": "#/components/schemas/taxonomy"
              },
              "meta": {
                "$ref": "#/components/schemas/meta"
              }
            }
          }
        ]
      },
      "TagEmbed": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "allOf": [
          {
            "$ref": "#/components/schemas/TagBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/TagBase-properties-id"
              },
              "link": {
                "$ref": "#/components/schemas/properties-link"
              },
              "name": {
                "$ref": "#/components/schemas/name"
              },
              "slug": {
                "$ref": "#/components/schemas/slug"
              },
              "taxonomy": {
                "$ref": "#/components/schemas/taxonomy"
              }
            }
          }
        ]
      },
      "TagResponse": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "oneOf": [
          {
            "$ref": "#/components/schemas/TagViewEdit"
          },
          {
            "$ref": "#/components/schemas/TagEmbed"
          }
        ]
      },
      "TaxonomyBase": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "type": "object",
        "properties": {
          "name": {
            "description": "The title for the taxonomy.",
            "type": "string",
            "readOnly": true
          },
          "slug": {
            "description": "An alphanumeric identifier for the taxonomy.",
            "type": "string",
            "readOnly": true
          },
          "rest_base": {
            "description": "REST base route for the taxonomy.",
            "type": "string",
            "readOnly": true
          },
          "rest_namespace": {
            "description": "REST namespace route for the taxonomy.",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "TaxonomyBase-properties-name": {
        "description": "The title for the taxonomy.",
        "type": "string",
        "readOnly": true
      },
      "TaxonomyBase-properties-slug": {
        "description": "An alphanumeric identifier for the taxonomy.",
        "type": "string",
        "readOnly": true
      },
      "rest_base": {
        "description": "REST base route for the taxonomy.",
        "type": "string",
        "readOnly": true
      },
      "rest_namespace": {
        "description": "REST namespace route for the taxonomy.",
        "type": "string",
        "readOnly": true
      },
      "TaxonomyView": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "allOf": [
          {
            "$ref": "#/components/schemas/TaxonomyBase"
          },
          {
            "type": "object",
            "properties": {
              "description": {
                "description": "A human-readable description of the taxonomy.",
                "type": "string",
                "readOnly": true
              },
              "hierarchical": {
                "description": "Whether or not the taxonomy should have children.",
                "type": "boolean",
                "readOnly": true
              },
              "name": {
                "$ref": "#/components/schemas/TaxonomyBase-properties-name"
              },
              "slug": {
                "$ref": "#/components/schemas/TaxonomyBase-properties-slug"
              },
              "types": {
                "description": "Types associated with the taxonomy.",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "readOnly": true
              },
              "rest_base": {
                "$ref": "#/components/schemas/rest_base"
              },
              "rest_namespace": {
                "$ref": "#/components/schemas/rest_namespace"
              }
            }
          }
        ]
      },
      "TaxonomyEmbed": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "allOf": [
          {
            "$ref": "#/components/schemas/TaxonomyBase"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "$ref": "#/components/schemas/TaxonomyBase-properties-name"
              },
              "slug": {
                "$ref": "#/components/schemas/TaxonomyBase-properties-slug"
              },
              "rest_base": {
                "$ref": "#/components/schemas/rest_base"
              },
              "rest_namespace": {
                "$ref": "#/components/schemas/rest_namespace"
              }
            }
          }
        ]
      },
      "TaxonomyEdit": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "allOf": [
          {
            "$ref": "#/components/schemas/TaxonomyBase"
          },
          {
            "type": "object",
            "properties": {
              "capabilities": {
                "description": "All capabilities used by the taxonomy.",
                "type": "object",
                "readOnly": true
              },
              "description": {
                "description": "A human-readable description of the taxonomy.",
                "type": "string",
                "readOnly": true
              },
              "hierarchical": {
                "description": "Whether or not the taxonomy should have children.",
                "type": "boolean",
                "readOnly": true
              },
              "labels": {
                "description": "Human-readable labels for the taxonomy for various contexts.",
                "type": "object",
                "readOnly": true
              },
              "show_cloud": {
                "description": "Whether or not the term cloud should be displayed.",
                "type": "boolean",
                "readOnly": true
              },
              "types": {
                "description": "Types associated with the taxonomy.",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "readOnly": true
              },
              "visibility": {
                "description": "The visibility settings for the taxonomy.",
                "type": "object",
                "readOnly": true,
                "properties": {
                  "public": {
                    "description": "Whether a taxonomy is intended for use publicly either via the admin interface or by front-end users.",
                    "type": "boolean"
                  },
                  "publicly_queryable": {
                    "description": "Whether the taxonomy is publicly queryable.",
                    "type": "boolean"
                  },
                  "show_ui": {
                    "description": "Whether to generate a default UI for managing this taxonomy.",
                    "type": "boolean"
                  },
                  "show_admin_column": {
                    "description": "Whether to allow automatic creation of taxonomy columns on associated post-types table.",
                    "type": "boolean"
                  },
                  "show_in_nav_menus": {
                    "description": "Whether to make the taxonomy available for selection in navigation menus.",
                    "type": "boolean"
                  },
                  "show_in_quick_edit": {
                    "description": "Whether to show the taxonomy in the quick/bulk edit panel.",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        ]
      },
      "TaxonomyResponse": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "oneOf": [
          {
            "$ref": "#/components/schemas/TaxonomyView"
          },
          {
            "$ref": "#/components/schemas/TaxonomyEmbed"
          },
          {
            "$ref": "#/components/schemas/TaxonomyEdit"
          }
        ]
      },
      "TaxonomyCollectionResponse": {
        "type": "object",
        "description": "A collection of taxonomy objects where each key is a taxonomy identifier.",
        "additionalProperties": {
          "$ref": "#/components/schemas/TaxonomyResponse"
        }
      },
      "WpTemplatePartBase": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "description": "ID of template.",
            "type": "string",
            "readOnly": true
          },
          "slug": {
            "description": "Unique slug identifying the template.",
            "type": "string",
            "minLength": 1,
            "pattern": "[a-zA-Z0-9_\\%-]+"
          },
          "theme": {
            "description": "Theme identifier for the template.",
            "type": "string"
          },
          "type": {
            "description": "Type of template.",
            "type": "string"
          },
          "source": {
            "description": "Source of template.",
            "type": "string",
            "readOnly": true
          },
          "origin": {
            "description": "Source of a customized template.",
            "type": "string",
            "readOnly": true
          },
          "content": {
            "description": "Content of template.",
            "type": [
              "object",
              "string"
            ],
            "default": "",
            "properties": {
              "raw": {
                "description": "Content for the template, as it exists in the database.",
                "type": "string"
              },
              "block_version": {
                "description": "Version of the content block format used by the template.",
                "type": "integer",
                "readOnly": true
              }
            }
          },
          "title": {
            "description": "Title of template.",
            "type": [
              "object",
              "string"
            ],
            "default": "",
            "properties": {
              "raw": {
                "description": "Title for the template, as it exists in the database.",
                "type": "string"
              },
              "rendered": {
                "description": "HTML title for the template, transformed for display.",
                "type": "string",
                "readOnly": true
              }
            }
          },
          "description": {
            "description": "Description of template.",
            "type": "string",
            "default": ""
          },
          "status": {
            "description": "Status of template.",
            "type": "string",
            "enum": [
              "publish",
              "future",
              "draft",
              "pending",
              "private"
            ],
            "default": "publish"
          },
          "wp_id": {
            "description": "Post ID.",
            "type": "integer",
            "readOnly": true
          },
          "has_theme_file": {
            "description": "Theme file exists.",
            "type": "boolean",
            "readOnly": true
          },
          "author": {
            "description": "The ID for the author of the template.",
            "type": "integer"
          },
          "modified": {
            "description": "The date the template was last modified, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "author_text": {
            "description": "Human readable text for the author.",
            "type": "string",
            "readOnly": true
          },
          "original_source": {
            "description": "Where the template originally comes from e.g. 'theme'.",
            "type": "string",
            "readOnly": true,
            "enum": [
              "theme",
              "plugin",
              "site",
              "user"
            ]
          },
          "area": {
            "description": "Where the template part is intended for use (header, footer, etc.).",
            "type": "string"
          }
        }
      },
      "WpTemplatePartBase-properties-id": {
        "description": "ID of template.",
        "type": "string",
        "readOnly": true
      },
      "WpTemplatePartBase-properties-slug": {
        "description": "Unique slug identifying the template.",
        "type": "string",
        "minLength": 1,
        "pattern": "[a-zA-Z0-9_\\%-]+"
      },
      "theme": {
        "description": "Theme identifier for the template.",
        "type": "string"
      },
      "properties-type": {
        "description": "Type of template.",
        "type": "string"
      },
      "source": {
        "description": "Source of template.",
        "type": "string",
        "readOnly": true
      },
      "origin": {
        "description": "Source of a customized template.",
        "type": "string",
        "readOnly": true
      },
      "WpTemplatePartBase-properties-description": {
        "description": "Description of template.",
        "type": "string",
        "default": ""
      },
      "properties-status": {
        "description": "Status of template.",
        "type": "string",
        "enum": [
          "publish",
          "future",
          "draft",
          "pending",
          "private"
        ],
        "default": "publish"
      },
      "wp_id": {
        "description": "Post ID.",
        "type": "integer",
        "readOnly": true
      },
      "has_theme_file": {
        "description": "Theme file exists.",
        "type": "boolean",
        "readOnly": true
      },
      "author_text": {
        "description": "Human readable text for the author.",
        "type": "string",
        "readOnly": true
      },
      "original_source": {
        "description": "Where the template originally comes from e.g. 'theme'.",
        "type": "string",
        "readOnly": true,
        "enum": [
          "theme",
          "plugin",
          "site",
          "user"
        ]
      },
      "area": {
        "description": "Where the template part is intended for use (header, footer, etc.).",
        "type": "string"
      },
      "WpTemplatePartView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WpTemplatePartBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/WpTemplatePartBase-properties-id"
              },
              "slug": {
                "$ref": "#/components/schemas/WpTemplatePartBase-properties-slug"
              },
              "theme": {
                "$ref": "#/components/schemas/theme"
              },
              "type": {
                "$ref": "#/components/schemas/properties-type"
              },
              "source": {
                "$ref": "#/components/schemas/source"
              },
              "origin": {
                "$ref": "#/components/schemas/origin"
              },
              "description": {
                "$ref": "#/components/schemas/WpTemplatePartBase-properties-description"
              },
              "status": {
                "$ref": "#/components/schemas/properties-status"
              },
              "wp_id": {
                "$ref": "#/components/schemas/wp_id"
              },
              "has_theme_file": {
                "$ref": "#/components/schemas/has_theme_file"
              },
              "author_text": {
                "$ref": "#/components/schemas/author_text"
              },
              "original_source": {
                "$ref": "#/components/schemas/original_source"
              },
              "area": {
                "$ref": "#/components/schemas/area"
              }
            }
          }
        ]
      },
      "WpTemplatePartEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WpTemplatePartBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/WpTemplatePartBase-properties-id"
              },
              "slug": {
                "$ref": "#/components/schemas/WpTemplatePartBase-properties-slug"
              },
              "theme": {
                "$ref": "#/components/schemas/theme"
              },
              "type": {
                "$ref": "#/components/schemas/properties-type"
              },
              "description": {
                "$ref": "#/components/schemas/WpTemplatePartBase-properties-description"
              },
              "area": {
                "$ref": "#/components/schemas/area"
              }
            }
          }
        ]
      },
      "content": {
        "description": "Content of template.",
        "type": [
          "object",
          "string"
        ],
        "default": "",
        "properties": {
          "raw": {
            "description": "Content for the template, as it exists in the database.",
            "type": "string"
          },
          "block_version": {
            "description": "Version of the content block format used by the template.",
            "type": "integer",
            "readOnly": true
          }
        }
      },
      "WpTemplatePartBase-properties-title": {
        "description": "Title of template.",
        "type": [
          "object",
          "string"
        ],
        "default": "",
        "properties": {
          "raw": {
            "description": "Title for the template, as it exists in the database.",
            "type": "string"
          },
          "rendered": {
            "description": "HTML title for the template, transformed for display.",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "modified": {
        "description": "The date the template was last modified, in the site's timezone.",
        "type": "string",
        "format": "date-time",
        "readOnly": true
      },
      "properties-author": {
        "description": "The ID for the author of the template.",
        "type": "integer"
      },
      "WpTemplatePartEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WpTemplatePartBase"
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "$ref": "#/components/schemas/content"
              },
              "title": {
                "$ref": "#/components/schemas/WpTemplatePartBase-properties-title"
              },
              "modified": {
                "$ref": "#/components/schemas/modified"
              },
              "author": {
                "$ref": "#/components/schemas/properties-author"
              }
            }
          }
        ]
      },
      "WpTemplatePartResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/WpTemplatePartView"
          },
          {
            "$ref": "#/components/schemas/WpTemplatePartEmbed"
          },
          {
            "$ref": "#/components/schemas/WpTemplatePartEdit"
          }
        ]
      },
      "WpTemplateBase": {
        "type": "object",
        "required": [
          "slug"
        ],
        "properties": {
          "id": {
            "description": "ID of template.",
            "type": "string",
            "readOnly": true
          },
          "slug": {
            "description": "Unique slug identifying the template.",
            "type": "string",
            "minLength": 1,
            "pattern": "[a-zA-Z0-9_\\%-]+"
          },
          "theme": {
            "description": "Theme identifier for the template.",
            "type": "string"
          },
          "type": {
            "description": "Type of template.",
            "type": "string"
          },
          "source": {
            "description": "Source of template.",
            "type": "string",
            "readOnly": true
          },
          "origin": {
            "description": "Source of a customized template.",
            "type": "string",
            "readOnly": true
          },
          "content": {
            "description": "Content of template.",
            "type": [
              "object",
              "string"
            ],
            "default": "",
            "properties": {
              "raw": {
                "description": "Content for the template, as it exists in the database.",
                "type": "string"
              },
              "block_version": {
                "description": "Version of the content block format used by the template.",
                "type": "integer",
                "readOnly": true
              }
            }
          },
          "title": {
            "description": "Title of template.",
            "type": [
              "object",
              "string"
            ],
            "default": "",
            "properties": {
              "raw": {
                "description": "Title for the template, as it exists in the database.",
                "type": "string"
              },
              "rendered": {
                "description": "HTML title for the template, transformed for display.",
                "type": "string",
                "readOnly": true
              }
            }
          },
          "description": {
            "description": "Description of template.",
            "type": "string",
            "default": ""
          },
          "status": {
            "description": "Status of template.",
            "type": "string",
            "enum": [
              "publish",
              "future",
              "draft",
              "pending",
              "private"
            ],
            "default": "publish"
          },
          "wp_id": {
            "description": "Post ID.",
            "type": "integer",
            "readOnly": true
          },
          "has_theme_file": {
            "description": "Theme file exists.",
            "type": "boolean",
            "readOnly": true
          },
          "author": {
            "description": "The ID for the author of the template.",
            "type": "integer"
          },
          "modified": {
            "description": "The date the template was last modified, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "author_text": {
            "description": "Human readable text for the author.",
            "type": "string",
            "readOnly": true
          },
          "original_source": {
            "description": "Where the template originally comes from e.g. 'theme'.",
            "type": "string",
            "readOnly": true,
            "enum": [
              "theme",
              "plugin",
              "site",
              "user"
            ]
          },
          "is_custom": {
            "description": "Whether a template is a custom template.",
            "type": "boolean",
            "readOnly": true
          },
          "plugin": {
            "description": "Plugin that registered the template.",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "WpTemplateBase-properties-id": {
        "description": "ID of template.",
        "type": "string",
        "readOnly": true
      },
      "WpTemplateBase-properties-slug": {
        "description": "Unique slug identifying the template.",
        "type": "string",
        "minLength": 1,
        "pattern": "[a-zA-Z0-9_\\%-]+"
      },
      "WpTemplateBase-properties-description": {
        "description": "Description of template.",
        "type": "string",
        "default": ""
      },
      "is_custom": {
        "description": "Whether a template is a custom template.",
        "type": "boolean",
        "readOnly": true
      },
      "plugin": {
        "description": "Plugin that registered the template.",
        "type": "string",
        "readOnly": true
      },
      "WpTemplateView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WpTemplateBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/WpTemplateBase-properties-id"
              },
              "slug": {
                "$ref": "#/components/schemas/WpTemplateBase-properties-slug"
              },
              "theme": {
                "$ref": "#/components/schemas/theme"
              },
              "type": {
                "$ref": "#/components/schemas/properties-type"
              },
              "source": {
                "$ref": "#/components/schemas/source"
              },
              "origin": {
                "$ref": "#/components/schemas/origin"
              },
              "description": {
                "$ref": "#/components/schemas/WpTemplateBase-properties-description"
              },
              "status": {
                "$ref": "#/components/schemas/properties-status"
              },
              "wp_id": {
                "$ref": "#/components/schemas/wp_id"
              },
              "has_theme_file": {
                "$ref": "#/components/schemas/has_theme_file"
              },
              "author_text": {
                "$ref": "#/components/schemas/author_text"
              },
              "original_source": {
                "$ref": "#/components/schemas/original_source"
              },
              "is_custom": {
                "$ref": "#/components/schemas/is_custom"
              },
              "plugin": {
                "$ref": "#/components/schemas/plugin"
              }
            }
          }
        ]
      },
      "WpTemplateEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WpTemplateBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/WpTemplateBase-properties-id"
              },
              "slug": {
                "$ref": "#/components/schemas/WpTemplateBase-properties-slug"
              },
              "theme": {
                "$ref": "#/components/schemas/theme"
              },
              "type": {
                "$ref": "#/components/schemas/properties-type"
              },
              "description": {
                "$ref": "#/components/schemas/WpTemplateBase-properties-description"
              },
              "is_custom": {
                "$ref": "#/components/schemas/is_custom"
              }
            }
          }
        ]
      },
      "WpTemplateBase-properties-title": {
        "description": "Title of template.",
        "type": [
          "object",
          "string"
        ],
        "default": "",
        "properties": {
          "raw": {
            "description": "Title for the template, as it exists in the database.",
            "type": "string"
          },
          "rendered": {
            "description": "HTML title for the template, transformed for display.",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "WpTemplateEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WpTemplateBase"
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "$ref": "#/components/schemas/content"
              },
              "title": {
                "$ref": "#/components/schemas/WpTemplateBase-properties-title"
              },
              "modified": {
                "$ref": "#/components/schemas/modified"
              },
              "author": {
                "$ref": "#/components/schemas/properties-author"
              }
            }
          }
        ]
      },
      "WpTemplateResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/WpTemplateView"
          },
          {
            "$ref": "#/components/schemas/WpTemplateEmbed"
          },
          {
            "$ref": "#/components/schemas/WpTemplateEdit"
          }
        ]
      },
      "ThemeResponse": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "title": "theme",
        "type": "object",
        "properties": {
          "stylesheet": {
            "description": "The theme's stylesheet. This uniquely identifies the theme.",
            "type": "string",
            "readOnly": true
          },
          "stylesheet_uri": {
            "description": "The uri for the theme's stylesheet directory.",
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "template": {
            "description": "The theme's template. If this is a child theme, this refers to the parent theme, otherwise this is the same as the theme's stylesheet.",
            "type": "string",
            "readOnly": true
          },
          "template_uri": {
            "description": "The uri for the theme's template directory. If this is a child theme, this refers to the parent theme, otherwise this is the same as the theme's stylesheet directory.",
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "author": {
            "description": "The theme author.",
            "type": "object",
            "readOnly": true,
            "properties": {
              "raw": {
                "description": "The theme author's name, as found in the theme header.",
                "type": "string"
              },
              "rendered": {
                "description": "HTML for the theme author, transformed for display.",
                "type": "string"
              }
            }
          },
          "author_uri": {
            "description": "The website of the theme author.",
            "type": "object",
            "readOnly": true,
            "properties": {
              "raw": {
                "description": "The website of the theme author, as found in the theme header.",
                "type": "string",
                "format": "uri"
              },
              "rendered": {
                "description": "The website of the theme author, transformed for display.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "description": {
            "description": "A description of the theme.",
            "type": "object",
            "readOnly": true,
            "properties": {
              "raw": {
                "description": "The theme description, as found in the theme header.",
                "type": "string"
              },
              "rendered": {
                "description": "The theme description, transformed for display.",
                "type": "string"
              }
            }
          },
          "is_block_theme": {
            "description": "Whether the theme is a block-based theme.",
            "type": "boolean",
            "readOnly": true
          },
          "name": {
            "description": "The name of the theme.",
            "type": "object",
            "readOnly": true,
            "properties": {
              "raw": {
                "description": "The theme name, as found in the theme header.",
                "type": "string"
              },
              "rendered": {
                "description": "The theme name, transformed for display.",
                "type": "string"
              }
            }
          },
          "requires_php": {
            "description": "The minimum PHP version required for the theme to work.",
            "type": "string",
            "readOnly": true
          },
          "requires_wp": {
            "description": "The minimum WordPress version required for the theme to work.",
            "type": "string",
            "readOnly": true
          },
          "screenshot": {
            "description": "The theme's screenshot URL.",
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "tags": {
            "description": "Tags indicating styles and features of the theme.",
            "type": "object",
            "readOnly": true,
            "properties": {
              "raw": {
                "description": "The theme tags, as found in the theme header.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "rendered": {
                "description": "The theme tags, transformed for display.",
                "type": "string"
              }
            }
          },
          "textdomain": {
            "description": "The theme's text domain.",
            "type": "string",
            "readOnly": true
          },
          "theme_supports": {
            "description": "Features supported by this theme.",
            "type": "object",
            "readOnly": true,
            "properties": {
              "align-wide": {
                "description": "Whether theme opts in to wide alignment CSS class.",
                "type": "boolean",
                "default": false
              },
              "automatic-feed-links": {
                "description": "Whether posts and comments RSS feed links are added to head.",
                "type": "boolean",
                "default": false
              },
              "block-templates": {
                "description": "Whether a theme uses block-based templates.",
                "type": "boolean",
                "default": false
              },
              "block-template-parts": {
                "description": "Whether a theme uses block-based template parts.",
                "type": "boolean",
                "default": false
              },
              "custom-background": {
                "description": "Custom background if defined by the theme.",
                "type": [
                  "boolean",
                  "object"
                ],
                "default": false,
                "properties": {
                  "default-image": {
                    "type": "string",
                    "format": "uri"
                  },
                  "default-preset": {
                    "type": "string",
                    "enum": [
                      "default",
                      "fill",
                      "fit",
                      "repeat",
                      "custom"
                    ]
                  },
                  "default-position-x": {
                    "type": "string",
                    "enum": [
                      "left",
                      "center",
                      "right"
                    ]
                  },
                  "default-position-y": {
                    "type": "string",
                    "enum": [
                      "left",
                      "center",
                      "right"
                    ]
                  },
                  "default-size": {
                    "type": "string",
                    "enum": [
                      "auto",
                      "contain",
                      "cover"
                    ]
                  },
                  "default-repeat": {
                    "type": "string",
                    "enum": [
                      "repeat-x",
                      "repeat-y",
                      "repeat",
                      "no-repeat"
                    ]
                  },
                  "default-attachment": {
                    "type": "string",
                    "enum": [
                      "scroll",
                      "fixed"
                    ]
                  },
                  "default-color": {
                    "type": "string"
                  }
                },
                "unevaluatedProperties": false
              },
              "custom-header": {
                "description": "Custom header if defined by the theme.",
                "type": [
                  "boolean",
                  "object"
                ],
                "default": false,
                "properties": {
                  "default-image": {
                    "type": "string",
                    "format": "uri"
                  },
                  "random-default": {
                    "type": "boolean"
                  },
                  "width": {
                    "type": "integer"
                  },
                  "height": {
                    "type": "integer"
                  },
                  "flex-height": {
                    "type": "boolean"
                  },
                  "flex-width": {
                    "type": "boolean"
                  },
                  "default-text-color": {
                    "type": "string"
                  },
                  "header-text": {
                    "type": "boolean"
                  },
                  "uploads": {
                    "type": "boolean"
                  },
                  "video": {
                    "type": "boolean"
                  }
                },
                "unevaluatedProperties": false
              },
              "custom-logo": {
                "description": "Custom logo if defined by the theme.",
                "type": [
                  "boolean",
                  "object"
                ],
                "default": false,
                "properties": {
                  "width": {
                    "type": "integer"
                  },
                  "height": {
                    "type": "integer"
                  },
                  "flex-width": {
                    "type": "boolean"
                  },
                  "flex-height": {
                    "type": "boolean"
                  },
                  "header-text": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "unlink-homepage-logo": {
                    "type": "boolean"
                  }
                },
                "unevaluatedProperties": false
              },
              "customize-selective-refresh-widgets": {
                "description": "Whether the theme enables Selective Refresh for Widgets being managed with the Customizer.",
                "type": "boolean",
                "default": false
              },
              "dark-editor-style": {
                "description": "Whether theme opts in to the dark editor style UI.",
                "type": "boolean",
                "default": false
              },
              "disable-custom-colors": {
                "description": "Whether the theme disables custom colors.",
                "type": "boolean",
                "default": false
              },
              "disable-custom-font-sizes": {
                "description": "Whether the theme disables custom font sizes.",
                "type": "boolean",
                "default": false
              },
              "disable-custom-gradients": {
                "description": "Whether the theme disables custom gradients.",
                "type": "boolean",
                "default": false
              },
              "disable-layout-styles": {
                "description": "Whether the theme disables generated layout styles.",
                "type": "boolean",
                "default": false
              },
              "editor-color-palette": {
                "description": "Custom color palette if defined by the theme.",
                "type": [
                  "boolean",
                  "array"
                ],
                "default": false,
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "color": {
                      "type": "string"
                    }
                  },
                  "unevaluatedProperties": false
                }
              },
              "editor-font-sizes": {
                "description": "Custom font sizes if defined by the theme.",
                "type": [
                  "boolean",
                  "array"
                ],
                "default": false,
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "size": {
                      "type": "number"
                    },
                    "slug": {
                      "type": "string"
                    }
                  },
                  "unevaluatedProperties": false
                }
              },
              "editor-gradient-presets": {
                "description": "Custom gradient presets if defined by the theme.",
                "type": [
                  "boolean",
                  "array"
                ],
                "default": false,
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "gradient": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    }
                  },
                  "unevaluatedProperties": false
                }
              },
              "editor-spacing-sizes": {
                "description": "Custom spacing sizes if defined by the theme.",
                "type": [
                  "boolean",
                  "array"
                ],
                "default": false,
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "size": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    }
                  },
                  "unevaluatedProperties": false
                }
              },
              "editor-styles": {
                "description": "Whether theme opts in to the editor styles CSS wrapper.",
                "type": "boolean",
                "default": false
              },
              "html5": {
                "description": "Allows use of HTML5 markup for search forms, comment forms, comment lists, gallery, and caption.",
                "type": [
                  "boolean",
                  "array"
                ],
                "default": false,
                "items": {
                  "type": "string",
                  "enum": [
                    "search-form",
                    "comment-form",
                    "comment-list",
                    "gallery",
                    "caption",
                    "script",
                    "style"
                  ]
                }
              },
              "formats": {
                "description": "Post formats supported.",
                "type": "array",
                "default": [
                  "standard"
                ],
                "items": {
                  "type": "string",
                  "enum": [
                    "standard",
                    "aside",
                    "chat",
                    "gallery",
                    "link",
                    "image",
                    "quote",
                    "status",
                    "video",
                    "audio"
                  ]
                }
              },
              "post-thumbnails": {
                "description": "The post types that support thumbnails or true if all post types are supported.",
                "type": [
                  "boolean",
                  "array"
                ],
                "default": false,
                "items": {
                  "type": "string"
                }
              },
              "responsive-embeds": {
                "description": "Whether the theme supports responsive embedded content.",
                "type": "boolean",
                "default": false
              },
              "title-tag": {
                "description": "Whether the theme can manage the document title tag.",
                "type": "boolean",
                "default": false
              },
              "wp-block-styles": {
                "description": "Whether theme opts in to default WordPress block styles for viewing.",
                "type": "boolean",
                "default": false
              }
            }
          },
          "theme_uri": {
            "description": "The URI of the theme's webpage.",
            "type": "object",
            "readOnly": true,
            "properties": {
              "raw": {
                "description": "The URI of the theme's webpage, as found in the theme header.",
                "type": "string",
                "format": "uri"
              },
              "rendered": {
                "description": "The URI of the theme's webpage, transformed for display.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "version": {
            "description": "The theme's current version.",
            "type": "string",
            "readOnly": true
          },
          "status": {
            "description": "A named status for the theme.",
            "type": "string",
            "enum": [
              "inactive",
              "active"
            ]
          }
        }
      },
      "TypeBase": {
        "type": "object",
        "properties": {
          "name": {
            "description": "The title for the post type.",
            "type": "string",
            "readOnly": true
          },
          "slug": {
            "description": "An alphanumeric identifier for the post type.",
            "type": "string",
            "readOnly": true
          },
          "rest_base": {
            "description": "REST base route for the post type.",
            "type": "string",
            "readOnly": true
          },
          "rest_namespace": {
            "description": "REST route's namespace for the post type.",
            "type": "string",
            "readOnly": true
          },
          "visibility": {
            "description": "The visibility settings for the post type.",
            "type": "object",
            "readOnly": true,
            "properties": {
              "show_ui": {
                "description": "Whether to generate a default UI for managing this post type.",
                "type": "boolean"
              },
              "show_in_nav_menus": {
                "description": "Whether to make the post type available for selection in navigation menus.",
                "type": "boolean"
              }
            }
          },
          "icon": {
            "description": "The icon for the post type.",
            "type": [
              "string",
              "null"
            ],
            "readOnly": true
          },
          "template": {
            "description": "The block template associated with the post type.",
            "type": [
              "array"
            ],
            "readOnly": true
          },
          "template_lock": {
            "description": "The template_lock associated with the post type, or false if none.",
            "type": [
              "string",
              "boolean"
            ],
            "enum": [
              "all",
              "insert",
              "contentOnly",
              false
            ],
            "readOnly": true
          }
        }
      },
      "TypeView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TypeBase"
          },
          {
            "type": "object",
            "properties": {
              "description": {
                "description": "A human-readable description of the post type.",
                "type": "string",
                "readOnly": true
              },
              "hierarchical": {
                "description": "Whether or not the post type should have children.",
                "type": "boolean",
                "readOnly": true
              },
              "has_archive": {
                "description": "If the value is a string, the value will be used as the archive slug. If the value is false the post type has no archive.",
                "type": [
                  "string",
                  "boolean"
                ],
                "readOnly": true
              },
              "taxonomies": {
                "description": "Taxonomies associated with post type.",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "readOnly": true
              }
            }
          }
        ]
      },
      "TypeEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TypeBase"
          }
        ]
      },
      "TypeEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TypeBase"
          },
          {
            "type": "object",
            "properties": {
              "capabilities": {
                "description": "All capabilities used by the post type.",
                "type": "object",
                "readOnly": true
              },
              "description": {
                "description": "A human-readable description of the post type.",
                "type": "string",
                "readOnly": true
              },
              "hierarchical": {
                "description": "Whether or not the post type should have children.",
                "type": "boolean",
                "readOnly": true
              },
              "viewable": {
                "description": "Whether or not the post type can be viewed.",
                "type": "boolean",
                "readOnly": true
              },
              "labels": {
                "description": "Human-readable labels for the post type for various contexts.",
                "type": "object",
                "readOnly": true
              },
              "supports": {
                "description": "All features, supported by the post type.",
                "type": "object",
                "readOnly": true
              },
              "has_archive": {
                "description": "If the value is a string, the value will be used as the archive slug. If the value is false the post type has no archive.",
                "type": [
                  "string",
                  "boolean"
                ],
                "readOnly": true
              },
              "taxonomies": {
                "description": "Taxonomies associated with post type.",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "readOnly": true
              },
              "visibility": {
                "description": "The visibility settings for the post type.",
                "type": "object",
                "readOnly": true,
                "properties": {
                  "show_ui": {
                    "description": "Whether to generate a default UI for managing this post type.",
                    "type": "boolean"
                  },
                  "show_in_nav_menus": {
                    "description": "Whether to make the post type available for selection in navigation menus.",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        ]
      },
      "TypeResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/TypeView"
          },
          {
            "$ref": "#/components/schemas/TypeEmbed"
          },
          {
            "$ref": "#/components/schemas/TypeEdit"
          }
        ]
      },
      "UserBase": {
        "type": "object",
        "required": [
          "username",
          "email",
          "password"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier for the user.",
            "type": "integer",
            "readOnly": true
          },
          "username": {
            "description": "Login name for the user.",
            "type": "string"
          },
          "name": {
            "description": "Display name for the user.",
            "type": "string"
          },
          "first_name": {
            "description": "First name for the user.",
            "type": "string"
          },
          "last_name": {
            "description": "Last name for the user.",
            "type": "string"
          },
          "email": {
            "description": "The email address for the user.",
            "type": "string",
            "format": "email"
          },
          "url": {
            "description": "URL of the user.",
            "type": "string",
            "format": "uri"
          },
          "description": {
            "description": "Description of the user.",
            "type": "string"
          },
          "link": {
            "description": "Author URL of the user.",
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "locale": {
            "description": "Locale for the user.",
            "type": "string",
            "enum": [
              "",
              "en_US"
            ]
          },
          "nickname": {
            "description": "The nickname for the user.",
            "type": "string"
          },
          "slug": {
            "description": "An alphanumeric identifier for the user.",
            "type": "string"
          },
          "registered_date": {
            "description": "Registration date for the user.",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "roles": {
            "description": "Roles assigned to the user.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "password": {
            "description": "Password for the user (never included).",
            "type": "string"
          },
          "capabilities": {
            "description": "All capabilities assigned to the user.",
            "type": "object",
            "readOnly": true
          },
          "extra_capabilities": {
            "description": "Any extra capabilities assigned to the user.",
            "type": "object",
            "readOnly": true
          },
          "avatar_urls": {
            "description": "Avatar URLs for the user.",
            "type": "object",
            "readOnly": true,
            "properties": {
              "24": {
                "description": "Avatar URL with image size of 24 pixels.",
                "type": "string",
                "format": "uri"
              },
              "48": {
                "description": "Avatar URL with image size of 48 pixels.",
                "type": "string",
                "format": "uri"
              },
              "96": {
                "description": "Avatar URL with image size of 96 pixels.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "meta": {
            "description": "Meta fields.",
            "type": "object",
            "properties": {
              "persisted_preferences": {
                "type": "object",
                "properties": {
                  "_modified": {
                    "description": "The date and time the preferences were updated.",
                    "type": "string",
                    "format": "date-time"
                  }
                },
                "unevaluatedProperties": true
              }
            }
          }
        }
      },
      "UserBase-properties-id": {
        "description": "Unique identifier for the user.",
        "type": "integer",
        "readOnly": true
      },
      "UserBase-properties-name": {
        "description": "Display name for the user.",
        "type": "string"
      },
      "properties-url": {
        "description": "URL of the user.",
        "type": "string",
        "format": "uri"
      },
      "UserBase-properties-description": {
        "description": "Description of the user.",
        "type": "string"
      },
      "UserBase-properties-link": {
        "description": "Author URL of the user.",
        "type": "string",
        "format": "uri",
        "readOnly": true
      },
      "UserBase-properties-slug": {
        "description": "An alphanumeric identifier for the user.",
        "type": "string"
      },
      "avatar_urls": {
        "description": "Avatar URLs for the user.",
        "type": "object",
        "readOnly": true,
        "properties": {
          "24": {
            "description": "Avatar URL with image size of 24 pixels.",
            "type": "string",
            "format": "uri"
          },
          "48": {
            "description": "Avatar URL with image size of 48 pixels.",
            "type": "string",
            "format": "uri"
          },
          "96": {
            "description": "Avatar URL with image size of 96 pixels.",
            "type": "string",
            "format": "uri"
          }
        }
      },
      "properties-meta": {
        "description": "Meta fields.",
        "type": "object",
        "properties": {
          "persisted_preferences": {
            "type": "object",
            "properties": {
              "_modified": {
                "description": "The date and time the preferences were updated.",
                "type": "string",
                "format": "date-time"
              }
            },
            "unevaluatedProperties": true
          }
        }
      },
      "UserView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/UserBase-properties-id"
              },
              "name": {
                "$ref": "#/components/schemas/UserBase-properties-name"
              },
              "url": {
                "$ref": "#/components/schemas/properties-url"
              },
              "description": {
                "$ref": "#/components/schemas/UserBase-properties-description"
              },
              "link": {
                "$ref": "#/components/schemas/UserBase-properties-link"
              },
              "slug": {
                "$ref": "#/components/schemas/UserBase-properties-slug"
              },
              "avatar_urls": {
                "$ref": "#/components/schemas/avatar_urls"
              },
              "meta": {
                "$ref": "#/components/schemas/properties-meta"
              }
            }
          }
        ]
      },
      "UserEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/UserBase-properties-id"
              },
              "name": {
                "$ref": "#/components/schemas/UserBase-properties-name"
              },
              "url": {
                "$ref": "#/components/schemas/properties-url"
              },
              "link": {
                "$ref": "#/components/schemas/UserBase-properties-link"
              },
              "slug": {
                "$ref": "#/components/schemas/UserBase-properties-slug"
              },
              "avatar_urls": {
                "$ref": "#/components/schemas/avatar_urls"
              }
            }
          }
        ]
      },
      "username": {
        "description": "Login name for the user.",
        "type": "string"
      },
      "first_name": {
        "description": "First name for the user.",
        "type": "string"
      },
      "last_name": {
        "description": "Last name for the user.",
        "type": "string"
      },
      "email": {
        "description": "The email address for the user.",
        "type": "string",
        "format": "email"
      },
      "locale": {
        "description": "Locale for the user.",
        "type": "string",
        "enum": [
          "",
          "en_US"
        ]
      },
      "nickname": {
        "description": "The nickname for the user.",
        "type": "string"
      },
      "registered_date": {
        "description": "Registration date for the user.",
        "type": "string",
        "format": "date-time",
        "readOnly": true
      },
      "roles": {
        "description": "Roles assigned to the user.",
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "capabilities": {
        "description": "All capabilities assigned to the user.",
        "type": "object",
        "readOnly": true
      },
      "extra_capabilities": {
        "description": "Any extra capabilities assigned to the user.",
        "type": "object",
        "readOnly": true
      },
      "UserEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserBase"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "$ref": "#/components/schemas/username"
              },
              "first_name": {
                "$ref": "#/components/schemas/first_name"
              },
              "last_name": {
                "$ref": "#/components/schemas/last_name"
              },
              "email": {
                "$ref": "#/components/schemas/email"
              },
              "locale": {
                "$ref": "#/components/schemas/locale"
              },
              "nickname": {
                "$ref": "#/components/schemas/nickname"
              },
              "registered_date": {
                "$ref": "#/components/schemas/registered_date"
              },
              "roles": {
                "$ref": "#/components/schemas/roles"
              },
              "capabilities": {
                "$ref": "#/components/schemas/capabilities"
              },
              "extra_capabilities": {
                "$ref": "#/components/schemas/extra_capabilities"
              },
              "meta": {
                "$ref": "#/components/schemas/properties-meta"
              }
            }
          }
        ]
      },
      "UserResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/UserView"
          },
          {
            "$ref": "#/components/schemas/UserEmbed"
          },
          {
            "$ref": "#/components/schemas/UserEdit"
          }
        ]
      },
      "ApplicationPasswordBase": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "uuid": {
            "description": "The unique identifier for the application password.",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "app_id": {
            "description": "A UUID provided by the application to uniquely identify it.",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "The name of the application password.",
            "type": "string",
            "minLength": 1,
            "pattern": ".*\\S.*"
          },
          "password": {
            "description": "The generated password. Only available after adding an application.",
            "type": "string",
            "readOnly": true
          },
          "created": {
            "description": "The GMT date the application password was created.",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "last_used": {
            "description": "The GMT date the application password was last used.",
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "readOnly": true
          },
          "last_ip": {
            "description": "The IP address the application password was last used by.",
            "type": [
              "string",
              "null"
            ],
            "format": "ip",
            "readOnly": true
          }
        }
      },
      "ApplicationPasswordView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplicationPasswordBase"
          }
        ]
      },
      "ApplicationPasswordEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplicationPasswordBase"
          }
        ]
      },
      "ApplicationPasswordEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplicationPasswordBase"
          }
        ]
      },
      "ApplicationPasswordResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ApplicationPasswordView"
          },
          {
            "$ref": "#/components/schemas/ApplicationPasswordEmbed"
          },
          {
            "$ref": "#/components/schemas/ApplicationPasswordEdit"
          }
        ]
      },
      "WidgetTypeBase": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique slug identifying the widget type.",
            "type": "string",
            "readOnly": true
          },
          "name": {
            "description": "Human-readable name identifying the widget type.",
            "type": "string",
            "default": "",
            "readOnly": true
          },
          "description": {
            "description": "Description of the widget.",
            "type": "string",
            "default": ""
          },
          "is_multi": {
            "description": "Whether the widget supports multiple instances.",
            "type": "boolean",
            "readOnly": true
          },
          "classname": {
            "description": "Class name.",
            "type": "string",
            "default": "",
            "readOnly": true
          }
        }
      },
      "WidgetTypeView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WidgetTypeBase"
          }
        ]
      },
      "WidgetTypeEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WidgetTypeBase"
          }
        ]
      },
      "WidgetTypeEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WidgetTypeBase"
          }
        ]
      },
      "WidgetTypeResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/WidgetTypeView"
          },
          {
            "$ref": "#/components/schemas/WidgetTypeEmbed"
          },
          {
            "$ref": "#/components/schemas/WidgetTypeEdit"
          }
        ]
      },
      "WidgetBase": {
        "type": "object",
        "required": [
          "sidebar"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier for the widget.",
            "type": "string"
          },
          "id_base": {
            "description": "The type of the widget. Corresponds to ID in widget-types endpoint.",
            "type": "string"
          },
          "sidebar": {
            "description": "The sidebar the widget belongs to.",
            "type": "string",
            "default": "wp_inactive_widgets"
          },
          "rendered": {
            "description": "HTML representation of the widget.",
            "type": "string",
            "readOnly": true
          },
          "rendered_form": {
            "description": "HTML representation of the widget admin form.",
            "type": "string",
            "readOnly": true
          },
          "instance": {
            "description": "Instance settings of the widget, if supported.",
            "type": "object",
            "default": null,
            "properties": {
              "encoded": {
                "description": "Base64 encoded representation of the instance settings.",
                "type": "string"
              },
              "hash": {
                "description": "Cryptographic hash of the instance settings.",
                "type": "string"
              },
              "raw": {
                "description": "Unencoded instance settings, if supported.",
                "type": "object"
              }
            }
          },
          "form_data": {
            "description": "URL-encoded form data from the widget admin form. Used to update a widget that does not support instance. Write only.",
            "type": "string"
          }
        }
      },
      "WidgetView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WidgetBase"
          }
        ]
      },
      "WidgetEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WidgetBase"
          }
        ]
      },
      "WidgetEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WidgetBase"
          }
        ]
      },
      "WidgetResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/WidgetView"
          },
          {
            "$ref": "#/components/schemas/WidgetEmbed"
          },
          {
            "$ref": "#/components/schemas/WidgetEdit"
          }
        ]
      },
      "WpPatternCategoryBase": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier for the term.",
            "type": "integer",
            "readOnly": true
          },
          "count": {
            "description": "Number of published posts for the term.",
            "type": "integer",
            "readOnly": true
          },
          "description": {
            "description": "HTML description of the term.",
            "type": "string"
          },
          "link": {
            "description": "URL of the term.",
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "name": {
            "description": "HTML title for the term.",
            "type": "string"
          },
          "slug": {
            "description": "An alphanumeric identifier for the term unique to its type.",
            "type": "string"
          },
          "taxonomy": {
            "description": "Type attribution for the term.",
            "type": "string",
            "enum": [
              "wp_pattern_category"
            ],
            "readOnly": true
          },
          "meta": {
            "description": "Meta fields.",
            "type": "object"
          }
        }
      },
      "WpPatternCategoryBase-properties-id": {
        "description": "Unique identifier for the term.",
        "type": "integer",
        "readOnly": true
      },
      "properties-taxonomy": {
        "description": "Type attribution for the term.",
        "type": "string",
        "enum": [
          "wp_pattern_category"
        ],
        "readOnly": true
      },
      "WpPatternCategoryView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WpPatternCategoryBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/WpPatternCategoryBase-properties-id"
              },
              "count": {
                "$ref": "#/components/schemas/count"
              },
              "description": {
                "$ref": "#/components/schemas/properties-description"
              },
              "link": {
                "$ref": "#/components/schemas/properties-link"
              },
              "name": {
                "$ref": "#/components/schemas/name"
              },
              "slug": {
                "$ref": "#/components/schemas/slug"
              },
              "taxonomy": {
                "$ref": "#/components/schemas/properties-taxonomy"
              },
              "meta": {
                "$ref": "#/components/schemas/meta"
              }
            }
          }
        ]
      },
      "WpPatternCategoryEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WpPatternCategoryBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/WpPatternCategoryBase-properties-id"
              },
              "link": {
                "$ref": "#/components/schemas/properties-link"
              },
              "name": {
                "$ref": "#/components/schemas/name"
              },
              "slug": {
                "$ref": "#/components/schemas/slug"
              },
              "taxonomy": {
                "$ref": "#/components/schemas/properties-taxonomy"
              }
            }
          }
        ]
      },
      "WpPatternCategoryEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WpPatternCategoryBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/WpPatternCategoryBase-properties-id"
              },
              "count": {
                "$ref": "#/components/schemas/count"
              },
              "description": {
                "$ref": "#/components/schemas/properties-description"
              },
              "link": {
                "$ref": "#/components/schemas/properties-link"
              },
              "name": {
                "$ref": "#/components/schemas/name"
              },
              "slug": {
                "$ref": "#/components/schemas/slug"
              },
              "taxonomy": {
                "$ref": "#/components/schemas/properties-taxonomy"
              },
              "meta": {
                "$ref": "#/components/schemas/meta"
              }
            }
          }
        ]
      },
      "WpPatternCategoryResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/WpPatternCategoryView"
          },
          {
            "$ref": "#/components/schemas/WpPatternCategoryEmbed"
          },
          {
            "$ref": "#/components/schemas/WpPatternCategoryEdit"
          }
        ]
      },
      "NavigationFallbackBase": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The unique identifier for the Navigation Menu.",
            "type": "integer",
            "readOnly": true
          }
        }
      },
      "NavigationFallbackView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NavigationFallbackBase"
          }
        ]
      },
      "NavigationFallbackEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NavigationFallbackBase"
          }
        ]
      },
      "NavigationFallbackEdit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NavigationFallbackBase"
          }
        ]
      },
      "NavigationFallbackResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/NavigationFallbackView"
          },
          {
            "$ref": "#/components/schemas/NavigationFallbackEmbed"
          },
          {
            "$ref": "#/components/schemas/NavigationFallbackEdit"
          }
        ]
      },
      "wp-site-health-test": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "title": "wp-site-health-test",
        "type": "object",
        "properties": {
          "test": {
            "type": "string",
            "description": "The name of the test being run.",
            "readOnly": true
          },
          "label": {
            "type": "string",
            "description": "A label describing the test.",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "description": "The status of the test.",
            "enum": [
              "good",
              "recommended",
              "critical"
            ],
            "readOnly": true
          },
          "badge": {
            "type": "object",
            "description": "The category this test is grouped in.",
            "properties": {
              "label": {
                "type": "string",
                "readOnly": true
              },
              "color": {
                "type": "string",
                "enum": [
                  "blue",
                  "orange",
                  "red",
                  "green",
                  "purple",
                  "gray"
                ],
                "readOnly": true
              }
            },
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "A more descriptive explanation of what the test looks for, and why it is important for the user.",
            "readOnly": true
          },
          "actions": {
            "type": "string",
            "description": "HTML containing an action to direct the user to where they can resolve the issue.",
            "readOnly": true
          }
        }
      }
    }
  }
}